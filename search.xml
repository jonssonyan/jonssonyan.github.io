<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Shell基础</title>
    <url>/2021/05/21/Shell%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
Shell记录

<span id="more"></span>

<h1 id="输出带颜色的字符串"><a href="#输出带颜色的字符串" class="headerlink" title="输出带颜色的字符串"></a>输出带颜色的字符串</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line">initVar() &#123;</span><br><span class="line">        echoType=&#x27;echo -e&#x27;</span><br><span class="line">&#125;</span><br><span class="line">initVar</span><br><span class="line">echoContent() &#123;</span><br><span class="line">        case $1 in</span><br><span class="line">        # 红色</span><br><span class="line">        &quot;red&quot;)</span><br><span class="line">                # shellcheck disable=SC2154</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[31m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">                # 天蓝色</span><br><span class="line">        &quot;skyBlue&quot;)</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[1;36m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">                # 绿色</span><br><span class="line">        &quot;green&quot;)</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[32m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">                # 白色</span><br><span class="line">        &quot;white&quot;)</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[37m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">        &quot;magenta&quot;)</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[31m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">                # 黄色</span><br><span class="line">        &quot;yellow&quot;)</span><br><span class="line">                $&#123;echoType&#125; &quot;\033[33m$&#123;printN&#125;$2 \033[0m&quot;</span><br><span class="line">                ;;</span><br><span class="line">        esac</span><br><span class="line">&#125;</span><br><span class="line">echoContent red &quot;hello world&quot;</span><br><span class="line">echoContent skyBlue &quot;hello world&quot;</span><br><span class="line">echoContent green &quot;hello world&quot;</span><br><span class="line">echoContent white &quot;hello world&quot;</span><br><span class="line">echoContent magenta &quot;hello world&quot;</span><br><span class="line">echoContent yellow &quot;hello world&quot;</span><br></pre></td></tr></table></figure>

<h1 id="输出字符串到文件-常用于文件编辑"><a href="#输出字符串到文件-常用于文件编辑" class="headerlink" title="输出字符串到文件 常用于文件编辑"></a>输出字符串到文件 常用于文件编辑</h1><p>文件必须存在，无论文件中有没有内容，全会被覆盖</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">  cat &lt;&lt;EOF &gt;/root/hello.conf</span><br><span class="line">server &#123;</span><br><span class="line">    hello world</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure>

<h1 id="检测当前服务器系统"><a href="#检测当前服务器系统" class="headerlink" title="检测当前服务器系统"></a>检测当前服务器系统</h1><p>检测<code>CentOS/Debian/Ubantu</code>和其他系统</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">checkSystem() &#123;</span><br><span class="line">  if [[ -n $(find /etc -name &quot;redhat-release&quot;) ]] || grep &lt;/proc/version -q -i &quot;centos&quot;; then</span><br><span class="line">    # 检测系统版本号</span><br><span class="line">    centosVersion=$(rpm -q centos-release | awk -F &quot;[-]&quot; &#x27;&#123;print $3&#125;&#x27; | awk -F &quot;[.]&quot; &#x27;&#123;print $1&#125;&#x27;)</span><br><span class="line">    if [[ -z &quot;$&#123;centosVersion&#125;&quot; ]] &amp;&amp; grep &lt;/etc/centos-release &quot;release 8&quot;; then</span><br><span class="line">      centosVersion=8</span><br><span class="line">    fi</span><br><span class="line">    release=&quot;centos&quot;</span><br><span class="line"></span><br><span class="line">  elif grep &lt;/etc/issue -q -i &quot;debian&quot; &amp;&amp; [[ -f &quot;/etc/issue&quot; ]] || grep &lt;/etc/issue -q -i &quot;debian&quot; &amp;&amp; [[ -f &quot;/proc/version&quot; ]]; then</span><br><span class="line">    if grep &lt;/etc/issue -i &quot;8&quot;; then</span><br><span class="line">      debianVersion=8</span><br><span class="line">    fi</span><br><span class="line">    release=&quot;debian&quot;</span><br><span class="line"></span><br><span class="line">  elif grep &lt;/etc/issue -q -i &quot;ubuntu&quot; &amp;&amp; [[ -f &quot;/etc/issue&quot; ]] || grep &lt;/etc/issue -q -i &quot;ubuntu&quot; &amp;&amp; [[ -f &quot;/proc/version&quot; ]]; then</span><br><span class="line">    release=&quot;ubuntu&quot;</span><br><span class="line">  fi</span><br><span class="line"></span><br><span class="line">  if [[ -z $&#123;release&#125; ]]; then</span><br><span class="line">    echo &quot;其他系统&quot;</span><br><span class="line">    exit 0</span><br><span class="line">  else</span><br><span class="line">    echo &quot;当前系统为$&#123;release&#125;&quot;</span><br><span class="line">  fi</span><br><span class="line">&#125;</span><br><span class="line">checkSystem</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Shell</category>
      </categories>
      <tags>
        <tag>Shell</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序开发</title>
    <url>/2021/05/12/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>前端UI使用IView，后端使用云开发，总结微信小程序开发遇到的细节</p>
<span id="more"></span>

<h1 id="setData修改data中子对象的属性值"><a href="#setData修改data中子对象的属性值" class="headerlink" title="setData修改data中子对象的属性值"></a>setData修改data中子对象的属性值</h1><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        product: &#123;</span><br><span class="line">            name: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            price: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">            stock: <span class="number">1</span>,</span><br><span class="line">            state: <span class="literal">true</span></span><br><span class="line">        &#125;,</span><br><span class="line">        files: []</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">handleChangeStock</span>(<span class="params">&#123;detail&#125;</span>)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            [<span class="string">&#x27;product.stock&#x27;</span>]: detail.value</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h1 id="picker为对象数组，设置range-key，并获取对象id"><a href="#picker为对象数组，设置range-key，并获取对象id" class="headerlink" title="picker为对象数组，设置range-key，并获取对象id"></a>picker为对象数组，设置range-key，并获取对象id</h1><h2 id="js"><a href="#js" class="headerlink" title="js"></a>js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        categorys: [</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">10</span>,</span><br><span class="line">                name: <span class="string">&#x27;美国&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">11</span>,</span><br><span class="line">                name: <span class="string">&#x27;中国&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">12</span>,</span><br><span class="line">                name: <span class="string">&#x27;巴西&#x27;</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                id: <span class="number">13</span>,</span><br><span class="line">                name: <span class="string">&#x27;日本&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        category: &#123;&#125;,</span><br><span class="line">        bindPickerChange: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">let</span> category = <span class="built_in">this</span>.data.categorys[e.detail.value];</span><br><span class="line">        <span class="built_in">this</span>.setData(&#123;</span><br><span class="line">            [<span class="string">&#x27;category&#x27;</span>]: category</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(category);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="wxml"><a href="#wxml" class="headerlink" title="wxml"></a>wxml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view style&#x3D;&quot;padding: 16px&quot;&gt;</span><br><span class="line">  &lt;picker mode&#x3D;&quot;selector&quot; bindchange&#x3D;&quot;bindPickerChange&quot; range-key&#x3D;&quot;name&quot; range&#x3D;&quot;&#123;&#123;categorys&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;view class&#x3D;&quot;picker&quot;&gt;</span><br><span class="line">            当前选择：&#123;&#123;category.name&#125;&#125;</span><br><span class="line">        &lt;&#x2F;view&gt;</span><br><span class="line">    &lt;&#x2F;picker&gt;</span><br><span class="line">&lt;&#x2F;view&gt;</span><br></pre></td></tr></table></figure>
<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p><img src="https://files.mdnice.com/user/10819/69033cf7-cec5-4eb1-bf63-af032317f26f.png"></p>
<h1 id="获取全局变量"><a href="#获取全局变量" class="headerlink" title="获取全局变量"></a>获取全局变量</h1><p>全局变量的文件位置在app.js文件中</p>
<p>在js中通过如下方式获取全局的userInfo变量值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> app = getApp();</span><br><span class="line">app.globalData.userInfo;</span><br></pre></td></tr></table></figure>

<p>设置全局变量也很简单，直接赋值即可</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.globalData.userInfo = res.userInfo;</span><br></pre></td></tr></table></figure>

<h1 id="pages的生命周期"><a href="#pages的生命周期" class="headerlink" title="pages的生命周期"></a>pages的生命周期</h1><p>onLoad：只调用一次<br>onShow，onHide，onUnload：每次页面展示时都会调用</p>
<h2 id="js-1"><a href="#js-1" class="headerlink" title="js"></a>js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面加载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onLoad: <span class="function"><span class="keyword">function</span> (<span class="params">options</span>) </span>&#123;</span><br><span class="line">       </span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onReady: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面显示</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onShow: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面隐藏</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onHide: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生命周期函数--监听页面卸载</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    onUnload: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/app-service/page-life-cycle.html">生命周期微信开放文档</a></li>
</ol>
<h1 id="bindtap事件传递当前循环到的对象"><a href="#bindtap事件传递当前循环到的对象" class="headerlink" title="bindtap事件传递当前循环到的对象"></a>bindtap事件传递当前循环到的对象</h1><h2 id="wxml-1"><a href="#wxml-1" class="headerlink" title="wxml"></a>wxml</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;i-card wx:for&#x3D;&quot;&#123;&#123;products&#125;&#125;&quot; wx:key&#x3D;&quot;*this&quot; data-product&#x3D;&quot;&#123;&#123;item&#125;&#125;&quot; title&#x3D;&quot;&#123;&#123;item.name&#125;&#125;&quot; bindtap&#x3D;&quot;cardClick&quot;</span><br><span class="line">        full&#x3D;&quot;true&quot;&gt;</span><br><span class="line">    &lt;view slot&#x3D;&quot;content&quot;&gt;创建时间：&#123;&#123;item.createTime&#125;&#125;&lt;&#x2F;view&gt;</span><br><span class="line">&lt;&#x2F;i-card&gt;</span><br></pre></td></tr></table></figure>
<h2 id="js-2"><a href="#js-2" class="headerlink" title="js"></a>js</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">Page(&#123;</span><br><span class="line">    cardClick: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(e)</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="效果-1"><a href="#效果-1" class="headerlink" title="效果"></a>效果</h2><p><img src="https://files.mdnice.com/user/10819/f969cbb0-0861-4cae-8af7-7c17c2319f4c.png"></p>
<h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol>
<li>data-名称 不能有大写字母，如果需要，可以通过 - （中划线）来连接单词，编译的时候小程序会将第二个单词首字母自动大写。data-* 属性中不可以存放对象</li>
<li>target触发事件的源组件。currentTarget事件绑定的当前组件。</li>
<li>id传参和dataset类似，只是最后获取值的时候不同，event.currentTarget.id</li>
</ol>
<h2 id="Reference-1"><a href="#Reference-1" class="headerlink" title="Reference"></a>Reference</h2><ol>
<li><a href="https://developers.weixin.qq.com/miniprogram/dev/framework/view/wxml/event.html">事件|微信开放文档</a></li>
<li><a href="https://blog.csdn.net/u013778905/article/details/59129272">微信小程序-bindtap等事件传参</a></li>
</ol>
<h1 id="云开发使用模糊匹配-类似-like"><a href="#云开发使用模糊匹配-类似-like" class="headerlink" title="云开发使用模糊匹配 类似 like"></a>云开发使用模糊匹配 类似 like</h1><p>小程序的云开发目前暂时没有类似数据库的like关键字，我们可以换个思路，使用正则表达式来实现这个效果。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">cloud.init()</span><br><span class="line">const db = cloud.database();</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">    const &#123;filter = &#123;&#125;, pageSize = 10, pageNum = 1&#125; = event;</span><br><span class="line">    if (filter.name !== undefined || null || &#x27;&#x27;) &#123;</span><br><span class="line">        filter.name = db.RegExp(&#123;</span><br><span class="line">            regexp: &#x27;.*&#x27; + filter.name + &#x27;.*&#x27;,</span><br><span class="line">            options: &#x27;i&#x27;,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    return  await db.collection(&#x27;product&#x27;).where(filter).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="云开发实现字段值大于小于比较"><a href="#云开发实现字段值大于小于比较" class="headerlink" title="云开发实现字段值大于小于比较"></a>云开发实现字段值大于小于比较</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">const cloud = require(&#x27;wx-server-sdk&#x27;)</span><br><span class="line">cloud.init()</span><br><span class="line">const db = cloud.database();</span><br><span class="line">exports.main = async (event, context) =&gt; &#123;</span><br><span class="line">    const &#123;filter = &#123;&#125;, pageSize = 10, pageNum = 1&#125; = event;</span><br><span class="line">    const _ = db.command</span><br><span class="line">    // 库存小于1</span><br><span class="line">    filter.stock = _.gt(1);</span><br><span class="line">    return await db.collection(&#x27;product&#x27;).where(filter).get();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="页面之间传值"><a href="#页面之间传值" class="headerlink" title="页面之间传值"></a>页面之间传值</h1><p>小程序之间页面传值也就是页面间事件通信通道</p>
<h2 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/route/EventChannel.html">https://developers.weixin.qq.com/miniprogram/dev/api/route/EventChannel.html</a></p>
<h2 id="文档摘要"><a href="#文档摘要" class="headerlink" title="文档摘要"></a>文档摘要</h2><h3 id="A页面js代码"><a href="#A页面js代码" class="headerlink" title="A页面js代码"></a>A页面js代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 跳转至商品详情界面</span></span><br><span class="line">                wx.navigateTo(&#123;</span><br><span class="line">                	<span class="comment">// 需要跳转的页面路径，保留当前页面，跳转到应用内的某个页面。但是不能跳到 tabbar 页面</span></span><br><span class="line">                    url: <span class="string">&#x27;/pages/buyDetail/buyDetail&#x27;</span>,</span><br><span class="line">                    events: &#123;&#125;,</span><br><span class="line">                    success: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">                        <span class="comment">// 通过eventChannel向被打开页面传送数据</span></span><br><span class="line">                        res.eventChannel.emit(<span class="string">&#x27;acceptDataFromOpenerPage&#x27;</span>, &#123;<span class="attr">order</span>: that.data.order&#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br></pre></td></tr></table></figure>

<h3 id="B页面js代码"><a href="#B页面js代码" class="headerlink" title="B页面js代码"></a>B页面js代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> eventChannel = <span class="built_in">this</span>.getOpenerEventChannel()</span><br><span class="line">        <span class="keyword">let</span> _id = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">await</span> eventChannel.on(<span class="string">&#x27;acceptDataFromOpenerPage&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">        	<span class="comment">// data对象就是A页面传来的值即order</span></span><br><span class="line">            _id = data.order._id</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">console</span>.log(_id)</span><br></pre></td></tr></table></figure>

<p>这样我们就可以将A页面的order数据传递至B页面。</p>
<h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h2><p>eventChannel所在的方法需要用async修饰，eventChannel前需要加await，如果不加很可能会出现最后才执行eventChannel的情况，导致_id一直是null值。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>Java中Arrays类的一些坑</title>
    <url>/2021/05/08/Java%E4%B8%ADArrays%E7%B1%BB%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p><code>java.util</code>包下Arrays类的踩坑记录</p>
<span id="more"></span>
<h1 id="通过asList返回的固定大侠的List不支持添加元素"><a href="#通过asList返回的固定大侠的List不支持添加元素" class="headerlink" title="通过asList返回的固定大侠的List不支持添加元素"></a>通过asList返回的固定大侠的List不支持添加元素</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">        list.add(<span class="string">&quot;cc&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> java.lang.UnsupportedOperationException</span><br><span class="line">	at java.util.AbstractList.add(AbstractList.java:<span class="number">148</span>)</span><br><span class="line">	at java.util.AbstractList.add(AbstractList.java:<span class="number">108</span>)</span><br><span class="line">	at Test.main(Test.java:<span class="number">8</span>)</span><br></pre></td></tr></table></figure>

<p>原因是 java.util.Arrays.ArrayList 类实现了 set()， get()，contains()方法，但是并没有实现增加元素的方法（事实上是可以调用 add 方法，但是没有具体实现，仅仅抛出 UnsupportedOperationException 异常），因此它的大小也是固定不变的。可以通过set方法进行设置值，默认长度是10。</p>
<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><h3 id="新建一个ArrayList"><a href="#新建一个ArrayList" class="headerlink" title="新建一个ArrayList"></a>新建一个ArrayList</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;(list);</span><br><span class="line">        strings.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[aa, bb, cc, dd]</span><br></pre></td></tr></table></figure>

<h3 id="通过集合工具类Collections-addAll-方法-最高效，推荐"><a href="#通过集合工具类Collections-addAll-方法-最高效，推荐" class="headerlink" title="通过集合工具类Collections.addAll()方法(最高效，推荐)"></a>通过集合工具类Collections.addAll()方法(最高效，推荐)</h3><p>通过Collections.addAll(arrayList, strArray)方式转换，根据数组的长度创建一个长度相同的List，然后通过Collections.addAll()方法，将数组中的元素转为二进制，然后添加到List中，这是最高效的方法。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;;</span><br><span class="line">        ArrayList&lt;String&gt; strings = <span class="keyword">new</span> ArrayList&lt;&gt;(arr.length);</span><br><span class="line">        Collections.addAll(strings, arr);</span><br><span class="line">        strings.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        System.out.println(strings.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[aa, bb, cc, dd]</span><br></pre></td></tr></table></figure>
<h3 id="Stream优雅的写法"><a href="#Stream优雅的写法" class="headerlink" title="Stream优雅的写法"></a>Stream优雅的写法</h3><p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String[] arr = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;;</span><br><span class="line">        List&lt;String&gt; list = Stream.of(arr).collect(Collectors.toList());</span><br><span class="line">        list.add(<span class="string">&quot;dd&quot;</span>);</span><br><span class="line">        System.out.println(list.toString());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[aa, bb, cc, dd]</span><br></pre></td></tr></table></figure>
<p>底层先将数组转换为流，再使用addAll()的方式，执行效率次于<code>Collections.addAll()</code>方式，但是写法优雅呀。</p>
<h1 id="对原始数组的修改会影响到我们获得的那个-List"><a href="#对原始数组的修改会影响到我们获得的那个-List" class="headerlink" title="对原始数组的修改会影响到我们获得的那个 List"></a>对原始数组的修改会影响到我们获得的那个 List</h1><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">       String[] arr = &#123;<span class="string">&quot;aa&quot;</span>, <span class="string">&quot;bb&quot;</span>, <span class="string">&quot;cc&quot;</span>&#125;;</span><br><span class="line">       List&lt;String&gt; list = Arrays.asList(arr);</span><br><span class="line">       arr[<span class="number">1</span>] = <span class="string">&quot;dd&quot;</span>;</span><br><span class="line">       System.out.printf(<span class="string">&quot;arr:%s list:%s&quot;</span>, Arrays.toString(arr), list);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行结果-1"><a href="#执行结果-1" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr:[aa, dd, cc] list:[aa, dd, cc]</span><br></pre></td></tr></table></figure>
<p>原因是Arrays内部类ArrayList其实是直接使用了原始的数组，把通过 Arrays.asList 获得的 List 交给其他方法处理，很容易因为共享了数组，相互修改产生 Bug。</p>
<h1 id="不能直接使用-Arrays-asList-来转换基本类型数组"><a href="#不能直接使用-Arrays-asList-来转换基本类型数组" class="headerlink" title="不能直接使用 Arrays.asList 来转换基本类型数组"></a>不能直接使用 Arrays.asList 来转换基本类型数组</h1><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List list = Arrays.asList(arr);</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<h2 id="执行结果-2"><a href="#执行结果-2" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p>原因是asList 方法的参数必须是对象或者对象数组，而原生数据类型不是对象，当传入一个原生数据类型数组时，asList 的真正得到的参数就不是数组中的元素，而是数组对象本身。</p>
<h2 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h2><p>Java8可通过stream流将3种基本类型数组转为List</p>
<p>如果JDK版本在1.8以上，可以使用流stream来将下列3种数组快速转为<code>List</code>，分别是<code>int[]</code>、<code>long[]</code>、<code>double[]</code>，其他数据类型比如<code>short[]</code>、<code>byte[]</code>、<code>char[]</code>，在JDK1.8中暂不支持。</p>
<p>代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.stream(arr).boxed().collect(Collectors.toList());</span><br><span class="line">        System.out.println(list);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>执行效果：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br></pre></td></tr></table></figure>
<h1 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h1><p>[1] Arrays.asList注意事项: <a href="https://zhuanlan.zhihu.com/p/153137723">https://zhuanlan.zhihu.com/p/153137723</a><br>[2] Java 中初始化 List 集合的 6 种方式!: <a href="https://blog.csdn.net/youanyyou/article/details/84846486">https://blog.csdn.net/youanyyou/article/details/84846486</a><br>[3] Arrays.toList() 和Collections.singletonList()的区别: <a href="https://blog.csdn.net/wz1159/article/details/86704752">https://blog.csdn.net/wz1159/article/details/86704752</a></p>
]]></content>
      <categories>
        <category>踩坑记录</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现的算法</title>
    <url>/2021/05/04/Java%E5%AE%9E%E7%8E%B0%E7%9A%84%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>使用Java语言实现的实用算法整理</p>
<span id="more"></span>
<h1 id="甘特图-最短工时算法"><a href="#甘特图-最短工时算法" class="headerlink" title="甘特图-最短工时算法"></a>甘特图-最短工时算法</h1><p>一个最短工时的算法，p1,p2,p3,p4为工作，分为10个作业，数字运算采用BigDecimal运算，防止精度丢失。</p>
<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="comment">// p1 p2 p3 p4为工位，数组内的值为作业需要的时间</span></span><br><span class="line">    <span class="keyword">static</span> BigDecimal[] p1 = &#123;BigDecimal.valueOf(<span class="number">7.988652</span>), BigDecimal.valueOf(<span class="number">8.770062</span>), BigDecimal.valueOf(<span class="number">12.952448</span>), BigDecimal.valueOf(<span class="number">11.160148</span>), BigDecimal.valueOf(<span class="number">16.0201</span>), BigDecimal.valueOf(<span class="number">9.87088</span>), BigDecimal.valueOf(<span class="number">13.284036</span>), BigDecimal.valueOf(<span class="number">19.07412</span>), BigDecimal.valueOf(<span class="number">20.058414</span>), BigDecimal.valueOf(<span class="number">15.014602</span>)&#125;;</span><br><span class="line">    <span class="keyword">static</span> BigDecimal[] p2 = &#123;BigDecimal.valueOf(<span class="number">9.936646</span>), BigDecimal.valueOf(<span class="number">13.722012</span>), BigDecimal.valueOf(<span class="number">7.010982</span>), BigDecimal.valueOf(<span class="number">16.496146</span>), BigDecimal.valueOf(<span class="number">8.82748</span>), BigDecimal.valueOf(<span class="number">19.907534</span>), BigDecimal.valueOf(<span class="number">14.962134</span>), BigDecimal.valueOf(<span class="number">20.094358</span>), BigDecimal.valueOf(<span class="number">15.97263</span>), BigDecimal.valueOf(<span class="number">12.03512</span>)&#125;;</span><br><span class="line">    <span class="keyword">static</span> BigDecimal[] p3 = &#123;BigDecimal.valueOf(<span class="number">5.935868</span>), BigDecimal.valueOf(<span class="number">13.005208</span>), BigDecimal.valueOf(<span class="number">9.04917</span>), BigDecimal.valueOf(<span class="number">12.013664</span>), BigDecimal.valueOf(<span class="number">18.114384</span>), BigDecimal.valueOf(<span class="number">17.928158</span>), BigDecimal.valueOf(<span class="number">19.846022</span>), BigDecimal.valueOf(<span class="number">14.148532</span>), BigDecimal.valueOf(<span class="number">14.970352</span>), BigDecimal.valueOf(<span class="number">7.041914</span>)&#125;;</span><br><span class="line">    <span class="keyword">static</span> BigDecimal[] p4 = &#123;BigDecimal.valueOf(<span class="number">18.128398</span>), BigDecimal.valueOf(<span class="number">11.24949</span>), BigDecimal.valueOf(<span class="number">16.052406</span>), BigDecimal.valueOf(<span class="number">19.087604</span>), BigDecimal.valueOf(<span class="number">16.831394</span>), BigDecimal.valueOf(<span class="number">18.942358</span>), BigDecimal.valueOf(<span class="number">20.012922</span>), BigDecimal.valueOf(<span class="number">13.883878</span>), BigDecimal.valueOf(<span class="number">15.116388</span>), BigDecimal.valueOf(<span class="number">8.949654</span>)&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> BigDecimal[][] sum = &#123;p2, p3, p4&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigDecimal <span class="title">sum</span><span class="params">(BigDecimal[] a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (n &lt; <span class="number">1</span>) ? p1[<span class="number">0</span>] : sum(a, n - <span class="number">1</span>).add(a[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 用于存储最长时间的数组</span></span><br><span class="line">        BigDecimal[] end = <span class="keyword">new</span> BigDecimal[p1.length];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; end.length; i++) &#123;</span><br><span class="line">            end[i] = sum(p1, i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (BigDecimal[] ints : sum) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ints.length; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                    end[i] = end[i].add(ints[i]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    end[i] = (end[i - <span class="number">1</span>].compareTo(end[i]) &gt; <span class="number">0</span> ? end[i - <span class="number">1</span>] : end[i]).add(ints[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 取出数组中最大的数就是最短工时</span></span><br><span class="line">        System.out.println(<span class="string">&quot;最短工时:&quot;</span> + Arrays.stream(end).max(BigDecimal::compareTo).get().toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">最短工时:<span class="number">184.778612</span></span><br></pre></td></tr></table></figure>

<h1 id="找出最长匹配前缀"><a href="#找出最长匹配前缀" class="headerlink" title="找出最长匹配前缀"></a>找出最长匹配前缀</h1><p>模仿JDK String 类下 startsWith 方法，写了一个可以找出最长匹配前缀的算法,给出一个value为前缀字符串的Map集合，找出需求字符串匹配最长前缀的key值</p>
<p>首先我们看一下JDK源码中String类下startsWith的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Tests if the substring of this string beginning at the</span></span><br><span class="line"><span class="comment"> * specified index starts with the specified prefix.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   prefix    the prefix.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span>   toffset   where to begin looking in this string.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span>  &#123;<span class="doctag">@code</span> true&#125; if the character sequence represented by the</span></span><br><span class="line"><span class="comment"> *          argument is a prefix of the substring of this object starting</span></span><br><span class="line"><span class="comment"> *          at index &#123;<span class="doctag">@code</span> toffset&#125;; &#123;<span class="doctag">@code</span> false&#125; otherwise.</span></span><br><span class="line"><span class="comment"> *          The result is &#123;<span class="doctag">@code</span> false&#125; if &#123;<span class="doctag">@code</span> toffset&#125; is</span></span><br><span class="line"><span class="comment"> *          negative or greater than the length of this</span></span><br><span class="line"><span class="comment"> *          &#123;<span class="doctag">@code</span> String&#125; object; otherwise the result is the same</span></span><br><span class="line"><span class="comment"> *          as the result of the expression</span></span><br><span class="line"><span class="comment"> *          &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> *          this.substring(toffset).startsWith(prefix)</span></span><br><span class="line"><span class="comment"> *          &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">startsWith</span><span class="params">(String prefix, <span class="keyword">int</span> toffset)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span> ta[] = value;</span><br><span class="line">    <span class="keyword">int</span> to = toffset;</span><br><span class="line">    <span class="keyword">char</span> pa[] = prefix.value;</span><br><span class="line">    <span class="keyword">int</span> po = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pc = prefix.value.length;</span><br><span class="line">    <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">    <span class="keyword">if</span> ((toffset &lt; <span class="number">0</span>) || (toffset &gt; value.length - pc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (--pc &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码也很容易看懂，首先排除前缀比字符串长的情况，在从前缀最后一个字符往前匹配到索引为0的位置，如果都能匹配上则返回true</p>
<p>仿照这个逻辑于是也写了一个，实现给出一个value为前缀字符串的Map集合，找出需求字符串匹配最长前缀的key值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;Long, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="number">11L</span>, <span class="string">&quot;上海路&quot;</span>);</span><br><span class="line">        map.put(<span class="number">20L</span>, <span class="string">&quot;南京路&quot;</span>);</span><br><span class="line">        System.out.println(startPrefixLongest(map, <span class="string">&quot;上海路陆家嘴&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 匹配字符串最长前缀</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> collect key-&gt;主键 value-&gt;前缀</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> name    需要匹配的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 最长前缀的key, 返回null表示没有前缀匹配上</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Long <span class="title">startPrefixLongest</span><span class="params">(Map&lt;Long, String&gt; collect, String name)</span> </span>&#123;</span><br><span class="line">        String newName = name.toUpperCase();</span><br><span class="line">        Long id = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">int</span> maxLength = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Long, String&gt; next : collect.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">char</span>[] ta = newName.toCharArray();</span><br><span class="line">            <span class="keyword">int</span> to = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">char</span>[] pa = next.getValue().toUpperCase().toCharArray();</span><br><span class="line">            <span class="keyword">int</span> po = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> pc = next.getValue().toCharArray().length;</span><br><span class="line">            <span class="comment">// Note: toffset might be near -1&gt;&gt;&gt;1.</span></span><br><span class="line">            <span class="keyword">if</span> (to &gt; ta.length - pc) &#123;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span> (--pc &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ta[to++] != pa[po++]) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (!flag) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span> (next.getValue().toCharArray().length &gt; maxLength) &#123;</span><br><span class="line">                maxLength = next.getValue().toCharArray().length;</span><br><span class="line">                id = next.getKey();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>测试结果</p>
<p><img src="https://files.mdnice.com/user/10819/2e0572f0-1d82-4113-bcec-01d689b37392.png"></p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticsearch基础语法</title>
    <url>/2021/04/24/Elasticsearch%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>Elasticsearch检索引擎，虽然分词不太准确，但是检索千万级别的数据也只是毫秒级别，与MySQL异曲同工，学习时建议拿来和MySQL的语法进行对比。</p>
<span id="more"></span>

<h1 id="聚合函数"><a href="#聚合函数" class="headerlink" title="聚合函数"></a>聚合函数</h1><h2 id="请求"><a href="#请求" class="headerlink" title="请求"></a>请求</h2><p><code>GET /ssns-message-202104/_search</code></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">0</span>, </span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;chatroomId&quot;</span>: [</span><br><span class="line">        <span class="string">&quot;4596907111&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5860373121&quot;</span>,</span><br><span class="line">        <span class="string">&quot;5860373121&quot;</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,<span class="attr">&quot;aggs&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;agg_chatroomId&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;terms&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;chatroomId&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h2><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;took&quot;</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">&quot;timed_out&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;successful&quot;</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">&quot;skipped&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;failed&quot;</span>: <span class="number">0</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;hits&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;total&quot;</span>: <span class="number">16829</span>,</span><br><span class="line">    <span class="attr">&quot;max_score&quot;</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">&quot;hits&quot;</span>: []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">&quot;aggregations&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;agg_chatroomId&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;doc_count_error_upper_bound&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;sum_other_doc_count&quot;</span>: <span class="number">0</span>,</span><br><span class="line">      <span class="attr">&quot;buckets&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;5860373121&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">13999</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;key&quot;</span>: <span class="string">&quot;4596907111&quot;</span>,</span><br><span class="line">          <span class="attr">&quot;doc_count&quot;</span>: <span class="number">2830</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>相当于MySQL中的语句如下</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="number">1</span>) <span class="keyword">from</span> ssns-message<span class="number">-202104</span> <span class="keyword">where</span> chatroomId <span class="keyword">in</span> (<span class="string">&#x27;4596907111&#x27;</span>,<span class="string">&#x27;5860373121&#x27;</span>,<span class="string">&#x27;5860373121&#x27;</span>) <span class="keyword">group</span> <span class="keyword">by</span> chatroomId</span><br></pre></td></tr></table></figure>

<h1 id="只查询指定字段的值"><a href="#只查询指定字段的值" class="headerlink" title="只查询指定字段的值"></a>只查询指定字段的值</h1><p>只查询文档中的_id和memberList字段</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET xxxx/room/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;_source&quot;</span>: [<span class="string">&quot;_id&quot;</span>,<span class="string">&quot;memberList&quot;</span>], </span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;term&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;departments.tree&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;/xx/xx&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="使用正则表达式"><a href="#使用正则表达式" class="headerlink" title="使用正则表达式"></a>使用正则表达式</h1><p>查找uin字段中包含@chatroom字符串的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET xxx/account/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;must&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;regexp&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;uin&quot;</span>: &#123;</span><br><span class="line">              <span class="attr">&quot;value&quot;</span>: <span class="string">&quot;.*@chatroom.*&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="按照多个字段排序"><a href="#按照多个字段排序" class="headerlink" title="按照多个字段排序"></a>按照多个字段排序</h1><p>先按照创建时间字段降序，再按照打分降序</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET xxx/account/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">&quot;sort&quot;</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;createTime&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">&quot;_score&quot;</span>: &#123;</span><br><span class="line">        <span class="attr">&quot;order&quot;</span>: <span class="string">&quot;desc&quot;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="查找存在某个字段的数据"><a href="#查找存在某个字段的数据" class="headerlink" title="查找存在某个字段的数据"></a>查找存在某个字段的数据</h1><p>查找存在uin字段的数据</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET xxx/account/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;query&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;bool&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;filter&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">&quot;exists&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">&quot;field&quot;</span>: <span class="string">&quot;uin&quot;</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h1><p>分页查询数据，相当于数据库中的limit关键字的用法，from默认是0，size默认是20</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">GET xxx/account/_search</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">&quot;from&quot;</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">&quot;size&quot;</span>: <span class="number">20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>假如页大小是pageSize，页号为pageNum<br><code>from=(pageNum-1)*pageSize</code><br><code>size=pageSize</code><br>例如：如果页大小是20，要查询第三页的数据，那么from为(3-1)*`20=60，size为20</p>
]]></content>
      <categories>
        <category>Elasticsearch</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL优化记录</title>
    <url>/2021/04/24/SQL%E4%BC%98%E5%8C%96%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>由于数据量过大，导致系统加载异常的满，优化首先想到的是SQL优化。</p>
<span id="more"></span>

<ol>
<li>最好不要给数据库留NULL，尽可能的使用 NOT NULL填充数据库</li>
<li>应尽量避免在 where 子句中使用 != 或 &lt;&gt; 操作符，否则将引擎放弃使用索引而进行全表扫描</li>
<li>应尽量避免在 where 子句中使用 or 来连接条件，如果一个字段有索引，一个字段没有索引，将导致引擎放弃使用索引而进行全表扫描，使用union all代替</li>
<li>in 和 not in 也要慎用，否则会导致全表扫描，连续的数值使用between代替，或者使用exists 代替 in</li>
<li>应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描</li>
<li>应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描</li>
<li>不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引</li>
<li>在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。<sup>[1]</sup></li>
<li>Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志</li>
<li>对于多张大数据量的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差</li>
<li>索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要</li>
<li>数据库字段数据类尽量使用占用空间小的数据类型。尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。<sup>[2]</sup></li>
<li>尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写</li>
</ol>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] MySQL复合索引生效条件: <a href="https://blog.csdn.net/qq_35275233/article/details/87888809">https://blog.csdn.net/qq_35275233/article/details/87888809</a><br>[2] MySQL数据类型大小及取值范围: <a href="https://www.runoob.com/mysql/mysql-data-types.html">https://www.runoob.com/mysql/mysql-data-types.html</a></p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring内置工具类</title>
    <url>/2021/04/21/Spring%E5%86%85%E7%BD%AE%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
Spring框架非常常用，必要的时候使用内置工具类可以减少第三方依赖的引入

<span id="more"></span>

<h1 id="FileSystemUtils"><a href="#FileSystemUtils" class="headerlink" title="FileSystemUtils"></a>FileSystemUtils</h1><p>文件系统实用工具类</p>
<h2 id="deleteRecursively"><a href="#deleteRecursively" class="headerlink" title="deleteRecursively"></a>deleteRecursively</h2><p><code>boolean deleteRecursively(@Nullable File root)</code>递归删除指定文件或目录，删除成功返回true，失败返回false，不会抛出异常。</p>
<p>重载方法<code>boolean deleteRecursively(@Nullable Path root)</code>和该方法功能相似，但该方法可能会抛出IO异常。</p>
<h2 id="copyRecursively"><a href="#copyRecursively" class="headerlink" title="copyRecursively"></a>copyRecursively</h2><p><code>void copyRecursively(File src, File dest)</code>递归复制src文件到dest（目标路径不存在则自动创建）</p>
<p>重载方法<code>void copyRecursively(Path src, Path dest)</code>。</p>
<h1 id="Base64Utils"><a href="#Base64Utils" class="headerlink" title="Base64Utils"></a>Base64Utils</h1><p>Base64加密解密工具类，默认UTF-8编码</p>
<h2 id="decode"><a href="#decode" class="headerlink" title="decode"></a>decode</h2><p><code>decode(byte[] src)</code>Base64解码给定的字节数组。</p>
<p><code>decodeFromString(String src)</code>Base64从UTF-8字符串解码给定的字节数组。</p>
<p><code>decodeFromUrlSafeString(String src)</code>使用RFC 4648 “URL和文件名安全字母”从UTF-8字符串中对给定的字节数组进行Base64解码。</p>
<p>如果不支持Base64编码，抛出<code>IllegalStateException</code>异常</p>
<h2 id="encode"><a href="#encode" class="headerlink" title="encode"></a>encode</h2><p><code>encode(byte[] src)</code>Base64编码给定的字节数组。</p>
<p><code>encodeToString(byte[] src)</code>Base64将给定的字节数组编码为String。</p>
<p><code>encodeToUrlSafeString(byte[] src)</code>使用RFC 4648 “URL和文件名安全字母”对给定的字节数组进行Base64编码为字符串。</p>
<p>如果不支持Base64编码，抛出<code>IllegalStateException</code>异常</p>
<h1 id="Assert"><a href="#Assert" class="headerlink" title="Assert"></a>Assert</h1><p>断言</p>
<h2 id="notNull"><a href="#notNull" class="headerlink" title="notNull"></a>notNull</h2><p><code>notNull(Object object)</code><br>当 object 不为 null 时抛出异常，notNull(Object object, String message) 方法允许您通过 message 定制异常信息。和 notNull() 方法断言规则相反的方法是 isNull(Object object)/isNull(Object object, String message)，它要求入参一定是 null;</p>
<h2 id="isTrue"><a href="#isTrue" class="headerlink" title="isTrue"></a>isTrue</h2><p><code>isTrue(boolean expression) / isTrue(boolean expression, String message)</code><br>当 expression 不为 true 抛出异常;</p>
<h2 id="notEmpty"><a href="#notEmpty" class="headerlink" title="notEmpty"></a>notEmpty</h2><p><code>notEmpty(Collection collection) / notEmpty(Collection collection, String message)</code><br>当集合未包含元素时抛出异常;<br>notEmpty(Map map) / notEmpty(Map map, String message) 和 notEmpty(Object[] array, String message) / notEmpty(Object[] array, String message) 分别对 Map 和 Object[] 类型的入参进行判断;</p>
<h2 id="hasLength"><a href="#hasLength" class="headerlink" title="hasLength"></a>hasLength</h2><p><code>hasLength(String text) / hasLength(String text, String message) </code><br>当 text 为 null 或长度为 0 时抛出异常;</p>
<h2 id="hasText"><a href="#hasText" class="headerlink" title="hasText"></a>hasText</h2><p><code>hasText(String text) / hasText(String text, String message)</code><br>text 不能为 null 且必须至少包含一个非空格的字符，否则抛出异常;</p>
<h2 id="isInstanceOf"><a href="#isInstanceOf" class="headerlink" title="isInstanceOf"></a>isInstanceOf</h2><p><code>isInstanceOf(Class clazz, Object obj) / isInstanceOf(Class type, Object obj, String message)</code><br>如果 obj 不能被正确造型为 clazz 指定的类将抛出异常;</p>
<h2 id="isAssignable"><a href="#isAssignable" class="headerlink" title="isAssignable"></a>isAssignable</h2><p><code>isAssignable(Class superType, Class subType) / isAssignable(Class superType, Class subType, String message)</code><br>subType 必须可以按类型匹配于 superType，否则将抛出异常;<br>使用 Assert 断言类可以简化方法入参检测的代码，如 InputStream getData(String file) 在应用 Assert 断言类后，其代码可以简化为以下的形式:</p>
<pre><code class="java">public InputStream getData(String file)&#123;
    // 使用 Spring 断言类进行方法入参检测 
    Assert.hasText(file,&quot;file入参不是有效的文件地址&quot;);

&#125;
</code></pre>
<h1 id="ClassUtils"><a href="#ClassUtils" class="headerlink" title="ClassUtils"></a>ClassUtils</h1><p>org.springframework.util.classUtils包含一些和java.lang.Class相关的实用方法。</p>
<h2 id="getDefaultClassLoader"><a href="#getDefaultClassLoader" class="headerlink" title="getDefaultClassLoader"></a>getDefaultClassLoader</h2><p><code>getDefaultClassLoader()</code><br>ClassLoader getDefaultClassLoader()获取当前线程上下文的类加载器</p>
<h2 id="forName"><a href="#forName" class="headerlink" title="forName"></a>forName</h2><p><code>forName(String name, ClassLoader classLoader)</code><br>通过类名返回类实例，类似于Class.forName()，但功能更强，可以用于原始类型，内部类等</p>
<h1 id="PropertiesLoaderUtils"><a href="#PropertiesLoaderUtils" class="headerlink" title="PropertiesLoaderUtils"></a>PropertiesLoaderUtils</h1><p>针对Properties文件的加载操作，在Spring对.properties文件和.factories文件的操作都有使用到</p>
<h2 id="loadProperties"><a href="#loadProperties" class="headerlink" title="loadProperties"></a>loadProperties</h2><p><code>Properties loadProperties(Resource resource) throws IOException;</code><br>从一个资源文件加载Properties</p>
<h2 id="loadProperties-1"><a href="#loadProperties-1" class="headerlink" title="loadProperties"></a>loadProperties</h2><p><code>Properties loadProperties(EncodedResource resource) throws IOException;</code><br>加载资源文件，传入的是提供了编码的资源类（EncodedResource）；和上面方法基本一致</p>
<h2 id="fillProperties"><a href="#fillProperties" class="headerlink" title="fillProperties"></a>fillProperties</h2><p><code>void fillProperties(Properties props, Resource resource) throws IOException;</code><br>从一个资源类中加载资源，并填充到指定的Properties对象中</p>
<h2 id="fillProperties-1"><a href="#fillProperties-1" class="headerlink" title="fillProperties"></a>fillProperties</h2><p><code>void fillProperties(Properties props, EncodedResource resource)throws IOException;</code><br>从一个编码资源类中加载资源，并填充到指定的Properties对象中；和上面方法基本一致</p>
<h2 id="loadAllProperties"><a href="#loadAllProperties" class="headerlink" title="loadAllProperties"></a>loadAllProperties</h2><p><code>Properties loadAllProperties(String resourceName) throws IOException;</code><br>根据资源文件名称，加载并合并classpath中的所有资源文件</p>
<h2 id="loadAllProperties-1"><a href="#loadAllProperties-1" class="headerlink" title="loadAllProperties"></a>loadAllProperties</h2><p><code>Properties loadAllProperties(String resourceName, ClassLoader classLoader) throws IOException;</code><br>从指定的ClassLoader中，根据资源文件名称，加载并合并classpath中的所有资源文件</p>
<h1 id="BeanUtils"><a href="#BeanUtils" class="headerlink" title="BeanUtils"></a>BeanUtils</h1><h2 id="copyProperties"><a href="#copyProperties" class="headerlink" title="copyProperties"></a>copyProperties</h2><p>将源对象的属性拷贝到目标对象<br><code>void copyProperties(Object source, Object target)</code></p>
<ul>
<li>target中的存在的属性，source中一定要有，但是a中可以有多余的属性；</li>
<li>source中与target中相同的属性都会被替换，不管是否有值；</li>
<li>source、target中的属性要名字相同，才能被赋值，不然的话需要手动赋值；</li>
<li>Spring的BeanUtils的CopyProperties方法需要对应的属性有getter和setter方法；</li>
</ul>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>Element使用记录</title>
    <url>/2021/04/21/Element%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>Element是饿了么团队开源的基于Vue.js的前端UI组件，栅格布局，用来绘制前端非常的方便</p>
<span id="more"></span>
<h1 id="前后端分离项目，后端返回的二进制数据，前端通过blob对象实现下载"><a href="#前后端分离项目，后端返回的二进制数据，前端通过blob对象实现下载" class="headerlink" title="前后端分离项目，后端返回的二进制数据，前端通过blob对象实现下载"></a>前后端分离项目，后端返回的二进制数据，前端通过blob对象实现下载</h1><h2 id="请求接口返回的数据"><a href="#请求接口返回的数据" class="headerlink" title="请求接口返回的数据"></a>请求接口返回的数据</h2><p><img src="https://files.mdnice.com/user/10819/d69c585e-3d12-4ae1-9b72-6ce55183e2cf.png"></p>
<p>在和后台交互的时候，如果后台返回给我们的是二进制流数据，我们就要在发送的时候加上<code>&#123;responseType:&#39;blob&#39;&#125;</code>或者是<code>&#123;responseType:&#39;arraybuffer&#39;&#125;</code></p>
<h2 id="Vue-js-axios通过blob对象实现下载"><a href="#Vue-js-axios通过blob对象实现下载" class="headerlink" title="Vue.js+axios通过blob对象实现下载"></a>Vue.js+axios通过blob对象实现下载</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">await</span> <span class="built_in">this</span>.$http.get(<span class="string">`/user/export`</span>, &#123;</span><br><span class="line">                    params: <span class="literal">null</span>,</span><br><span class="line">                    responseType: <span class="string">&#x27;blob&#x27;</span></span><br><span class="line">                &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">const</span> data = res.data;</span><br><span class="line">                    <span class="keyword">let</span> url = <span class="built_in">window</span>.URL.createObjectURL(data);   <span class="comment">// 将二进制文件转化为可访问的url</span></span><br><span class="line">                    <span class="keyword">var</span> a = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">                    <span class="built_in">document</span>.body.appendChild(a);</span><br><span class="line">                    a.href = url;</span><br><span class="line">                    a.download = <span class="string">&#x27;评教分析导出.xlsx&#x27;</span>;</span><br><span class="line">                    a.click();   <span class="comment">// 模拟点击下载</span></span><br><span class="line">                    <span class="built_in">window</span>.URL.revokeObjectURL(url)</span><br><span class="line">                &#125;);</span><br></pre></td></tr></table></figure>

<h1 id="上传文件到自己的服务器"><a href="#上传文件到自己的服务器" class="headerlink" title="上传文件到自己的服务器"></a>上传文件到自己的服务器</h1><p>在Element中有Upload组件，有两种上传方式，第一种是上传到图片服务器，再返回url，即<code>action</code>属性，第二种是自定义上传方式，即<code>http-request</code>属性<br>上传到自己的服务器上虽然有些缺点，但确实一种便捷并且节约成本的方式，代码如下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&lt;el-upload</span><br><span class="line">        action=&quot;&quot;</span><br><span class="line">        :http-request=&quot;uploadFile&quot;</span><br><span class="line">        list-type=&quot;picture-card&quot;</span><br><span class="line">        :on-preview=&quot;handlePictureCardPreview&quot;</span><br><span class="line">        :on-remove=&quot;handleRemove&quot;&gt;</span><br><span class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-plus&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogVisible&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">width</span>=<span class="string">&quot;100%&quot;</span> <span class="attr">:src</span>=<span class="string">&quot;dialogImageUrl&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        dialogImageUrl: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        dialogVisible: <span class="literal">false</span></span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      <span class="function"><span class="title">handleRemove</span>(<span class="params">file, fileList</span>)</span> &#123;</span><br><span class="line">         <span class="built_in">console</span>.log(file, fileList);</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="function"><span class="title">handlePictureCardPreview</span>(<span class="params">file</span>)</span> &#123;</span><br><span class="line">         <span class="built_in">this</span>.dialogImageUrl = file.url;</span><br><span class="line">         <span class="built_in">this</span>.imgDialogVisible = <span class="literal">true</span>;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="keyword">async</span> <span class="function"><span class="title">uploadFile</span>(<span class="params">params</span>)</span> &#123;</span><br><span class="line">         <span class="comment">// 通过form数据格式来传                    </span></span><br><span class="line">         <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">         <span class="comment">// 设置参数        </span></span><br><span class="line">         formData.append(<span class="string">&quot;file&quot;</span>, params.file);</span><br><span class="line">         <span class="comment">// 请求自己服务器上传文件的接口            </span></span><br><span class="line">         <span class="keyword">let</span> &#123;<span class="attr">data</span>: res&#125; = <span class="keyword">await</span> <span class="built_in">this</span>.$http.post(<span class="string">`/picture/upload`</span>, formData);</span><br><span class="line">         <span class="built_in">console</span>.log(res);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Element</category>
      </categories>
      <tags>
        <tag>Element</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL记录</title>
    <url>/2021/04/13/MySQL%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>MySQL是开源数据库，常年位于最常用数据库前二，本文基于MySQL5.7，记录以便日后查阅。</p>
<span id="more"></span>
<h1 id="时间戳和日期之间得转换"><a href="#时间戳和日期之间得转换" class="headerlink" title="时间戳和日期之间得转换"></a>时间戳和日期之间得转换</h1><h2 id="时间戳转日期"><a href="#时间戳转日期" class="headerlink" title="时间戳转日期"></a>时间戳转日期</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> FROM_UNIXTIME(<span class="number">1606028010</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="日期转时间戳"><a href="#日期转时间戳" class="headerlink" title="日期转时间戳"></a>日期转时间戳</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="string">&#x27;2018-01-15 09:45:16&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="时间戳格式化"><a href="#时间戳格式化" class="headerlink" title="时间戳格式化"></a>时间戳格式化</h2><p>十位时间戳转为固定格式(yyyy-MM-dd HH:mm:ss)日期<br>格式规定如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">%M 月名字(January……December)</span><br><span class="line">%W 星期名字(Sunday……Saturday)</span><br><span class="line">%D 有英语前缀的月份的日期(1st, 2nd, 3rd, 等等。）</span><br><span class="line">%Y 年, 数字, 4 位</span><br><span class="line">%y 年, 数字, 2 位</span><br><span class="line">%a 缩写的星期名字(Sun……Sat)</span><br><span class="line">%d 月份中的天数, 数字(00……31)</span><br><span class="line">%e 月份中的天数, 数字(0……31)</span><br><span class="line">%m 月, 数字(01……12)</span><br><span class="line">%c 月, 数字(1……12)</span><br><span class="line">%b 缩写的月份名字(Jan……Dec)</span><br><span class="line">%j 一年中的天数(001……366)</span><br><span class="line">%H 小时(00……23)</span><br><span class="line">%k 小时(0……23)</span><br><span class="line">%h 小时(01……12)</span><br><span class="line">%I 小时(01……12)</span><br><span class="line">%l 小时(1……12)</span><br><span class="line">%i 分钟, 数字(00……59)</span><br><span class="line">%r 时间,12 小时(hh:mm:ss [AP]M)</span><br><span class="line">%T 时间,24 小时(hh:mm:ss)</span><br><span class="line">%S 秒(00……59)</span><br><span class="line">%s 秒(00……59)</span><br><span class="line">%p AM或PM</span><br><span class="line">%w 一个星期中的天数(0=Sunday ……6=Saturday ）</span><br><span class="line">%U 星期(0……52), 这里星期天是星期的第一天</span><br><span class="line">%u 星期(0……52), 这里星期一是星期的第一天</span><br><span class="line">%% 一个文字“%”。</span><br></pre></td></tr></table></figure>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> FROM_UNIXTIME(<span class="number">1567267200</span>, <span class="string">&#x27;%Y-%m-%d %H:%i:%s&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">DATE_FORMAT</span>(<span class="string">&#x27;2020-12-15 11:19:27&#x27;</span>,<span class="string">&#x27;%Y-%m-%d&#x27;</span>);</span><br></pre></td></tr></table></figure>
<h2 id="转换13位时间戳为10位时间戳"><a href="#转换13位时间戳为10位时间戳" class="headerlink" title="转换13位时间戳为10位时间戳"></a>转换13位时间戳为10位时间戳</h2><p>MySQL中的时间戳是10位的，直接截取下标1-10位就可以了</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">substr</span>(<span class="number">1567267200000</span>, <span class="number">1</span>, <span class="number">10</span>);</span><br></pre></td></tr></table></figure>
<h2 id="当前时间"><a href="#当前时间" class="headerlink" title="当前时间"></a>当前时间</h2><h3 id="获取当前时间"><a href="#获取当前时间" class="headerlink" title="获取当前时间"></a>获取当前时间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br></pre></td></tr></table></figure>
<h3 id="获取当前十位时间戳"><a href="#获取当前十位时间戳" class="headerlink" title="获取当前十位时间戳"></a>获取当前十位时间戳</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">unix_timestamp</span>(<span class="keyword">now</span>());</span><br></pre></td></tr></table></figure>

<h3 id="获取三天前时间"><a href="#获取三天前时间" class="headerlink" title="获取三天前时间"></a>获取三天前时间</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">now</span>() - <span class="built_in">interval</span> <span class="number">72</span> <span class="keyword">hour</span>;</span><br></pre></td></tr></table></figure>

<h1 id="分组查询每组最新的一条数据"><a href="#分组查询每组最新的一条数据" class="headerlink" title="分组查询每组最新的一条数据"></a>分组查询每组最新的一条数据</h1><p>适用于主键自增的情况，即使创建时间在少数情况下一样也不影响，因为是根据自增的主键进行查找（最新的数据主键肯定是最大的，也就是最新的数据后插入数据库）</p>
<p>SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">id</span>, msg_content, msg_create_time</span><br><span class="line"><span class="keyword">from</span> safety_promotion_msg spm</span><br><span class="line">         <span class="keyword">inner</span> <span class="keyword">join</span> (<span class="keyword">select</span> <span class="keyword">max</span>(<span class="keyword">id</span>) max_id <span class="keyword">from</span> safety_promotion_msg <span class="keyword">group</span> <span class="keyword">by</span> msg_content) a <span class="keyword">on</span> a.max_id = spm.id;</span><br></pre></td></tr></table></figure>

<p>原始数据：</p>
<p><img src="https://files.mdnice.com/user/10819/d48c7113-64bf-4bbf-b6db-d5d6e7fcdbeb.png"></p>
<p>分组后：</p>
<p><img src="https://files.mdnice.com/user/10819/5d96ed0b-d8a4-4b7f-97c0-17b9afcd8429.png"></p>
<p>如果主键不自增则取最大的时间，即max(msg_create_time)，再将创建时间字段使用时间戳，防止创建时间一致的情况，保证精度最高。</p>
<h1 id="创建时间，更新时间，使用默认值自动设置"><a href="#创建时间，更新时间，使用默认值自动设置" class="headerlink" title="创建时间，更新时间，使用默认值自动设置"></a>创建时间，更新时间，使用默认值自动设置</h1><p>在数据库表设计中，经常会使用到创建时间字段和更新时间字段，我们可以为表中的字段设置相应的默认值，实现添加数据时创建时间字段的值自动为当前创建该数据的时间，更新数据时更新时间字段的值自动为当前更新该数据的时间。<br>这样可以减少后端代码的操作，将压力转换到数据库上。</p>
<p>SQL如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> 表名</span><br><span class="line">    <span class="keyword">ADD</span> (</span><br><span class="line">        <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">        <span class="string">`update_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新时间&#x27;</span></span><br><span class="line">        );</span><br></pre></td></tr></table></figure>

<p>注意：</p>
<p>MySQL5.5只支持一张表有且仅有一个字段默认值为CURRENT_TIMESTAMP<br>MySQL5.6及以上才支持一张表的两个及以上字段支持同时默认值为CURRENT_TIMESTAMP</p>
<p>补充：</p>
<p>Mysql使用Sql获取13位时间戳</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">REPLACE</span>(<span class="keyword">unix_timestamp</span>(<span class="keyword">current_timestamp</span>(<span class="number">3</span>)),<span class="string">&#x27;.&#x27;</span>,<span class="string">&#x27;&#x27;</span>);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Windows系统配置开发环境</title>
    <url>/2021/04/13/Windows%E7%B3%BB%E7%BB%9F%E9%85%8D%E7%BD%AE%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
记录在Windows环境下配置开发环境，Go开发环境搭建，PHP开发环境搭建，Zookeeper安装，Python开发环境，Maven，Gradle配置等

<span id="more"></span>

<h1 id="PhpStorm配置PHP开发环境"><a href="#PhpStorm配置PHP开发环境" class="headerlink" title="PhpStorm配置PHP开发环境"></a>PhpStorm配置PHP开发环境</h1><p>PhpStorm是JetBrains公司推出的PHP集成开发环境，开发PHP极其的丝滑般润滑，本文记录PhpStorm下配置PHP开发环境。PHP的开发环境是目前我接触的语言里配置比较繁琐的。</p>
<h2 id="下载php"><a href="#下载php" class="headerlink" title="下载php"></a>下载php</h2><p>进入PHP下载地址 <a href="http://windows.php.net/download">http://windows.php.net/download</a> 下载最新线程安全版PHP zip压缩包，解压缩后放在想要安装的路径下。</p>
<p><strong>注意：</strong> 下载的PHP VC版本不能比前面安装的vc redist版高。</p>
<p>进入PHP安装目录，复制一份<strong>php.ini-development</strong> 改名为 <strong>php.ini</strong> 放到安装路径下，打开找到 <strong>;extension_dir=ext</strong>，去掉注释符，将值改为 <strong>PHP安装路径\ext</strong>。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extension_dir = <span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\ext&quot;</span></span><br></pre></td></tr></table></figure>

<p>php 要使能 MySQL 的话还要在 ini 文件中找到下面几句话，取消注释</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extension=mysqli</span><br><span class="line">date.timezone = Asia/Shanghai</span><br></pre></td></tr></table></figure>
<h2 id="下载phpstorm"><a href="#下载phpstorm" class="headerlink" title="下载phpstorm"></a>下载phpstorm</h2><p><a href="https://www.jetbrains.com/zh-cn/phpstorm/">https://www.jetbrains.com/zh-cn/phpstorm/</a></p>
<h2 id="xdebug"><a href="#xdebug" class="headerlink" title="xdebug"></a>xdebug</h2><p>官网：<a href="https://xdebug.org/download">https://xdebug.org/download</a></p>
<p>配置php调试有很多种办法，最常用的就是使用xdebug，也有另一种方法，就是安装一个谷歌浏览器插件，感觉实用性不高所以这里使用xdebug的方式</p>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>官网上关于描述：<a href="https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable">https://xdebug.org/docs/upgrade_guide#changed-xdebug.remote_enable</a></p>
<p>百度上的一些教程配置都比较老，在之后的xdebug版本中配置有所变化具体看官网解释</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[Xdebug]</span><br><span class="line">;指定Xdebug扩展文件的绝对路径</span><br><span class="line">zend_extension=<span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\ext\php_xdebug-3.0.0-7.2-vc15-x86_64.dll&quot;</span></span><br><span class="line"></span><br><span class="line">xdebug.mode=debug</span><br><span class="line">xdebug.client_host=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span></span><br><span class="line">xdebug.client_port=<span class="number">9000</span></span><br><span class="line">xdebug.output_dir=<span class="string">&quot;D:\Applications\php-7.2.34-Win32-VC15-x64\xdebug&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/ddf44f79-24f9-40d1-9939-83a71dcdfd32.png"></p>
<p>注意：配置的端口（<code>xdebug.client_port</code>）要和phpstorm上面设置的端口一致</p>
<p><img src="https://files.mdnice.com/user/10819/2aa1fc17-6536-4aa2-adca-067052ecd934.png"></p>
<p>xdebug使用教程：<a href="https://www.bilibili.com/video/BV1Qx411f7pF?p=2">https://www.bilibili.com/video/BV1Qx411f7pF?p=2</a></p>
<h2 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx"></a>Nginx</h2><p>下载：<a href="http://nginx.org/en/download.html">http://nginx.org/en/download.html</a></p>
<h2 id="Composer"><a href="#Composer" class="headerlink" title="Composer"></a>Composer</h2><p>国内官网：<a href="https://www.phpcomposer.com/">https://www.phpcomposer.com/</a></p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>这里用的方式是用的<code>composer.phar</code>免安装的配置方式，当然你也可以去官网下载完整安装包，无脑下一步即可。</p>
<h3 id="Mac-或-Linux-系统"><a href="#Mac-或-Linux-系统" class="headerlink" title="Mac 或 Linux 系统"></a>Mac 或 Linux 系统</h3><p>打开命令行窗口并执行如下命令将前面下载的 <code>composer.phar</code> 文件移动到 <code>/usr/local/bin/</code> 目录下面：</p>
<p>复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo mv composer.phar /usr/<span class="built_in">local</span>/bin/composer</span><br></pre></td></tr></table></figure>

<h3 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h3><ol>
<li>找到并进入 PHP 的安装目录（和你在命令行中执行的 <code>php</code> 指令应该是同一套 PHP）。</li>
<li>将 <code>composer.phar</code> 复制到 PHP 的安装目录下面，也就是和 <code>php.exe</code> 在同一级目录。</li>
<li>在 PHP 安装目录下新建一个 <code>composer.bat</code> 文件，并将下列代码保存到此文件中。</li>
</ol>
<p>复制</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">@php <span class="string">&quot;%~dp0composer.phar&quot;</span> %*</span><br></pre></td></tr></table></figure>

<p>最后重新打开一个命令行窗口试一试执行 <code>composer --version</code> 看看是否正确输出版本号。</p>
<h3 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">[Composer\<span class="built_in">Exception</span>\NoSslException]</span><br><span class="line">  The openssl extension is required <span class="keyword">for</span> SSL/TLS protection but is not available. <span class="keyword">If</span> you can not enable the openssl ex</span><br><span class="line">  tension, you can disable this <span class="built_in">error</span>, at your own risk, by setting the <span class="string">&#x27;disable-tls&#x27;</span> option to <span class="literal">true</span>.</span><br></pre></td></tr></table></figure>

<p>关闭Composer的TLS来修复，注意：<strong>它不安全</strong></p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">composer config -g -- disable-tls <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>或者开启php.ini中的</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">extension=openssl</span><br></pre></td></tr></table></figure>

<p>特别提醒：</p>
<p>如果设置为true，则将使用HTTP尝试所有HTTPS URL，而不执行网络级加密。启用这是一个安全风险，不推荐。更好的方法是在php.ini中启用php_openssl和openssl扩展。</p>
<h3 id="设置国内镜像"><a href="#设置国内镜像" class="headerlink" title="设置国内镜像"></a>设置国内镜像</h3><h4 id="全局配置"><a href="#全局配置" class="headerlink" title="全局配置"></a>全局配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config -g repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<h4 id="局部配置"><a href="#局部配置" class="headerlink" title="局部配置"></a>局部配置</h4><p>仅修改当前工程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config repo.packagist composer https://mirrors.aliyun.com/composer/</span><br></pre></td></tr></table></figure>

<h4 id="取消配置"><a href="#取消配置" class="headerlink" title="取消配置"></a>取消配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config --unset repos.packagist</span><br></pre></td></tr></table></figure>

<h3 id="修改composer缓存路径"><a href="#修改composer缓存路径" class="headerlink" title="修改composer缓存路径"></a>修改composer缓存路径</h3><p><code>[cache-dir]</code>是Composer 的缓存目录，默认位置是<code>C:/Users/Jonsson/AppData/Local/Composer</code></p>
<p><code>[vendor-dir]</code>软件包的默认安装位置，默认位置是<code>C:/Users/Jonsson/vendor</code></p>
<p>在<code>php</code>安装目录下新建<code>Composer</code>文件夹，在<code>Composer</code>文件夹内再新建<code>cache-dir</code>，<code>vendor-dir</code>文件夹，输入以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer config -g cache-dir D:/Applications/php-7.2.34-Win32-VC15-x64/Composer/cache-dir</span><br><span class="line">composer config -g vendor-dir D:/Applications/php-7.2.34-Win32-VC15-x64/Composer/vendor-dir // 不建议修改vendor-dir，指定工程中使用composer install也会安装到这个目录，原因未知</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">composer init // 初始化composer.json文件</span><br><span class="line">composer list // 列出所有可用的命令</span><br><span class="line">composer install // 读取composer.json内容，解析依赖关系，安装依赖包到vendor目录下</span><br><span class="line">composer update // 更新最新的依赖关系到compsoer.lock文件，解析最新的依赖关系并且写入composer.lock文件</span><br><span class="line">composer search packagename // 搜索包，packagename替换为你想查找的包名称</span><br><span class="line">composer require packagename // 添加对packagename的依赖，packagename可修改为你想要的包名称</span><br><span class="line">composer show packagename</span><br><span class="line">composer self-update // 更新 composer.phar文件自身</span><br><span class="line">composer dump-autoload --optimize // 优化一下自动加载</span><br><span class="line">composer command --help // 选项查看帮助信息</span><br></pre></td></tr></table></figure>

<h1 id="GoLand配置Go开发环境搭建"><a href="#GoLand配置Go开发环境搭建" class="headerlink" title="GoLand配置Go开发环境搭建"></a>GoLand配置Go开发环境搭建</h1><p>不管学习什么编程语言一开始都会经历的四步</p>
<ul>
<li>开发工具安装</li>
<li>IDE安装</li>
<li>设置 依赖/包 国内镜像</li>
<li>项目构建工具，管理依赖/包</li>
</ul>
<h2 id="Golang安装"><a href="#Golang安装" class="headerlink" title="Golang安装"></a>Golang安装</h2><p>官网（需要各自手段）：<a href="https://golang.org/">https://golang.org</a><br>GitHub地址：<a href="https://github.com/golang/go">https://github.com/golang/go</a><br>Golang中文网：<a href="http://docscn.studygolang.com/">http://docscn.studygolang.com</a></p>
<h2 id="GoLand-IDE安装"><a href="#GoLand-IDE安装" class="headerlink" title="GoLand IDE安装"></a>GoLand IDE安装</h2><p><a href="https://www.jetbrains.com/zh-cn/go/">https://www.jetbrains.com/zh-cn/go/</a></p>
<h2 id="设置-依赖-包-国内镜像"><a href="#设置-依赖-包-国内镜像" class="headerlink" title="设置 依赖/包 国内镜像"></a>设置 依赖/包 国内镜像</h2><p><img src="https://img-blog.csdnimg.cn/20201023144401353.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>常用镜像地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://mirrors.aliyun.com/goproxy // 阿里云</span><br><span class="line">https://goproxy.io // 微软</span><br><span class="line">https://goproxy.cn // 七牛云</span><br><span class="line">https://gocenter.io // GoCenter</span><br></pre></td></tr></table></figure>

<h3 id="修改GOPATH路径"><a href="#修改GOPATH路径" class="headerlink" title="修改GOPATH路径"></a>修改<code>GOPATH</code>路径</h3><p><code>windows</code>上默认路径<code>%USERPROFILE%\go</code><br><code>mac&amp;linux</code> 上默认路径<code>$HOME/go</code></p>
<p>我这里演示的是将<code>GOPATH</code>路径设置为<code>D:\gopath</code></p>
<p><code>D:\gopath</code>用于存放<code>go mod</code>下载的第三方依赖包<br><code>D:\GolandProjects</code> 用于存放项目</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 始终开启go modules</span></span><br><span class="line"><span class="keyword">go</span> env -w GO111MODULE=on</span><br><span class="line"><span class="comment">// 设置七牛云镜像</span></span><br><span class="line"><span class="keyword">go</span> env -w GOPROXY=https:<span class="comment">//goproxy.cn</span></span><br><span class="line"><span class="comment">// 设置gopath</span></span><br><span class="line"><span class="keyword">go</span> env -w GOPATH=D:\gopath</span><br></pre></td></tr></table></figure>

<h3 id="将GOPATH添加至环境变量"><a href="#将GOPATH添加至环境变量" class="headerlink" title="将GOPATH添加至环境变量"></a>将<code>GOPATH</code>添加至环境变量</h3><p><img src="https://img-blog.csdnimg.cn/20201023144247610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h3 id="GoLand中gopath的设置"><a href="#GoLand中gopath的设置" class="headerlink" title="GoLand中gopath的设置"></a>GoLand中gopath的设置</h3><p><img src="https://img-blog.csdnimg.cn/2020102414003285.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="项目构建工具，管理依赖-包"><a href="#项目构建工具，管理依赖-包" class="headerlink" title="项目构建工具，管理依赖/包"></a>项目构建工具，管理依赖/包</h2><p>使用<code>go mod</code>方式构建项目优点</p>
<ol>
<li>自动下载依赖包</li>
<li>项目不必放在GOPATH/src内了</li>
<li>项目内会生成一个go.mod文件，列出包依赖</li>
<li>所有的第三方包会准确的指定版本号</li>
<li>对于已经转移的包，可以用replace 申明替换，不需要改代码</li>
</ol>
<h3 id="在-go-mod中编辑"><a href="#在-go-mod中编辑" class="headerlink" title="在 go.mod中编辑"></a>在 <code>go.mod</code>中编辑</h3><p><img src="https://img-blog.csdnimg.cn/20200924151044223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>go.mod可以写以下几个关键字：</p>
<ul>
<li>module<br>定义模组路径</li>
<li>go<br>定义go语言version</li>
<li>require<br>指定依赖的套件，预设是最新版，可以指定版本号</li>
<li>exclude<br>排除该套件和其版本</li>
<li>replace<br>使用不同的套件版本并替换原有的套件版本</li>
<li>注解<br>// 单行注解<br>/* 多行注解*/<br>indirect 代表被间接导入的依赖包</li>
</ul>
<h3 id="命令行-go-get-地址"><a href="#命令行-go-get-地址" class="headerlink" title="命令行 go get 地址"></a>命令行 <code>go get</code> 地址</h3><p><img src="https://img-blog.csdnimg.cn/20200924151202425.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>只要有开启<code>go modules</code>功能，<code>go get</code> 就不会像以前一样在<code>GOPATH/src</code>下放置套件档案，而是会放在<code>GOPATH/pkg/mod</code>里面，并且<code>go.mod</code>会写好引入，这样也就不用使用<code>go mod download</code>指令了。</p>
<h1 id="Clion配置OpenCV开发环境"><a href="#Clion配置OpenCV开发环境" class="headerlink" title="Clion配置OpenCV开发环境"></a>Clion配置OpenCV开发环境</h1><p>VS开发实在笨重，Clion是一个很智能的C/C++的集成开发环境，本文介绍在Clion中配置OpenCV开发环境。</p>
<h2 id="OpenCV"><a href="#OpenCV" class="headerlink" title="OpenCV"></a>OpenCV</h2><p>计算机视觉库</p>
<p>官网：<a href="https://opencv.org/">https://opencv.org/</a></p>
<p>CMake官网：<a href="https://cmake.org/">https://cmake.org/</a></p>
<p>MinGW-64：<a href="https://sourceforge.net/projects/mingw-w64/files/">https://sourceforge.net/projects/mingw-w64/files/</a></p>
<p>编译思路：使用cmake将源码编译成mingw版本，在使用mingw install到本地，最后在clion中在CMakeLists.txt配置</p>
<h2 id="MinGW在Windows上编译的OpenCV的32位和64位版本"><a href="#MinGW在Windows上编译的OpenCV的32位和64位版本" class="headerlink" title="MinGW在Windows上编译的OpenCV的32位和64位版本"></a>MinGW在Windows上编译的OpenCV的32位和64位版本</h2><p>编译好的，直接在clion中使用即可</p>
<p>OpenCV-MinGW-Build：<a href="https://github.com/huihut/OpenCV-MinGW-Build">https://github.com/huihut/OpenCV-MinGW-Build</a></p>
<h2 id="Clion配置"><a href="#Clion配置" class="headerlink" title="Clion配置"></a>Clion配置</h2><h3 id="下载OpenCV-MinGW-Build"><a href="#下载OpenCV-MinGW-Build" class="headerlink" title="下载OpenCV-MinGW-Build"></a>下载OpenCV-MinGW-Build</h3><p><img src="https://files.mdnice.com/user/10819/c1a06861-89de-4820-bb57-7f2f4b2787f5.png"></p>
<h3 id="添加至环境变脸"><a href="#添加至环境变脸" class="headerlink" title="添加至环境变脸"></a>添加至环境变脸</h3><p>在系统环境变量PATH中加上刚才解压的opencv的目录</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">D:\Applications\OpenCV<span class="literal">-MinGW</span><span class="literal">-Build</span><span class="literal">-OpenCV</span><span class="literal">-4</span>.<span class="number">0.0</span><span class="literal">-rc</span><span class="literal">-x64</span>\x64\mingw\bin</span><br></pre></td></tr></table></figure>

<h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><p>注意</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">cmake_minimum_required(VERSION <span class="number">3.15</span>)</span><br><span class="line"># 项目名称</span><br><span class="line">project(opencv_demo)</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>(CMAKE_CXX_STANDARD <span class="number">14</span>)</span><br><span class="line"></span><br><span class="line">add_executable(untitled2 main.cpp)</span><br><span class="line"># OpenCV-MinGW-Build</span><br><span class="line"><span class="built_in">set</span>(OpenCV_DIR D:/Applications/OpenCV-MinGW-Build-OpenCV<span class="number">-4.0</span><span class="number">.0</span>-rc-x64)</span><br><span class="line">FIND_PACKAGE(OpenCV REQUIRED)</span><br><span class="line"># 项目名称</span><br><span class="line">TARGET_LINK_LIBRARIES(opencv_demo $&#123;OpenCV_LIBS&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="测试程序"><a href="#测试程序" class="headerlink" title="测试程序"></a>测试程序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/highgui/highgui.hpp&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;opencv2/opencv.hpp&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cv::Mat srcImage=cv::imread(<span class="string">&quot;D:\\CLionProjects\\untitled2\\1.png&quot;</span>);</span><br><span class="line">    imshow(<span class="string">&quot;源图像&quot;</span>,srcImage);</span><br><span class="line">    cv::waitKey(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="安装MySQL-5-7-29"><a href="#安装MySQL-5-7-29" class="headerlink" title="安装MySQL-5.7.29"></a>安装MySQL-5.7.29</h1><p>在Windows环境下安装MySQL5.7.29免安装版</p>
<h2 id="下载MySQL5-7-29，解压"><a href="#下载MySQL5-7-29，解压" class="headerlink" title="下载MySQL5.7.29，解压"></a>下载MySQL5.7.29，解压</h2><p>MySQL5.7下载地址：<a href="https://dev.mysql.com/downloads/mysql/5.7.html">https://dev.mysql.com/downloads/mysql/5.7.html</a></p>
<p><img src="https://files.mdnice.com/user/10819/34d9f9ed-7225-486d-8d64-ef1b2d0a4bdc.png"></p>
<h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><h2 id="在MySQL根目录下新建-my-ini-文件并编辑"><a href="#在MySQL根目录下新建-my-ini-文件并编辑" class="headerlink" title="在MySQL根目录下新建 my.ini 文件并编辑"></a>在MySQL根目录下新建 my.ini 文件并编辑</h2><p><img src="https://files.mdnice.com/user/10819/b70e8299-2b95-4ab3-8b75-7acc855faee4.png"></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">[Client]</span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line">[mysqld]</span><br><span class="line"><span class="comment">#设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line"><span class="comment"># 设置mysql的安装目录</span></span><br><span class="line">basedir=D:\Applications\mysql-5.7.29-winx64\</span><br><span class="line"><span class="comment"># 设置mysql数据库的数据的存放目录</span></span><br><span class="line">datadir=D:\Applications\mysql-5.7.29-winx64\data</span><br><span class="line"><span class="comment"># 允许最大连接数</span></span><br><span class="line">max_connections=200</span><br><span class="line"><span class="comment"># 服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8mb4</span><br><span class="line"><span class="comment"># 创建新表时将使用的默认存储引擎</span></span><br><span class="line"><span class="keyword">default</span>-<span class="keyword">storage</span>-<span class="keyword">engine</span>=<span class="keyword">INNODB</span></span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,STRICT_TRANS_TABLES</span><br><span class="line"><span class="comment">#设置时区</span></span><br><span class="line"><span class="keyword">default</span>-<span class="built_in">time</span>-zone = <span class="string">&#x27;+8:00&#x27;</span></span><br><span class="line">[mysql]</span><br><span class="line"><span class="comment"># 设置mysql客户端默认字符集</span></span><br><span class="line"><span class="keyword">default</span>-<span class="built_in">character</span>-<span class="keyword">set</span>=utf8mb4</span><br></pre></td></tr></table></figure>

<h2 id="初始化数据文件"><a href="#初始化数据文件" class="headerlink" title="初始化数据文件"></a>初始化数据文件</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqld <span class="comment">--initialize-insecure --user=mysql;</span></span><br></pre></td></tr></table></figure>

<h2 id="使用管理员权限启动CMD，然后输入"><a href="#使用管理员权限启动CMD，然后输入" class="headerlink" title="使用管理员权限启动CMD，然后输入"></a>使用管理员权限启动CMD，然后输入</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysqld –<span class="keyword">install</span></span><br></pre></td></tr></table></figure>

<h2 id="启动MySQL服务"><a href="#启动MySQL服务" class="headerlink" title="启动MySQL服务"></a>启动MySQL服务</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">net <span class="keyword">start</span> mysql</span><br></pre></td></tr></table></figure>

<h2 id="命令行登录MySQL"><a href="#命令行登录MySQL" class="headerlink" title="命令行登录MySQL"></a>命令行登录MySQL</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<h2 id="进入界面后更改root密码（123456为我的新密码-，此处密码由您决定）"><a href="#进入界面后更改root密码（123456为我的新密码-，此处密码由您决定）" class="headerlink" title="进入界面后更改root密码（123456为我的新密码 ，此处密码由您决定）"></a>进入界面后更改root密码（123456为我的新密码 ，此处密码由您决定）</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">&#x27;123456&#x27;</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">&#x27;root&#x27;</span> <span class="keyword">and</span> Host = <span class="string">&#x27;localhost&#x27;</span>;</span><br></pre></td></tr></table></figure>

<h2 id="刷新权限"><a href="#刷新权限" class="headerlink" title="刷新权限"></a>刷新权限</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;</span><br></pre></td></tr></table></figure>

<h2 id="重启mysql即可正常使用"><a href="#重启mysql即可正常使用" class="headerlink" title="重启mysql即可正常使用"></a>重启mysql即可正常使用</h2><h3 id="使用命令行重启"><a href="#使用命令行重启" class="headerlink" title="使用命令行重启"></a>使用命令行重启</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">// 启动mysql服务</span><br><span class="line">net <span class="keyword">start</span> mysql</span><br><span class="line">// 停止mysql</span><br><span class="line">net <span class="keyword">stop</span> mysql</span><br></pre></td></tr></table></figure>

<h3 id="手动重启"><a href="#手动重启" class="headerlink" title="手动重启"></a>手动重启</h3><p><img src="https://files.mdnice.com/user/10819/eeab296a-65f9-4d05-8d5c-bd26e5bd6fcd.png"></p>
<h1 id="配置pip-Python开发环境"><a href="#配置pip-Python开发环境" class="headerlink" title="配置pip Python开发环境"></a>配置pip Python开发环境</h1><p>Windows下安装Python后会自带pip，pip是Python的默认包管理工具，本文基于Python3.7.9，介绍pip设置国内镜像，并设置默认包安装位置。</p>
<h2 id="修改国内镜像源"><a href="#修改国内镜像源" class="headerlink" title="修改国内镜像源"></a>修改国内镜像源</h2><h3 id="常见pip国内镜像"><a href="#常见pip国内镜像" class="headerlink" title="常见pip国内镜像"></a>常见pip国内镜像</h3><p>使用pip安装某些库可能速度较慢，可以考虑使用国内镜像</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">http://mirrors.aliyun.com/pypi/simple/ // 阿里云</span><br><span class="line">https://pypi.mirrors.ustc.edu.cn/simple/ // 中国科技大学</span><br><span class="line">http://pypi.douban.com/simple/ // 豆瓣(douban)</span><br><span class="line">https://pypi.tuna.tsinghua.edu.cn/simple/ // 清华大学</span><br></pre></td></tr></table></figure>

<h3 id="临时使用"><a href="#临时使用" class="headerlink" title="临时使用"></a>临时使用</h3><p>可以在使用pip的时候在后面加上<code>-i</code>参数，指定pip源</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install xxx -i https://pypi.mirrors.ustc.edu.cn/simple/</span><br></pre></td></tr></table></figure>

<h3 id="永久修改"><a href="#永久修改" class="headerlink" title="永久修改"></a>永久修改</h3><ol>
<li>Linux</li>
</ol>
<p>修改 <code>~/.pip/pip.conf</code> (没有就创建一个)， 内容如下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>Windows</li>
</ol>
<p>直接在user目录中创建一个pip目录，如：<code>C:\Users\xxx\pip</code>，新建文件pip.ini，内容如下</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line">[install]</span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure>

<h2 id="修改pip默认包安装位置"><a href="#修改pip默认包安装位置" class="headerlink" title="修改pip默认包安装位置"></a>修改pip默认包安装位置</h2><p>本机python安装位置为<code>D:\Applications\Python</code></p>
<p><img src="https://files.mdnice.com/user/10819/7b25f00c-3f11-4ba3-afea-3fd9410fa4aa.png"></p>
<p>python目录/文件的具体用途：</p>
<ul>
<li><strong>DLLs：</strong> Python 自己使用的动态库</li>
<li><strong>Doc：</strong> 自带的 Python 使用说明文档（如果上面安装时不选择，应该会没有，这个没具体试过）</li>
<li><strong>include：</strong> 包含共享目录</li>
<li><strong>Lib：</strong> 库文件，放自定义模块和包</li>
<li><strong>libs：</strong> 编译生成的Python 自己使用的静态库</li>
<li><strong>Scripts：</strong> 各种包/模块对应的可执行程序。安装时如果选择了pip。那么pip的可执行程序就在此！</li>
<li><strong>tcl：</strong> 桌面编程包</li>
</ul>
<p>pip包默认安装位置是<code>C:\Users\xxx\AppData\Roaming\Python\Python37\Lib\site-packages</code></p>
<p>命令行输入：<code>python -m site -help</code></p>
<p><img src="https://files.mdnice.com/user/10819/4d59f43f-712f-4575-85b1-574778034f09.png"></p>
<p>修改<code>D:\Applications\Python\Python37\Lib\site.py</code></p>
<p><img src="https://files.mdnice.com/user/10819/c57196ee-bbcd-455e-81eb-fc5fa6c6cca0.png"></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">USER_SITE = &#x27;D:\Applications\Python\Python37\Lib\site-packages&#x27;</span><br><span class="line">USER_BASE = &#x27;D:\Applications\Python\Python37\Scripts&#x27;</span><br></pre></td></tr></table></figure>

<h2 id="升级pip"><a href="#升级pip" class="headerlink" title="升级pip"></a>升级pip</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m pip install --upgrade pip</span><br></pre></td></tr></table></figure>

<h1 id="配置并运行-集群Zookeeper"><a href="#配置并运行-集群Zookeeper" class="headerlink" title="配置并运行 集群Zookeeper"></a>配置并运行 集群Zookeeper</h1><p>ZooKeeper是一个分布式的，开放源码的分布式应用程序协调服务，是Google的Chubby一个开源的实现，是Hadoop和Hbase的重要组件。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p>从Oracle的Java网站下载</p>
<blockquote>
<p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
</blockquote>
<h2 id="zookeeper下载地址"><a href="#zookeeper下载地址" class="headerlink" title="zookeeper下载地址"></a>zookeeper下载地址</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http:<span class="comment">//archive.apache.org/dist/zookeeper/zookeeper-3.4.14/</span></span><br></pre></td></tr></table></figure>

<h2 id="解压文件目录"><a href="#解压文件目录" class="headerlink" title="解压文件目录"></a>解压文件目录</h2><p><img src="https://img-blog.csdnimg.cn/20201206172813488.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"></p>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>修改\conf下的：<code>zoo_sample.cfg</code>文件名，改为：<code>zoo.cfg</code></p>
<p>默认配置：<br><img src="https://img-blog.csdnimg.cn/20201206173044512.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"></p>
<ol>
<li>tickTime：这个时间是作为 Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。</li>
<li>dataDir：顾名思义就是 Zookeeper 保存数据的目录，默认情况下，Zookeeper 将写数据的日志文件也保存在这个目录里。</li>
<li>dataLogDir：顾名思义就是 Zookeeper 保存日志文件的目录</li>
<li>clientPort：这个端口就是客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</li>
</ol>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>Zookeeper 的启动脚本在 <code>bin</code> 目录下，Windows 下的启动脚本是 <code>zkServer.cmd</code><br><img src="https://img-blog.csdnimg.cn/20201206174214207.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"></p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><p>增加几个配置项。集群模式除了上面的三个配置项还要增加下面几个配置项：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">initLimit=<span class="number">5</span> </span><br><span class="line">syncLimit=<span class="number">2</span> </span><br><span class="line">server<span class="number">.1</span>=<span class="number">192.168</span><span class="number">.211</span><span class="number">.1</span>:<span class="number">2888</span>:<span class="number">3888</span> </span><br><span class="line">server<span class="number">.2</span>=<span class="number">192.168</span><span class="number">.211</span><span class="number">.2</span>:<span class="number">2888</span>:<span class="number">3888</span></span><br></pre></td></tr></table></figure>

<ol>
<li>initLimit：这个配置项是用来配置 Zookeeper 接受客户端（这里所说的客户端不是用户连接 Zookeeper 服务器的客户端，而是 Zookeeper 服务器集群中连接到 Leader 的 Follower 服务器）初始化连接时最长能忍受多少个心跳时间间隔数。当已经超过 10 个心跳的时间（也就是 tickTime）长度后 Zookeeper 服务器还没有收到客户端的返回信息，那么表明这个客户端连接失败。总的时间长度就是 5*2000=10 秒</li>
<li>syncLimit：这个配置项标识 Leader 与 Follower 之间发送消息，请求和应答时间长度，最长不能超过多少个 tickTime 的时间长度，总的时间长度就是 2*2000=4 秒</li>
<li>server.A=B：C：D：其中 A 是一个数字，表示这个是第几号服务器；B 是这个服务器的 ip 地址；C 表示的是这个服务器与集群中的 Leader 服务器交换信息的端口；D 表示的是万一集群中的 Leader 服务器挂了，需要一个端口来重新进行选举，选出一个新的 Leader，而这个端口就是用来执行选举时服务器相互通信的端口。如果是伪集群的配置方式，由于 B 都是一样，所以不同的 Zookeeper 实例通信端口号不能一样，所以要给它们分配不同的端口号。</li>
<li>除了修改 zoo.cfg 配置文件，集群模式下还要配置一个文件 myid，这个文件在 dataDir 目录下，这个文件里面就有一个数据就是 A 的值，Zookeeper 启动时会读取这个文件，拿到里面的数据与 zoo.cfg 里面的配置信息比较从而判断到底是那个 server。</li>
</ol>
<h1 id="设置Maven国内镜像"><a href="#设置Maven国内镜像" class="headerlink" title="设置Maven国内镜像"></a>设置Maven国内镜像</h1><h2 id="方案1：针对所有项目修改中央仓库"><a href="#方案1：针对所有项目修改中央仓库" class="headerlink" title="方案1：针对所有项目修改中央仓库"></a>方案1：针对所有项目修改中央仓库</h2><p>右键项目选中maven选项，然后选择“open settings.xml”或者 “create settings.xml”，在 settings.xml 下找到 <mirrors> 节点，并在节点下增加镜像配置，重启IDE</p>
<!--more-->

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;mirrors&gt;</span><br><span class="line">        &lt;mirror&gt;</span><br><span class="line">            &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">            &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">            &lt;url&gt;http:<span class="comment">//maven.aliyun.com/nexus/content/groups/public/&lt;/url&gt;</span></span><br><span class="line">            &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">        &lt;/mirror&gt;</span><br><span class="line">&lt;/mirrors&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>id：唯一标识一个镜像</li>
<li>name：镜像名称</li>
<li>url：镜像地址</li>
<li>mirrorOf：代表一个镜像的替代位置，例如central就表示代替官方的中央仓库</li>
</ul>
<h2 id="方案2：分别给每个项目配置不同的中央仓库"><a href="#方案2：分别给每个项目配置不同的中央仓库" class="headerlink" title="方案2：分别给每个项目配置不同的中央仓库"></a>方案2：分别给每个项目配置不同的中央仓库</h2><p><strong>Maven 可以针对每个项目配置不同的中央仓库，在项目 pom.xml <repositories> 节点下增加如下配置</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;repository&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;https:<span class="comment">//maven.aliyun.com/repository/public&lt;/url&gt;</span></span><br><span class="line">&lt;/repository&gt;</span><br></pre></td></tr></table></figure>

<h2 id="设置Maven本地仓库位置"><a href="#设置Maven本地仓库位置" class="headerlink" title="设置Maven本地仓库位置"></a>设置Maven本地仓库位置</h2><p>在<code>settings.xml</code>节点下新建一下节点<code>localRepository</code><br>idea的Maven本地仓库是在用户文件夹下的<code>.m2</code>文件夹下，为了防止本地仓库太大，将仓库地址存放在项目同一磁盘下的<code>/workmaven/localRepository</code>文件夹内。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;localRepository&gt;/workmaven/localRepository&lt;/localRepository&gt;</span><br></pre></td></tr></table></figure>
<p>参考：<a href="https://maven.aliyun.com/mvn/guide">阿里云云效 Maven</a></p>
<h1 id="设置Gradle国内镜像"><a href="#设置Gradle国内镜像" class="headerlink" title="设置Gradle国内镜像"></a>设置Gradle国内镜像</h1><h2 id="配置本地仓库地址"><a href="#配置本地仓库地址" class="headerlink" title="配置本地仓库地址"></a>配置本地仓库地址</h2><p>gradle默认存放jar路径:<code>C:\Users\Administrator\.gradle\caches\</code></p>
<p>在环境变量中添加名为 <code>GRADLE_USER_HOME</code>，值为本地仓库位置的环境变量即可</p>
<h2 id="对所有项目生效"><a href="#对所有项目生效" class="headerlink" title="对所有项目生效"></a>对所有项目生效</h2><p>在<code>$&#123;USER_HOME&#125;/.gradle/</code>或者<code>$&#123;GRADLE_USER_HOME&#125;</code>下创建<code>init.gradle</code>文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">allprojects &#123;</span><br><span class="line">  repositories &#123;</span><br><span class="line">    maven &#123;</span><br><span class="line">      url <span class="string">&#x27;https://maven.aliyun.com/repository/public/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    mavenLocal()</span><br><span class="line">    mavenCentral()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置M2-HOME"><a href="#配置M2-HOME" class="headerlink" title="配置M2_HOME"></a>配置M2_HOME</h2><p><code>mavenLocal()</code>时Gradle默认会按以下顺序去查找本地的maven仓库：<code>$&#123;USER_HOME&#125;/.m2/settings.xml</code> &gt; <code>$&#123;M2_HOME&#125;/conf/settings.xml</code> &gt; <code>$&#123;USER_HOME&#125;/.m2/repository</code></p>
<h1 id="Miniconda安装"><a href="#Miniconda安装" class="headerlink" title="Miniconda安装"></a>Miniconda安装</h1><h2 id="Conda、Anaconda、Miniconda的区别"><a href="#Conda、Anaconda、Miniconda的区别" class="headerlink" title="Conda、Anaconda、Miniconda的区别"></a>Conda、Anaconda、Miniconda的区别</h2><p>Conda是一个包管理器;Anaconda是一个发行包<br>Conda可以理解为一个工具，也是一个可执行命令，其核心功能是包管理与环境管理。包管理与pip的使用类似，环境管理则允许用户方便地安装不同版本的Python并可以快速切换。<br>Anaconda是一个打包的集合器皿，里面预装好了Conda、某个版本的Python、众多packages、科学计算工具等等，所以也称为Python的一种发行版。也可以理解：Conda是包的管理，可以安装包（conda install samtools），删除环境（），查找等用法。<br>Miniconda，顾名思义，它只包含最基本的内容——Python与Conda，以及相关的必须依赖项，对于空间要求严格的用户，Miniconda是一种选择。</p>
<h2 id="Miniconda下载"><a href="#Miniconda下载" class="headerlink" title="Miniconda下载"></a>Miniconda下载</h2><p>官方：<a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a><br>国内镜像：<a href="https://repo.anaconda.com/miniconda/">https://repo.anaconda.com/miniconda/</a><br>API：<a href="https://conda.io/projects/conda/en/latest/index.html">https://conda.io/projects/conda/en/latest/index.html</a></p>
<h2 id="conda常用命令"><a href="#conda常用命令" class="headerlink" title="conda常用命令"></a>conda常用命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看环境名</span></span><br><span class="line">conda info --envs 或conda info -e</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看已安装软件列表</span></span><br><span class="line">conda list</span><br><span class="line"><span class="meta">#</span><span class="bash"> 退出环境</span></span><br><span class="line">source deactivate</span><br><span class="line"><span class="meta">#</span><span class="bash"> 更新 (conda将python等软件都视为package)</span> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 假设当前环境是python 3.4, conda会将python升级为3.4.x系列的当前最新版本</span></span><br><span class="line">conda update python </span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除全部packages</span></span><br><span class="line">conda remove --name/-n wes --all</span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除某个packages</span></span><br><span class="line">source activate wes</span><br><span class="line">conda remove multiqc</span><br><span class="line"><span class="meta">#</span><span class="bash"> 或直接指明name</span></span><br><span class="line">conda remove -n wes numpy</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Go</tag>
        <tag>环境搭建</tag>
        <tag>MySQL</tag>
        <tag>Python</tag>
        <tag>PhpStorm</tag>
        <tag>PHP</tag>
        <tag>GoLand</tag>
        <tag>OpenCV</tag>
        <tag>C/C++</tag>
        <tag>pip</tag>
        <tag>Zookeeper</tag>
        <tag>Maven</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Alibaba整合Nacos</title>
    <url>/2021/04/11/Spring%20Cloud%20Alibaba%E6%95%B4%E5%90%88Nacos/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
Nacos是阿里巴巴开发的用于发现、配置和管理微服务。与Spring Cloud Alibaba完美结合。Nacos 提供了一组简单易用的特性集，帮助您快速实现动态服务发现、服务配置、服务元数据及流量管理。Nacos是国产的，所以中文文档也很丰富。

<span id="more"></span>

<h1 id="启动配置管理"><a href="#启动配置管理" class="headerlink" title="启动配置管理"></a>启动配置管理</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">            &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-config&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.2.5.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- SpringCloud依赖，起到管理版本的作用 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;$&#123;com-alibaba-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>在应用的 <code>/src/main/resources/bootstrap.properties</code> 配置文件中配置 Nacos Config 元数据</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">spring.application.name</span>=<span class="string">spring-cloud-alibaba-nacos-config-example</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.config.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br></pre></td></tr></table></figure>

<p>需要先启动Nacos，否则启动后会有些报错</p>
<p>完成上述两步后，应用会从 Nacos Config 中获取相应的配置，并添加在 Spring Environment 的 PropertySources 中。这里我们使用 @Value 注解来将对应的配置注入到 SampleController 的 userName 和 age 字段，并添加 @RefreshScope 打开动态刷新功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RefreshScope</span></span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">SampleController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"> 	<span class="meta">@Value(&quot;$&#123;user.name&#125;&quot;)</span></span><br><span class="line"> 	String userName;</span><br><span class="line"></span><br><span class="line"> 	<span class="meta">@Value(&quot;$&#123;user.age&#125;&quot;)</span></span><br><span class="line"> 	<span class="keyword">int</span> age;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h2 id="启动-Nacos-Server-并添加配置"><a href="#启动-Nacos-Server-并添加配置" class="headerlink" title="启动 Nacos Server 并添加配置"></a>启动 Nacos Server 并添加配置</h2><h3 id="下载Nacos"><a href="#下载Nacos" class="headerlink" title="下载Nacos"></a>下载Nacos</h3><p>GitHub地址：<a href="https://github.com/alibaba/nacos/releases">https://github.com/alibaba/nacos/releases</a></p>
<h3 id="启动-Server"><a href="#启动-Server" class="headerlink" title="启动 Server"></a>启动 Server</h3><p>进去其相对文件夹 nacos/bin，并对照操作系统实际情况执行如下命令。<a href="https://nacos.io/zh-cn/docs/quick-start.html">详情参考官方文档</a>。</p>
<ul>
<li><p>Linux/Unix/Mac 操作系统，执行命令 <code>sh startup.sh -m standalone</code></p>
</li>
<li><p>Windows 操作系统，执行命令 <code>cmd startup.cmd</code></p>
</li>
</ul>
<p>在命令行执行如下命令，向 Nacos Server 中添加一条配置。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">POST &quot;http://127.0.0.1:8848/nacos/v1/cs/configs?dataId=nacos-config-example.properties&amp;group=DEFAULT_GROUP&amp;content=user.id=1%0Auser.name=james%0Auser.age=17&quot;</span><br></pre></td></tr></table></figure>

<h1 id="启动服务发现"><a href="#启动服务发现" class="headerlink" title="启动服务发现"></a>启动服务发现</h1><h2 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h2><h3 id="父级"><a href="#父级" class="headerlink" title="父级"></a>父级</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;java.version&gt;1.8&lt;/java.version&gt;</span><br><span class="line">    &lt;com-alibaba-cloud.version&gt;2.2.5.RELEASE&lt;/com-alibaba-cloud.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;modules&gt;</span><br><span class="line">    &lt;module&gt;nacos-discovery-consumer&lt;/module&gt;</span><br><span class="line">    &lt;module&gt;nacos-discovery-provider&lt;/module&gt;</span><br><span class="line">&lt;/modules&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">        &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br><span class="line">&lt;!-- SpringCloud依赖，起到管理版本的作用 --&gt;</span><br><span class="line">&lt;dependencyManagement&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-alibaba-dependencies&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;$&#123;com-alibaba-cloud.version&#125;&lt;/version&gt;</span><br><span class="line">            &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">            &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">&lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<h3 id="consumer"><a href="#consumer" class="headerlink" title="consumer"></a>consumer</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;spring-cloud-netflix.version&gt;2.2.5.RELEASE&lt;/spring-cloud-netflix.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-netflix-ribbon&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;$&#123;spring-cloud-netflix.version&#125;&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">        &lt;exclusions&gt;</span><br><span class="line">            &lt;exclusion&gt;</span><br><span class="line">                &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class="line">            &lt;/exclusion&gt;</span><br><span class="line">        &lt;/exclusions&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h3 id="provider"><a href="#provider" class="headerlink" title="provider"></a>provider</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;com.alibaba.nacos&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;nacos-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h2 id="添加注解"><a href="#添加注解" class="headerlink" title="添加注解"></a>添加注解</h2><p>通过 Spring Cloud 原生注解 <code>@EnableDiscoveryClient</code> 开启服务注册发现功能</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 开启服务注册发现功能</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosDiscoveryProviderApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(NacosDiscoveryProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="配置-1"><a href="#配置-1" class="headerlink" title="配置"></a>配置</h2><p> 在 <code>application.properties</code> 中配置 Nacos server 的地址</p>
<h3 id="consumer-1"><a href="#consumer-1" class="headerlink" title="consumer"></a>consumer</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">18083</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-consumer</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># nacos认证信息</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.username</span>=<span class="string">nacos</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure>

<h3 id="provier"><a href="#provier" class="headerlink" title="provier"></a>provier</h3><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">server.port</span>=<span class="string">18082</span></span><br><span class="line"><span class="meta">spring.application.name</span>=<span class="string">service-provider</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.discovery.server-addr</span>=<span class="string">127.0.0.1:8848</span></span><br><span class="line"><span class="comment"># nacos认证信息</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.username</span>=<span class="string">nacos</span></span><br><span class="line"><span class="meta">spring.cloud.nacos.password</span>=<span class="string">nacos</span></span><br></pre></td></tr></table></figure>

<h2 id="consumer-2"><a href="#consumer-2" class="headerlink" title="consumer"></a>consumer</h2><ol>
<li>config</li>
</ol>
<p>通过 Spring Cloud 原生注解 <code>@EnableDiscoveryClient</code> 开启服务注册发现功能。给 <a href="https://docs.spring.io/spring-boot/docs/current/reference/html/boot-features-resttemplate.html">RestTemplate</a> 实例添加 <code>@LoadBalanced</code> 注解，开启 <code>@LoadBalanced</code> 与 <a href="https://cloud.spring.io/spring-cloud-netflix/multi/multi_spring-cloud-ribbon.html">Ribbon</a> 的集成</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NacosConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/echo/&#123;str&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable</span> String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> restTemplate.getForObject(<span class="string">&quot;http://service-provider/echo/&quot;</span> + str, String.class);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="provier-1"><a href="#provier-1" class="headerlink" title="provier"></a>provier</h2><ol>
<li>controller</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &quot;/echo/&#123;string&#125;&quot;, method = RequestMethod.GET)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">echo</span><span class="params">(<span class="meta">@PathVariable</span> String string)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Hello Nacos Discovery &quot;</span> + string;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>最后启动 <code>ProviderApplication</code> 和 <code>ConsumerApplication</code> ，调用 <code>http://localhost:8080/echo/2021，返回内容为 </code>Hello Nacos Discovery 2021`。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Nacos Config Example: <a href="https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md">https://github.com/alibaba/spring-cloud-alibaba/blob/master/spring-cloud-alibaba-examples/nacos-example/nacos-config-example/readme-zh.md</a><br>[2] Nacos Spring Cloud: <a href="https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html">https://nacos.io/zh-cn/docs/quick-start-spring-cloud.html</a><br>[3] Nacos: <a href="https://nacos.io/zh-cn/docs/quick-start.html">https://nacos.io/zh-cn/docs/quick-start.html</a></p>
]]></content>
      <categories>
        <category>Spring Cloud Alibaba</category>
      </categories>
      <tags>
        <tag>Nacos</tag>
        <tag>Spring Cloud Alibaba</tag>
      </tags>
  </entry>
  <entry>
    <title>Java常用工具类记录</title>
    <url>/2021/04/02/Java%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E7%B1%BB%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>整理常用Java工具类，以便日后查阅</p>
<span id="more"></span>

<h1 id="将2019-06-03T16-00-00-000Z日期格式转换为2019-06-03-16-00-00格式"><a href="#将2019-06-03T16-00-00-000Z日期格式转换为2019-06-03-16-00-00格式" class="headerlink" title="将2019-06-03T16:00:00.000Z日期格式转换为2019-06-03 16:00:00格式"></a>将2019-06-03T16:00:00.000Z日期格式转换为2019-06-03 16:00:00格式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.springboot.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.hutool.core.util.StrUtil;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.text.DateFormat;</span><br><span class="line"><span class="keyword">import</span> java.text.ParseException;</span><br><span class="line"><span class="keyword">import</span> java.text.SimpleDateFormat;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.Locale;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DateUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 将2019-06-03T16:00:00.000Z日期格式转换为2019-06-03 16:00:00格式</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> oldDateStr</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Date <span class="title">transferDateFormat</span><span class="params">(String oldDateStr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(oldDateStr)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Date date = <span class="keyword">null</span>;</span><br><span class="line">        Date date1;</span><br><span class="line">        String dateStr;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            dateStr = oldDateStr.replace(<span class="string">&quot;Z&quot;</span>, <span class="string">&quot; UTC&quot;</span>);<span class="comment">//是空格+UTC</span></span><br><span class="line">            DateFormat df = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&#x27;T&#x27;HH:mm:ss.SSS Z&quot;</span>);</span><br><span class="line">            date1 = df.parse(dateStr);</span><br><span class="line">            SimpleDateFormat df1 = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;EEE MMM dd HH:mm:ss Z yyyy&quot;</span>, Locale.UK);</span><br><span class="line">            date = df1.parse(date1.toString());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Calendar类获取Date类型-年-月-日"><a href="#Calendar类获取Date类型-年-月-日" class="headerlink" title="Calendar类获取Date类型 年 月 日"></a>Calendar类获取Date类型 年 月 日</h1><p>JDK1.8中这些方法已经弃用</p>
<p><img src="https://files.mdnice.com/user/10819/29a2f792-48f7-4361-86d2-71c3ad830612.png"></p>
<p>我们可以通过Calendar类方式获取</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Calendar calendar = Calendar.getInstance();</span><br><span class="line">calendar.setTime(<span class="keyword">new</span> Date()); <span class="comment">// 传入Date类型数据</span></span><br><span class="line"> </span><br><span class="line">calendar.get(Calendar.YEAR); <span class="comment">// 获取年份</span></span><br><span class="line">calendar.get(Calendar.MONTH); <span class="comment">// 获取月份</span></span><br><span class="line">calendar.get(Calendar.DATE); <span class="comment">// 获取日</span></span><br><span class="line"> </span><br><span class="line">calendar.get(Calendar.HOUR); <span class="comment">// 时（12小时制）</span></span><br><span class="line">calendar.get(Calendar.HOUR_OF_DAY); <span class="comment">// 时（24小时制）</span></span><br><span class="line">calendar.get(Calendar.MINUTE); <span class="comment">// 分</span></span><br><span class="line">calendar.get(Calendar.SECOND); <span class="comment">// 秒</span></span><br><span class="line"> </span><br><span class="line">calendar.get(Calendar.DAY_OF_WEEK); <span class="comment">// //一周的第几天</span></span><br></pre></td></tr></table></figure>

<h1 id="中文与Unicode码之间的转换"><a href="#中文与Unicode码之间的转换" class="headerlink" title="中文与Unicode码之间的转换"></a>中文与Unicode码之间的转换</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FontUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(chinaToUnicode(<span class="string">&quot;测试中问！&quot;</span>));</span><br><span class="line">        System.out.println(decodeUnicode(<span class="string">&quot;\\u6d4b\\u8bd5\\u4e2d\\u95ee\\uff01&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">     <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 把中文转成Unicode码 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> str </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">chinaToUnicode</span><span class="params">(String str)</span> </span>&#123;  </span><br><span class="line">        String result = <span class="string">&quot;&quot;</span>;  </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; str.length(); i++) &#123;  </span><br><span class="line">            <span class="keyword">int</span> chr1 = (<span class="keyword">char</span>) str.charAt(i);  </span><br><span class="line">            <span class="keyword">if</span> (chr1 &gt;= <span class="number">19968</span> &amp;&amp; chr1 &lt;= <span class="number">171941</span>) &#123;<span class="comment">// 汉字范围 \u4e00-\u9fa5 (中文)  </span></span><br><span class="line">                result += <span class="string">&quot;\\u&quot;</span> + Integer.toHexString(chr1);  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                result += str.charAt(i);  </span><br><span class="line">            &#125;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> result;  </span><br><span class="line">    &#125;  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">/** </span></span><br><span class="line"><span class="comment">     * 判断是否为中文字符 </span></span><br><span class="line"><span class="comment">     *  </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> c </span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> </span></span><br><span class="line"><span class="comment">     */</span>  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">isChinese</span><span class="params">(<span class="keyword">char</span> c)</span> </span>&#123;  </span><br><span class="line">        Character.UnicodeBlock ub = Character.UnicodeBlock.of(c);  </span><br><span class="line">        <span class="keyword">if</span> (ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS  </span><br><span class="line">                || ub == Character.UnicodeBlock.CJK_COMPATIBILITY_IDEOGRAPHS  </span><br><span class="line">                || ub == Character.UnicodeBlock.CJK_UNIFIED_IDEOGRAPHS_EXTENSION_A  </span><br><span class="line">                || ub == Character.UnicodeBlock.GENERAL_PUNCTUATION  </span><br><span class="line">                || ub == Character.UnicodeBlock.CJK_SYMBOLS_AND_PUNCTUATION  </span><br><span class="line">                || ub == Character.UnicodeBlock.HALFWIDTH_AND_FULLWIDTH_FORMS) &#123;  </span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;  </span><br><span class="line">        &#125;  </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Unicode转中文  </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">decodeUnicode</span><span class="params">(<span class="keyword">final</span> String unicode)</span> </span>&#123;     </span><br><span class="line">         StringBuffer string = <span class="keyword">new</span> StringBuffer();  </span><br><span class="line">         </span><br><span class="line">         String[] hex = unicode.split(<span class="string">&quot;\\\\u&quot;</span>);  </span><br><span class="line">   </span><br><span class="line">         <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; hex.length; i++) &#123;  </span><br><span class="line">               </span><br><span class="line">             <span class="keyword">try</span> &#123;  </span><br><span class="line">                 <span class="comment">// 汉字范围 \u4e00-\u9fa5 (中文)  </span></span><br><span class="line">                 <span class="keyword">if</span>(hex[i].length()&gt;=<span class="number">4</span>)&#123;<span class="comment">//取前四个，判断是否是汉字  </span></span><br><span class="line">                     String chinese = hex[i].substring(<span class="number">0</span>, <span class="number">4</span>);  </span><br><span class="line">                     <span class="keyword">try</span> &#123;  </span><br><span class="line">                         <span class="keyword">int</span> chr = Integer.parseInt(chinese, <span class="number">16</span>);  </span><br><span class="line">                         <span class="keyword">boolean</span> isChinese = isChinese((<span class="keyword">char</span>) chr);  </span><br><span class="line">                         <span class="comment">//转化成功，判断是否在  汉字范围内  </span></span><br><span class="line">                         <span class="keyword">if</span> (isChinese)&#123;<span class="comment">//在汉字范围内  </span></span><br><span class="line">                             <span class="comment">// 追加成string  </span></span><br><span class="line">                             string.append((<span class="keyword">char</span>) chr);  </span><br><span class="line">                             <span class="comment">//并且追加  后面的字符  </span></span><br><span class="line">                             String behindString = hex[i].substring(<span class="number">4</span>);  </span><br><span class="line">                             string.append(behindString);  </span><br><span class="line">                         &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">                             string.append(hex[i]);  </span><br><span class="line">                         &#125;  </span><br><span class="line">                     &#125; <span class="keyword">catch</span> (NumberFormatException e1) &#123;  </span><br><span class="line">                         string.append(hex[i]);  </span><br><span class="line">                     &#125;  </span><br><span class="line">                       </span><br><span class="line">                 &#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">                     string.append(hex[i]);  </span><br><span class="line">                 &#125;  </span><br><span class="line">             &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;  </span><br><span class="line">                 string.append(hex[i]);  </span><br><span class="line">             &#125;  </span><br><span class="line">         &#125;  </span><br><span class="line">         <span class="keyword">return</span> string.toString();  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java中传入一个时间段，取出该时间段内所有日期的集合"><a href="#Java中传入一个时间段，取出该时间段内所有日期的集合" class="headerlink" title="Java中传入一个时间段，取出该时间段内所有日期的集合"></a>Java中传入一个时间段，取出该时间段内所有日期的集合</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 传入一个时间段，取出该时间段内所有日期的集合</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dBegin 开始时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> dEnd   结束时间</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">findDates</span><span class="params">(Long dBegin, Long dEnd)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 日期工具类准备</span></span><br><span class="line">    DateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置开始时间</span></span><br><span class="line">    Calendar calBegin = Calendar.getInstance();</span><br><span class="line">    calBegin.setTime(<span class="keyword">new</span> Date(dBegin));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置结束时间</span></span><br><span class="line">    Calendar calEnd = Calendar.getInstance();</span><br><span class="line">    calEnd.setTime(<span class="keyword">new</span> Date(dEnd));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 装返回的日期集合容器</span></span><br><span class="line">    List&lt;String&gt; Datelist = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 每次循环给calBegin日期加一天，直到calBegin.getTime()时间等于dEnd</span></span><br><span class="line">    <span class="keyword">while</span> ((<span class="keyword">new</span> Date(dEnd)).after(calBegin.getTime())) &#123;</span><br><span class="line">        <span class="comment">// 根据日历的规则，为给定的日历字段添加或减去指定的时间量</span></span><br><span class="line">        Datelist.add(format.format(calBegin.getTime()));</span><br><span class="line">        calBegin.add(Calendar.DAY_OF_MONTH, <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Datelist;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="替换内容中的多个关键字为红色样式返回给前端"><a href="#替换内容中的多个关键字为红色样式返回给前端" class="headerlink" title="替换内容中的多个关键字为红色样式返回给前端"></a>替换内容中的多个关键字为红色样式返回给前端</h1><p>实际工作中常会遇到一个这样的需求，将搜索到的关键字用红色高亮显示<br><code>keywords</code> 为 <code>List&lt;String&gt;</code> 集合，思路是使用正则表达式匹配</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (SafetyPromotionMsg safetyPromotionMsg : selectByPage.getContent()) &#123;</span><br><span class="line">                String msgContent = safetyPromotionMsg.getMsgContent();</span><br><span class="line">                <span class="keyword">for</span> (String s : keywords) &#123;</span><br><span class="line">                    Pattern pattern = Pattern.compile(<span class="string">&quot;(?i)&quot;</span> + s.trim());</span><br><span class="line">                    Matcher matcher = pattern.matcher(msgContent);</span><br><span class="line">                    <span class="keyword">while</span> (matcher.find()) &#123;</span><br><span class="line">                        msgContent = matcher.replaceAll(<span class="string">&quot;&lt;span style=&#x27;color: red;&#x27;&gt;&quot;</span> + matcher.group() + <span class="string">&quot;&lt;/span&gt;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                safetyPromotionMsg.setMsgContent(msgContent);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>

<p>（待补充）</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>java.lang.string.split方法详解以及split()后开头多出空字符串的原因分析</title>
    <url>/2021/04/02/java-lang-string-split%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3%E4%BB%A5%E5%8F%8Asplit-%E5%90%8E%E5%BC%80%E5%A4%B4%E5%A4%9A%E5%87%BA%E7%A9%BA%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>方法位于<code>java.lang.string.split</code>，作用是将一个字符串按照指定的分隔符分割为多个子字符串，然后将结果拼接为字符串数组返回。</p>
<span id="more"></span>
<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String str = <span class="string">&quot;,1,&quot;</span>;</span><br><span class="line">        String[] split = str.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">        <span class="keyword">for</span> (String s : split) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;类型：&quot;</span> + s.getClass().getName() + <span class="string">&quot;\t值:&quot;</span> + s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(Arrays.toString(split));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">类型：java.lang.String	值:</span><br><span class="line">类型：java.lang.String	值:<span class="number">1</span></span><br><span class="line">[, <span class="number">1</span>]</span><br></pre></td></tr></table></figure>

<h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><h2 id="为什么开头多了一个空字符串呢？"><a href="#为什么开头多了一个空字符串呢？" class="headerlink" title="为什么开头多了一个空字符串呢？"></a>为什么开头多了一个空字符串呢？</h2><p>答：我们将左中括号也指定为分隔符之一，程序会认为左中括号分隔了左边的空字符串和右边字符“1”</p>
<h2 id="为什么结尾没有多出一个空字符串？"><a href="#为什么结尾没有多出一个空字符串？" class="headerlink" title="为什么结尾没有多出一个空字符串？"></a>为什么结尾没有多出一个空字符串？</h2><p>即为什么b_array不是[“”, “1”, “”]，而是[“”, “1”]呢？</p>
<p>答：split()的源码中把分割结束后得到的list的结尾中长度为0的子串(也就是””)都删掉了。</p>
<p><img src="https://files.mdnice.com/user/10819/d15699a5-872e-4f4b-9735-ac188627769f.png"></p>
<p><code>list.subList(0, resultSize).toArray(result)</code>这行代码将<code>resultSize</code>从原本的3变为了2,<br><code>subList(0, 2)</code>即下标从0到2，包含0不包含2，也就是我们看到的结果：<code>[&quot;&quot;, &quot;1&quot;]</code></p>
<h1 id="split-源码"><a href="#split-源码" class="headerlink" title="split()源码"></a>split()源码</h1><p>最后看一下完整的源码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] split(String regex, <span class="keyword">int</span> limit) &#123;</span><br><span class="line">    <span class="comment">/* fastpath if the regex is a</span></span><br><span class="line"><span class="comment">     (1)one-char String and this character is not one of the</span></span><br><span class="line"><span class="comment">        RegEx&#x27;s meta characters &quot;.$|()[&#123;^?*+\\&quot;, or</span></span><br><span class="line"><span class="comment">     (2)two-char String and the first char is the backslash and</span></span><br><span class="line"><span class="comment">        the second is not the ascii digit or ascii letter.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">char</span> ch = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (((regex.value.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">         <span class="string">&quot;.$|()[&#123;^?*+\\&quot;</span>.indexOf(ch = regex.charAt(<span class="number">0</span>)) == -<span class="number">1</span>) ||</span><br><span class="line">         (regex.length() == <span class="number">2</span> &amp;&amp;</span><br><span class="line">          regex.charAt(<span class="number">0</span>) == <span class="string">&#x27;\\&#x27;</span> &amp;&amp;</span><br><span class="line">          (((ch = regex.charAt(<span class="number">1</span>))-<span class="string">&#x27;0&#x27;</span>)|(<span class="string">&#x27;9&#x27;</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">          ((ch-<span class="string">&#x27;a&#x27;</span>)|(<span class="string">&#x27;z&#x27;</span>-ch)) &lt; <span class="number">0</span> &amp;&amp;</span><br><span class="line">          ((ch-<span class="string">&#x27;A&#x27;</span>)|(<span class="string">&#x27;Z&#x27;</span>-ch)) &lt; <span class="number">0</span>)) &amp;&amp;</span><br><span class="line">        (ch &lt; Character.MIN_HIGH_SURROGATE ||</span><br><span class="line">         ch &gt; Character.MAX_LOW_SURROGATE))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> off = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">int</span> next = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">boolean</span> limited = limit &gt; <span class="number">0</span>;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">while</span> ((next = indexOf(ch, off)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!limited || list.size() &lt; limit - <span class="number">1</span>) &#123;</span><br><span class="line">                list.add(substring(off, next));</span><br><span class="line">                off = next + <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;    <span class="comment">// last one</span></span><br><span class="line">                <span class="comment">//assert (list.size() == limit - 1);</span></span><br><span class="line">                list.add(substring(off, value.length));</span><br><span class="line">                off = value.length;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// If no match was found, return this</span></span><br><span class="line">        <span class="keyword">if</span> (off == <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String[]&#123;<span class="keyword">this</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Add remaining segment</span></span><br><span class="line">        <span class="keyword">if</span> (!limited || list.size() &lt; limit)</span><br><span class="line">            list.add(substring(off, value.length));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Construct result</span></span><br><span class="line">        <span class="keyword">int</span> resultSize = list.size();</span><br><span class="line">        <span class="keyword">if</span> (limit == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">while</span> (resultSize &gt; <span class="number">0</span> &amp;&amp; list.get(resultSize - <span class="number">1</span>).length() == <span class="number">0</span>) &#123;</span><br><span class="line">                resultSize--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] result = <span class="keyword">new</span> String[resultSize];</span><br><span class="line">        <span class="keyword">return</span> list.subList(<span class="number">0</span>, resultSize).toArray(result);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Pattern.compile(regex).split(<span class="keyword">this</span>, limit);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux高频使用命令</title>
    <url>/2021/04/02/Linux%E9%AB%98%E9%A2%91%E4%BD%BF%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>记录Linux常用命令，以便日后查阅</p>
<span id="more"></span>
<h1 id="more命令"><a href="#more命令" class="headerlink" title="more命令"></a>more命令</h1><p>使用more命令可以分页查看内容，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">more install.txt</span><br></pre></td></tr></table></figure>

<ul>
<li>按回车：默认下一行数据；</li>
<li>按空格键盘，默认下一页，以当前屏幕为单位；</li>
<li>按Ctrl+ B 上一页，以当前屏幕大小为单位；</li>
<li>按B 回到文档第一页面</li>
</ul>
<p>注：B 上一页，操作只使用于 more 查看文件内容；不适用于管道，如：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ls / | more</span><br></pre></td></tr></table></figure>

<p>此时more 不适用 B 返回</p>
<h1 id="vi"><a href="#vi" class="headerlink" title="vi"></a>vi</h1><ul>
<li><p>向下翻页快捷键(下一页):Ctrl + f</p>
</li>
<li><p>向上翻页快捷键(上一页):Ctrl + b</p>
</li>
</ul>
<h1 id="tail命令"><a href="#tail命令" class="headerlink" title="tail命令"></a>tail命令</h1><p>tail 命令可用于查看文件的内容<br><code>tail -f filename</code> 会把 filename 文件里的最尾部的内容显示在屏幕上，并且不断刷新，只要 filename 更新就可以看到最新的文件内容。</p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tail [参数] [文件]  </span><br></pre></td></tr></table></figure>

<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><p><code>-f</code> 循环读取<br><code>-q</code> 不显示处理信息<br><code>-v</code> 显示详细的处理信息<br><code>-c&lt;数目&gt;</code> 显示的字节数<br><code>-n&lt;行数&gt;</code> 显示文件的尾部 n 行内容<br><code>--pid=PID</code> 与-f合用,表示在进程ID,PID死掉之后结束<br><code>-q, --quiet, --silent</code> 从不输出给出文件名的首部<br><code>-s, --sleep-interval=S</code> 与-f合用,表示在每次反复的间隔休眠S秒</p>
<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">tail -n 100 notes.log #显示最后100行数据</span><br><span class="line">tail -n -100 notes.log #除了前99行不显示外，显示第100行到末尾行</span><br><span class="line">tail +20 notes.log #显示文件 notes.log 的内容，从第 20 行至文件末尾</span><br><span class="line">tail -c 10 notes.log #显示文件 notes.log 的最后 10 个字符</span><br></pre></td></tr></table></figure>

<h1 id="查看到服务器的内核信息"><a href="#查看到服务器的内核信息" class="headerlink" title="查看到服务器的内核信息"></a>查看到服务器的内核信息</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">uname -a</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Linux node-2 3.10.0-693.5.2.el7.x86_64 #1 SMP Fri Oct 20 20:32:50 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure>

<h1 id="查看CPU统计信息"><a href="#查看CPU统计信息" class="headerlink" title="查看CPU统计信息"></a>查看CPU统计信息</h1><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">lscpu</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Architecture:          x86_64</span><br><span class="line">CPU op-mode(s):        32-bit, 64-bit</span><br><span class="line">Byte Order:            Little Endian</span><br><span class="line">CPU(s):                4</span><br><span class="line">On-line CPU(s) list:   0-3</span><br><span class="line">Thread(s) per core:    1</span><br><span class="line">Core(s) per socket:    4</span><br><span class="line">Socket(s):             1</span><br><span class="line">NUMA node(s):          1</span><br><span class="line">Vendor ID:             GenuineIntel</span><br><span class="line">CPU family:            6</span><br><span class="line">Model:                 158</span><br><span class="line">Model name:            Intel(R) Core(TM) i5-7400 CPU @ 3.00GHz</span><br><span class="line">Stepping:              9</span><br><span class="line">CPU MHz:               3099.960</span><br><span class="line">CPU max MHz:           3300.0000</span><br><span class="line">CPU min MHz:           800.0000</span><br><span class="line">BogoMIPS:              6000.00</span><br><span class="line">Virtualization:        VT-x</span><br><span class="line">L1d cache:             32K</span><br><span class="line">L1i cache:             32K</span><br><span class="line">L2 cache:              256K</span><br><span class="line">L3 cache:              6144K</span><br><span class="line">NUMA node0 CPU(s):     0-3</span><br><span class="line">Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx est tm2 ssse3 fma cx16 xtpr pdcm pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch intel_pt tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx rdseed adx smap clflushopt xsaveopt xsavec xgetbv1 dtherm ida arat pln pts hwp hwp_notify hwp_act_window hwp_epp</span><br></pre></td></tr></table></figure>

<h1 id="nohup命令"><a href="#nohup命令" class="headerlink" title="nohup命令"></a>nohup命令</h1><p>用于在系统后台不挂断地运行命令，退出终端不会影响程序的运行</p>
<h2 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">nohup Command [ Arg … ] [　&amp; ]</span><br></pre></td></tr></table></figure>

<h2 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h2><p><strong>Command</strong>：要执行的命令。</p>
<p><strong>Arg</strong>：一些参数，可以指定输出文件。</p>
<p>**&amp;**：让命令在后台执行，终端退出后命令仍旧执行。    </p>
<h2 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h2><p>以下命令在后台执行 <code>root</code> 目录下的 <code>runoob.sh</code> 脚本：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nohup /root/runoob.sh &amp;</span><br></pre></td></tr></table></figure>

<p>如果要停止运行，你需要使用以下命令查找到 <code>nohup</code> 运行脚本到 <code>PID</code>，然后使用 <code>kill</code> 命令来删除：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ps -aux | grep &quot;runoob.sh&quot; </span><br></pre></td></tr></table></figure>

<p>参数说明：</p>
<ul>
<li><strong>a</strong> : 显示所有程序</li>
<li><strong>u</strong> : 以用户为主的格式来显示</li>
<li><strong>x</strong> : 显示所有程序，不区分终端机</li>
</ul>
<p>另外也可以使用 <code>ps -def | grep &quot;runoob.sh</code> 命令来查找。</p>
<p>找到 <code>PID </code>后，就可以使用 <code>kill PID</code> 来删除。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">kill -9  进程号PID</span><br></pre></td></tr></table></figure>

<h1 id="CentOS7防火墙命令"><a href="#CentOS7防火墙命令" class="headerlink" title="CentOS7防火墙命令"></a>CentOS7防火墙命令</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 查询80端口是否放行</span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line">// 永久开放80端口号</span><br><span class="line">firewall-cmd --permanent --zone=public --add-port=80/tcp</span><br><span class="line">// 永久移除80端口号</span><br><span class="line">firewall-cmd --permanent --zone=public --remove-port=80/tcp</span><br><span class="line">// 直接关闭防火墙</span><br><span class="line">// 停止firewall</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line">// 禁止firewall开机启动</span><br><span class="line">systemctl disable firewalld.service</span><br><span class="line">// 查看防火墙状态 查看防火墙状态，是否是running</span><br><span class="line">firewall-cmd --state</span><br><span class="line">// 启动防火墙</span><br><span class="line">systemctl start firewalld.service</span><br><span class="line">// 重启防火墙</span><br><span class="line">firewall-cmd --reload</span><br></pre></td></tr></table></figure>

<h1 id="文件压缩打包命令"><a href="#文件压缩打包命令" class="headerlink" title="文件压缩打包命令"></a>文件压缩打包命令</h1><h2 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h2><p>Linux zip 命令用于压缩文件。</p>
<p>zip 是个使用广泛的压缩程序，压缩后的文件后缀名为 <strong>.zip</strong></p>
<h3 id="语法-2"><a href="#语法-2" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">zip [-AcdDfFghjJKlLmoqrSTuvVwXyz$][-b &lt;工作目录&gt;][-ll][-n &lt;字尾字符串&gt;][-t &lt;日期时间&gt;][-&lt;压缩效率&gt;][压缩文件][文件...][-i &lt;范本样式&gt;][-x &lt;范本样式&gt;]</span><br></pre></td></tr></table></figure>

<h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul>
<li>-A 调整可执行的自动解压缩文件。</li>
<li>-b&lt;工作目录&gt; 指定暂时存放文件的目录。</li>
<li>-c 替每个被压缩的文件加上注释。</li>
<li>-d 从压缩文件内删除指定的文件。</li>
<li>-D 压缩文件内不建立目录名称。</li>
<li>-f 更新现有的文件。</li>
<li>-F 尝试修复已损坏的压缩文件。</li>
<li>-g 将文件压缩后附加在既有的压缩文件之后，而非另行建立新的压缩文件。</li>
<li>-h 在线帮助。</li>
<li>-i&lt;范本样式&gt; 只压缩符合条件的文件。</li>
<li>-j 只保存文件名称及其内容，而不存放任何目录名称。</li>
<li>-J 删除压缩文件前面不必要的数据。</li>
<li>-k 使用MS-DOS兼容格式的文件名称。</li>
<li>-l 压缩文件时，把LF字符置换成LF+CR字符。</li>
<li>-ll 压缩文件时，把LF+CR字符置换成LF字符。</li>
<li>-L 显示版权信息。</li>
<li>-m 将文件压缩并加入压缩文件后，删除原始文件，即把文件移到压缩文件中。</li>
<li>-n&lt;字尾字符串&gt; 不压缩具有特定字尾字符串的文件。</li>
<li>-o 以压缩文件内拥有最新更改时间的文件为准，将压缩文件的更改时间设成和该文件相同。</li>
<li>-q 不显示指令执行过程。</li>
<li>-r 递归处理，将指定目录下的所有文件和子目录一并处理。</li>
<li>-S 包含系统和隐藏文件。</li>
<li>-t&lt;日期时间&gt; 把压缩文件的日期设成指定的日期。</li>
<li>-T 检查备份文件内的每个文件是否正确无误。</li>
<li>-u 与 -f 参数类似，但是除了更新现有的文件外，也会将压缩文件中的其他文件解压缩到目录中。</li>
<li>-v 显示指令执行过程或显示版本信息。</li>
<li>-V 保存VMS操作系统的文件属性。</li>
<li>-w 在文件名称里假如版本编号，本参数仅在VMS操作系统下有效。</li>
<li>-x&lt;范本样式&gt; 压缩时排除符合条件的文件。</li>
<li>-X 不保存额外的文件属性。</li>
<li>-y 直接保存符号连接，而非该连接所指向的文件，本参数仅在UNIX之类的系统下有效。</li>
<li>-z 替压缩文件加上注释。</li>
<li>-$ 保存第一个被压缩文件所在磁盘的卷册名称。</li>
<li>-&lt;压缩效率&gt; 压缩效率是一个介于1-9的数值。</li>
</ul>
<h2 id="tar命令"><a href="#tar命令" class="headerlink" title="tar命令"></a>tar命令</h2><p>Linux tar（英文全拼：tape archive ）命令用于备份文件。</p>
<p>tar 是用来建立，还原备份文件的工具程序，它可以加入，解开备份文件内的文件。</p>
<h3 id="语法-3"><a href="#语法-3" class="headerlink" title="语法"></a>语法</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar [-ABcdgGhiklmMoOpPrRsStuUvwWxzZ][-b &lt;区块数目&gt;][-C &lt;目的目录&gt;][-f &lt;备份文件&gt;][-F &lt;Script文件&gt;][-K &lt;文件&gt;][-L &lt;媒体容量&gt;][-N &lt;日期时间&gt;][-T &lt;范本文件&gt;][-V &lt;卷册名称&gt;][-X &lt;范本文件&gt;][-&lt;设备编号&gt;&lt;存储密度&gt;][--after-date=&lt;日期时间&gt;][--atime-preserve][--backuup=&lt;备份方式&gt;][--checkpoint][--concatenate][--confirmation][--delete][--exclude=&lt;范本样式&gt;][--force-local][--group=&lt;群组名称&gt;][--help][--ignore-failed-read][--new-volume-script=&lt;Script文件&gt;][--newer-mtime][--no-recursion][--null][--numeric-owner][--owner=&lt;用户名称&gt;][--posix][--erve][--preserve-order][--preserve-permissions][--record-size=&lt;区块数目&gt;][--recursive-unlink][--remove-files][--rsh-command=&lt;执行指令&gt;][--same-owner][--suffix=&lt;备份字尾字符串&gt;][--totals][--use-compress-program=&lt;执行指令&gt;][--version][--volno-file=&lt;编号文件&gt;][文件或目录...]</span><br></pre></td></tr></table></figure>

<h3 id="参数-3"><a href="#参数-3" class="headerlink" title="参数"></a>参数</h3><ul>
<li>-A或–catenate 新增文件到已存在的备份文件。</li>
<li>-b&lt;区块数目&gt;或–blocking-factor=&lt;区块数目&gt; 设置每笔记录的区块数目，每个区块大小为12Bytes。</li>
<li>-B或–read-full-records 读取数据时重设区块大小。</li>
<li>-c或–create 建立新的备份文件。</li>
<li>-C&lt;目的目录&gt;或–directory=&lt;目的目录&gt; 切换到指定的目录。</li>
<li>-d或–diff或–compare 对比备份文件内和文件系统上的文件的差异。</li>
<li>-f&lt;备份文件&gt;或–file=&lt;备份文件&gt; 指定备份文件。</li>
<li>-F&lt;Script文件&gt;或–info-script=&lt;Script文件&gt; 每次更换磁带时，就执行指定的Script文件。</li>
<li>-g或–listed-incremental 处理GNU格式的大量备份。</li>
<li>-G或–incremental 处理旧的GNU格式的大量备份。</li>
<li>-h或–dereference 不建立符号连接，直接复制该连接所指向的原始文件。</li>
<li>-i或–ignore-zeros 忽略备份文件中的0 Byte区块，也就是EOF。</li>
<li>-k或–keep-old-files 解开备份文件时，不覆盖已有的文件。</li>
<li>-K&lt;文件&gt;或–starting-file=&lt;文件&gt; 从指定的文件开始还原。</li>
<li>-l或–one-file-system 复制的文件或目录存放的文件系统，必须与tar指令执行时所处的文件系统相同，否则不予复制。</li>
<li>-L&lt;媒体容量&gt;或-tape-length=&lt;媒体容量&gt; 设置存放每体的容量，单位以1024 Bytes计算。</li>
<li>-m或–modification-time 还原文件时，不变更文件的更改时间。</li>
<li>-M或–multi-volume 在建立，还原备份文件或列出其中的内容时，采用多卷册模式。</li>
<li>-N&lt;日期格式&gt;或–newer=&lt;日期时间&gt; 只将较指定日期更新的文件保存到备份文件里。</li>
<li>-o或–old-archive或–portability 将资料写入备份文件时使用V7格式。</li>
<li>-O或–stdout 把从备份文件里还原的文件输出到标准输出设备。</li>
<li>-p或–same-permissions 用原来的文件权限还原文件。</li>
<li>-P或–absolute-names 文件名使用绝对名称，不移除文件名称前的”/“号。</li>
<li>-r或–append 新增文件到已存在的备份文件的结尾部分。</li>
<li>-R或–block-number 列出每个信息在备份文件中的区块编号。</li>
<li>-s或–same-order 还原文件的顺序和备份文件内的存放顺序相同。</li>
<li>-S或–sparse 倘若一个文件内含大量的连续0字节，则将此文件存成稀疏文件。</li>
<li>-t或–list 列出备份文件的内容。</li>
<li>-T&lt;范本文件&gt;或–files-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让tar解开或建立符合设置条件的文件。</li>
<li>-u或–update 仅置换较备份文件内的文件更新的文件。</li>
<li>-U或–unlink-first 解开压缩文件还原文件之前，先解除文件的连接。</li>
<li>-v或–verbose 显示指令执行过程。</li>
<li>-V&lt;卷册名称&gt;或–label=&lt;卷册名称&gt; 建立使用指定的卷册名称的备份文件。</li>
<li>-w或–interactive 遭遇问题时先询问用户。</li>
<li>-W或–verify 写入备份文件后，确认文件正确无误。</li>
<li>-x或–extract或–get 从备份文件中还原文件。</li>
<li>-X&lt;范本文件&gt;或–exclude-from=&lt;范本文件&gt; 指定范本文件，其内含有一个或多个范本样式，让ar排除符合设置条件的文件。</li>
<li>-z或–gzip或–ungzip 通过gzip指令处理备份文件。</li>
<li>-Z或–compress或–uncompress 通过compress指令处理备份文件。</li>
<li>-&lt;设备编号&gt;&lt;存储密度&gt; 设置备份用的外围设备编号及存放数据的密度。</li>
<li>–after-date=&lt;日期时间&gt; 此参数的效果和指定”-N”参数相同。</li>
<li>–atime-preserve 不变更文件的存取时间。</li>
<li>–backup=&lt;备份方式&gt;或–backup 移除文件前先进行备份。</li>
<li>–checkpoint 读取备份文件时列出目录名称。</li>
<li>–concatenate 此参数的效果和指定”-A”参数相同。</li>
<li>–confirmation 此参数的效果和指定”-w”参数相同。</li>
<li>–delete 从备份文件中删除指定的文件。</li>
<li>–exclude=&lt;范本样式&gt; 排除符合范本样式的文件。</li>
<li>–group=&lt;群组名称&gt; 把加入设备文件中的文件的所属群组设成指定的群组。</li>
<li>–help 在线帮助。</li>
<li>–ignore-failed-read 忽略数据读取错误，不中断程序的执行。</li>
<li>–new-volume-script=&lt;Script文件&gt; 此参数的效果和指定”-F”参数相同。</li>
<li>–newer-mtime 只保存更改过的文件。</li>
<li>–no-recursion 不做递归处理，也就是指定目录下的所有文件及子目录不予处理。</li>
<li>–null 从null设备读取文件名称。</li>
<li>–numeric-owner 以用户识别码及群组识别码取代用户名称和群组名称。</li>
<li>–owner=&lt;用户名称&gt; 把加入备份文件中的文件的拥有者设成指定的用户。</li>
<li>–posix 将数据写入备份文件时使用POSIX格式。</li>
<li>–preserve 此参数的效果和指定”-ps”参数相同。</li>
<li>–preserve-order 此参数的效果和指定”-A”参数相同。</li>
<li>–preserve-permissions 此参数的效果和指定”-p”参数相同。</li>
<li>–record-size=&lt;区块数目&gt; 此参数的效果和指定”-b”参数相同。</li>
<li>–recursive-unlink 解开压缩文件还原目录之前，先解除整个目录下所有文件的连接。</li>
<li>–remove-files 文件加入备份文件后，就将其删除。</li>
<li>–rsh-command=&lt;执行指令&gt; 设置要在远端主机上执行的指令，以取代rsh指令。</li>
<li>–same-owner 尝试以相同的文件拥有者还原文件。</li>
<li>–suffix=&lt;备份字尾字符串&gt; 移除文件前先行备份。</li>
<li>–totals 备份文件建立后，列出文件大小。</li>
<li>–use-compress-program=&lt;执行指令&gt; 通过指定的指令处理备份文件。</li>
<li>–version 显示版本信息。</li>
<li>–volno-file=&lt;编号文件&gt; 使用指定文件内的编号取代预设的卷册编号。</li>
</ul>
<h2 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h2><h3 id="tar-gz格式文件"><a href="#tar-gz格式文件" class="headerlink" title="tar.gz格式文件"></a>tar.gz格式文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 打包</span><br><span class="line">tar -zcvf renwolesshel.tar.gz /renwolesshel</span><br><span class="line">// 解压</span><br><span class="line">tar zxvf renwolesshel.tar.gz</span><br></pre></td></tr></table></figure>

<h3 id="tar-bz2格式文件"><a href="#tar-bz2格式文件" class="headerlink" title="tar.bz2格式文件"></a>tar.bz2格式文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 打包</span><br><span class="line">tar -jcvf renwolesshel.tar.bz2 /renwolesshel</span><br><span class="line">// 解压</span><br><span class="line">tar jxvf renwolesshel.tar.bz2</span><br></pre></td></tr></table></figure>

<h3 id="压缩成zip格式"><a href="#压缩成zip格式" class="headerlink" title="压缩成zip格式"></a>压缩成zip格式</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 打包</span><br><span class="line">zip -q -r renwolesshel.zip renwolesshel/</span><br><span class="line">// 解压</span><br><span class="line">unzip renwolesshel.zip</span><br></pre></td></tr></table></figure>

<h1 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h1><p>此处以JDK为例<br>首先去Oracle官网下载Linux版本的JDK1.8并上传值服务器</p>
<blockquote>
<p>你可以使用Xftp上传也可以安装<code>yum install -y lrzsz</code>使用rz命令将文件上传至服务器目录。</p>
</blockquote>
<p>假设我解压的目录为<code>/data/service/jdk1.8.0_261</code></p>
<blockquote>
<p>解压文件使用命令：<code>tar -zxvf jdk1.8.0_261.tar.gz</code></p>
</blockquote>
<p>使用一下命令将jdk添加至环境变量</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编辑文件</span></span><br><span class="line">vi /etc/profile</span><br><span class="line"><span class="comment">// 设置JAVA_HOME</span></span><br><span class="line">export JAVA_HOME=/data/service/jdk1<span class="number">.8</span><span class="number">.0_261</span></span><br><span class="line">export PATH=$PATH:$JAVA_HOME/bin</span><br><span class="line"><span class="comment">// 使环境变量生效</span></span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="comment">// 检测配置是否配置成功</span></span><br><span class="line">java -version</span><br></pre></td></tr></table></figure>

<p>其他软件添加环境变量也是同理，只要编辑<code>/etc/profile</code>在使环境变量生效即可</p>
<h1 id="Linux服务器定时重启"><a href="#Linux服务器定时重启" class="headerlink" title="Linux服务器定时重启"></a>Linux服务器定时重启</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 添加定时任务脚本命令</span><br><span class="line">crontab -e</span><br><span class="line">// 凌晨4点重启服务器</span><br><span class="line">0 4 * * * /sbin/reboot</span><br><span class="line">// 重启服务让定时任务生效</span><br><span class="line">systemctl restart crond</span><br><span class="line">// 配置定时任务开机自启 查看服务是否开机自启</span><br><span class="line">systemctl list-unit-files|grep crond.service</span><br><span class="line">// 如果没有开机自启，设置开机自启</span><br><span class="line">systemctl enable crond</span><br><span class="line">// 查看服务器运行了多长时间</span><br><span class="line">uptime</span><br></pre></td></tr></table></figure>
<blockquote>
<p>在线工具：<a href="https://cron.qqe2.com/">https://cron.qqe2.com/</a></p>
</blockquote>
<h1 id="查看服务器网络"><a href="#查看服务器网络" class="headerlink" title="查看服务器网络"></a>查看服务器网络</h1><h2 id="外网ip"><a href="#外网ip" class="headerlink" title="外网ip"></a>外网ip</h2><ol>
<li>curl ifconfig.me</li>
<li>curl cip.cc</li>
<li>curl icanhazip.com</li>
<li>curl ident.me</li>
<li>curl ipecho.net/plain</li>
<li>curl whatismyip.akamai.com</li>
<li>curl tnx.nl/ip</li>
<li>curl myip.dnsomatic.com</li>
<li>curl ip.appspot.com*</li>
</ol>
<h2 id="本机网络"><a href="#本机网络" class="headerlink" title="本机网络"></a>本机网络</h2><ol>
<li>Ifconfig</li>
<li>ip addr</li>
</ol>
<h1 id="Linux-用户管理"><a href="#Linux-用户管理" class="headerlink" title="Linux 用户管理"></a>Linux 用户管理</h1><h2 id="创建一个用户"><a href="#创建一个用户" class="headerlink" title="创建一个用户"></a>创建一个用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">adduser [用户名]</span><br></pre></td></tr></table></figure>
<h2 id="给用户设置密码"><a href="#给用户设置密码" class="headerlink" title="给用户设置密码"></a>给用户设置密码</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd [用户名]</span><br></pre></td></tr></table></figure>
<h2 id="删除用户"><a href="#删除用户" class="headerlink" title="删除用户"></a>删除用户</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel 选项 [用户名]</span><br></pre></td></tr></table></figure>
<ul>
<li>-r 删除用户在本机的所有文件</li>
</ul>
<h2 id="用户切换"><a href="#用户切换" class="headerlink" title="用户切换"></a>用户切换</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">su [用户名]</span><br></pre></td></tr></table></figure>
<p>su是switch user的缩写</p>
<h2 id="useradd和adduser区别"><a href="#useradd和adduser区别" class="headerlink" title="useradd和adduser区别"></a>useradd和adduser区别</h2><p>useradd不会再home目录下创建用户文件夹，需要加-m参数才会创建对应的文件夹，而adduser则会默认在home文件夹下创建对应的用户文件夹。</p>
<h1 id="Linux-禁用root远程登陆"><a href="#Linux-禁用root远程登陆" class="headerlink" title="Linux 禁用root远程登陆"></a>Linux 禁用root远程登陆</h1><h2 id="修改SSH配置文件"><a href="#修改SSH配置文件" class="headerlink" title="修改SSH配置文件"></a>修改SSH配置文件</h2><p><code>/etc/ssh/sshd_config</code></p>
<p>把<code>PermitRootLogin yes</code>改为<code>PermitRootLogin no</code></p>
<h2 id="重启sshd服务"><a href="#重启sshd服务" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

<h1 id="Linux-修改SSH默认端口22"><a href="#Linux-修改SSH默认端口22" class="headerlink" title="Linux 修改SSH默认端口22"></a>Linux 修改SSH默认端口22</h1><h2 id="修改端口配置文件"><a href="#修改端口配置文件" class="headerlink" title="修改端口配置文件"></a>修改端口配置文件</h2><p><code>/etc/ssh/sshd_config</code></p>
<p>取消<code>Port</code>前的#注释，并将端口<code>22</code>改成<code>65535</code></p>
<h2 id="重启sshd服务-1"><a href="#重启sshd服务-1" class="headerlink" title="重启sshd服务"></a>重启sshd服务</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Java8日期处理</title>
    <url>/2021/04/02/Java8%E6%97%A5%E6%9C%9F%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[<p>记录Java8中的常用日期处理方法，以便以后查阅</p>
<span id="more"></span>
<h1 id="Java-8中获取今天的日期"><a href="#Java-8中获取今天的日期" class="headerlink" title="Java 8中获取今天的日期"></a>Java 8中获取今天的日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;今天的日期:&quot;</span>+today);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中获取年、月、日信息"><a href="#Java-8中获取年、月、日信息" class="headerlink" title="Java 8中获取年、月、日信息"></a>Java 8中获取年、月、日信息</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="keyword">int</span> year = today.getYear();</span><br><span class="line">        <span class="keyword">int</span> month = today.getMonthValue();</span><br><span class="line">        <span class="keyword">int</span> day = today.getDayOfMonth();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;year:&quot;</span>+year);</span><br><span class="line">        System.out.println(<span class="string">&quot;month:&quot;</span>+month);</span><br><span class="line">        System.out.println(<span class="string">&quot;day:&quot;</span>+day);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中处理特定日期"><a href="#Java-8中处理特定日期" class="headerlink" title="Java 8中处理特定日期"></a>Java 8中处理特定日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date = LocalDate.of(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;自定义日期:&quot;</span>+date);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中判断两个日期是否相等"><a href="#Java-8中判断两个日期是否相等" class="headerlink" title="Java 8中判断两个日期是否相等"></a>Java 8中判断两个日期是否相等</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.now();</span><br><span class="line"></span><br><span class="line">        LocalDate date2 = LocalDate.of(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(date1.equals(date2))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;时间相等&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;时间不等&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中检查像生日这种周期性事件"><a href="#Java-8中检查像生日这种周期性事件" class="headerlink" title="Java 8中检查像生日这种周期性事件"></a>Java 8中检查像生日这种周期性事件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate date1 = LocalDate.now();</span><br><span class="line"></span><br><span class="line">        LocalDate date2 = LocalDate.of(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">        MonthDay birthday = MonthDay.of(date2.getMonth(),date2.getDayOfMonth());</span><br><span class="line">        MonthDay currentMonthDay = MonthDay.from(date1);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(currentMonthDay.equals(birthday))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;是你的生日&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;你的生日还没有到&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中获取当前时间"><a href="#Java-8中获取当前时间" class="headerlink" title="Java 8中获取当前时间"></a>Java 8中获取当前时间</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;获取当前的时间,不含有日期:&quot;</span>+time);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中获取三个小时后的时间"><a href="#Java-8中获取三个小时后的时间" class="headerlink" title="Java 8中获取三个小时后的时间"></a>Java 8中获取三个小时后的时间</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalTime time = LocalTime.now();</span><br><span class="line">        LocalTime newTime = time.plusHours(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;三个小时后的时间为:&quot;</span>+newTime);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="Java-8如何计算一周后的日期"><a href="#Java-8如何计算一周后的日期" class="headerlink" title="Java 8如何计算一周后的日期"></a>Java 8如何计算一周后的日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;今天的日期为:&quot;</span>+today);</span><br><span class="line">        LocalDate nextWeek = today.plus(<span class="number">1</span>, ChronoUnit.WEEKS);</span><br><span class="line">        System.out.println(<span class="string">&quot;一周后的日期为:&quot;</span>+nextWeek);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8计算一年前或一年后的日期"><a href="#Java-8计算一年前或一年后的日期" class="headerlink" title="Java 8计算一年前或一年后的日期"></a>Java 8计算一年前或一年后的日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo09</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line"></span><br><span class="line">        LocalDate previousYear = today.minus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">        System.out.println(<span class="string">&quot;一年前的日期 : &quot;</span> + previousYear);</span><br><span class="line"></span><br><span class="line">        LocalDate nextYear = today.plus(<span class="number">1</span>, ChronoUnit.YEARS);</span><br><span class="line">        System.out.println(<span class="string">&quot;一年后的日期:&quot;</span>+nextYear);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8的Clock时钟类"><a href="#Java-8的Clock时钟类" class="headerlink" title="Java 8的Clock时钟类"></a>Java 8的Clock时钟类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo10</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Returns the current time based on your system clock and set to UTC.</span></span><br><span class="line">        Clock clock = Clock.systemUTC();</span><br><span class="line">        System.out.println(<span class="string">&quot;Clock : &quot;</span> + clock.millis());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Returns time based on system clock zone</span></span><br><span class="line">        Clock defaultClock = Clock.systemDefaultZone();</span><br><span class="line">        System.out.println(<span class="string">&quot;Clock : &quot;</span> + defaultClock.millis());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如何用Java判断日期是早于还是晚于另一个日期"><a href="#如何用Java判断日期是早于还是晚于另一个日期" class="headerlink" title="如何用Java判断日期是早于还是晚于另一个日期"></a>如何用Java判断日期是早于还是晚于另一个日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo11</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line"></span><br><span class="line">        LocalDate tomorrow = LocalDate.of(<span class="number">2018</span>,<span class="number">2</span>,<span class="number">6</span>);</span><br><span class="line">        <span class="keyword">if</span>(tomorrow.isAfter(today))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;之后的日期:&quot;</span>+tomorrow);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        LocalDate yesterday = today.minus(<span class="number">1</span>, ChronoUnit.DAYS);</span><br><span class="line">        <span class="keyword">if</span>(yesterday.isBefore(today))&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;之前的日期:&quot;</span>+yesterday);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中处理时区"><a href="#Java-8中处理时区" class="headerlink" title="Java 8中处理时区"></a>Java 8中处理时区</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo12</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// Date and time with timezone in Java 8</span></span><br><span class="line">        ZoneId america = ZoneId.of(<span class="string">&quot;America/New_York&quot;</span>);</span><br><span class="line">        LocalDateTime localtDateAndTime = LocalDateTime.now();</span><br><span class="line">        ZonedDateTime dateAndTimeInNewYork  = ZonedDateTime.of(localtDateAndTime, america );</span><br><span class="line">        System.out.println(<span class="string">&quot;Current date and time in a particular timezone : &quot;</span> + dateAndTimeInNewYork);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如何表示信用卡到期这类固定日期，答案就在YearMonth"><a href="#如何表示信用卡到期这类固定日期，答案就在YearMonth" class="headerlink" title="如何表示信用卡到期这类固定日期，答案就在YearMonth"></a>如何表示信用卡到期这类固定日期，答案就在YearMonth</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo13</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        YearMonth currentYearMonth = YearMonth.now();</span><br><span class="line">        System.out.printf(<span class="string">&quot;Days in month year %s: %d%n&quot;</span>, currentYearMonth, currentYearMonth.lengthOfMonth());</span><br><span class="line">        YearMonth creditCardExpiry = YearMonth.of(<span class="number">2019</span>, Month.FEBRUARY);</span><br><span class="line">        System.out.printf(<span class="string">&quot;Your credit card expires on %s %n&quot;</span>, creditCardExpiry);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="如何在Java-8中检查闰年"><a href="#如何在Java-8中检查闰年" class="headerlink" title="如何在Java 8中检查闰年"></a>如何在Java 8中检查闰年</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo14</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        <span class="keyword">if</span>(today.isLeapYear())&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;This year is Leap year&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;2018 is not a Leap year&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="计算两个日期之间的天数和月数"><a href="#计算两个日期之间的天数和月数" class="headerlink" title="计算两个日期之间的天数和月数"></a>计算两个日期之间的天数和月数</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo15</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line"></span><br><span class="line">        LocalDate java8Release = LocalDate.of(<span class="number">2018</span>, <span class="number">12</span>, <span class="number">14</span>);</span><br><span class="line"></span><br><span class="line">        Period periodToNextJavaRelease = Period.between(today, java8Release);</span><br><span class="line">        System.out.println(<span class="string">&quot;Months left between today and Java 8 release : &quot;</span></span><br><span class="line">                + periodToNextJavaRelease.getMonths() );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="在Java-8中获取当前的时间戳"><a href="#在Java-8中获取当前的时间戳" class="headerlink" title="在Java 8中获取当前的时间戳"></a>在Java 8中获取当前的时间戳</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo16</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Instant timestamp = Instant.now();</span><br><span class="line">        System.out.println(<span class="string">&quot;What is value of this instant &quot;</span> + timestamp.toEpochMilli());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="Java-8中如何使用预定义的格式化工具去解析或格式化日期"><a href="#Java-8中如何使用预定义的格式化工具去解析或格式化日期" class="headerlink" title="Java 8中如何使用预定义的格式化工具去解析或格式化日期"></a>Java 8中如何使用预定义的格式化工具去解析或格式化日期</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo17</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String dayAfterTommorrow = <span class="string">&quot;20180205&quot;</span>;</span><br><span class="line">        LocalDate formatted = LocalDate.parse(dayAfterTommorrow,</span><br><span class="line">                DateTimeFormatter.BASIC_ISO_DATE);</span><br><span class="line">        System.out.println(dayAfterTommorrow+<span class="string">&quot;  格式化后的日期为:  &quot;</span>+formatted);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="字符串互转日期类型"><a href="#字符串互转日期类型" class="headerlink" title="字符串互转日期类型"></a>字符串互转日期类型</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo18</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        LocalDateTime date = LocalDateTime.now();</span><br><span class="line"></span><br><span class="line">        DateTimeFormatter format1 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//日期转字符串</span></span><br><span class="line">        String str = date.format(format1);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;日期转换为字符串:&quot;</span>+str);</span><br><span class="line"></span><br><span class="line">        DateTimeFormatter format2 = DateTimeFormatter.ofPattern(<span class="string">&quot;yyyy/MM/dd HH:mm:ss&quot;</span>);</span><br><span class="line">        <span class="comment">//字符串转日期</span></span><br><span class="line">        LocalDate date2 = LocalDate.parse(str,format2);</span><br><span class="line">        System.out.println(<span class="string">&quot;日期类型:&quot;</span>+date2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Scrapy记录</title>
    <url>/2021/03/25/Scrapy%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<h1 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h1><ol>
<li>创建一个Scrapy项目</li>
<li>定义提取的Item</li>
<li>编写爬取网站的 spider 并提取 Item</li>
<li>编写 Item Pipeline 来存储提取到的Item(即数据)<span id="more"></span></li>
</ol>
<h1 id="安装scrapy"><a href="#安装scrapy" class="headerlink" title="安装scrapy"></a>安装scrapy</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install scrapy</span><br></pre></td></tr></table></figure>

<h1 id="新建项目"><a href="#新建项目" class="headerlink" title="新建项目"></a>新建项目</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">创建项目：scrapy startproject xxx</span><br><span class="line">进入项目：cd xxx <span class="comment">#进入某个文件夹下</span></span><br><span class="line">创建爬虫：scrapy genspider xxx（爬虫名） xxx.com （爬取域）</span><br><span class="line">生成文件：scrapy crawl xxx -o xxx.json (生成某种类型的文件)</span><br><span class="line">运行爬虫：scrapy crawl XXX</span><br><span class="line">列出所有爬虫：scrapy <span class="built_in">list</span></span><br><span class="line">获得配置信息：scrapy settings [options]</span><br></pre></td></tr></table></figure>

<h1 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h1><p><img src="https://files.mdnice.com/user/10819/eb3bdf3d-b983-4362-8e66-c8a1dcb25ffe.png"></p>
<h1 id="全局配置-settings"><a href="#全局配置-settings" class="headerlink" title="全局配置 settings"></a>全局配置 settings</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 默认是注释的，这个东西非常重要，如果不写很容易被判断为电脑，简单点写一个Mozilla/5.0即可</span></span><br><span class="line">USER_AGENT = <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span></span><br><span class="line"><span class="comment"># 是否遵循机器人协议，默认是true，需要改为false，否则很多东西爬不了</span></span><br><span class="line">ROBOTSTXT_OBEY = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 最大并发数，很好理解，就是同时允许开启多少个爬虫线程</span></span><br><span class="line">CONCURRENT_REQUESTS = <span class="number">32</span></span><br><span class="line"><span class="comment"># 下载延迟时间，单位是秒，控制爬虫爬取的频率，根据你的项目调整，不要太快也不要太慢，默认是3秒，即爬一个停3秒，设置为1秒性价比较高，如果要爬取的文件较多，写零点几秒也行</span></span><br><span class="line">DOWNLOAD_DELAY = <span class="number">3</span></span><br><span class="line"><span class="comment"># 是否保存COOKIES，默认关闭，开机可以记录爬取过程中的COOKIE，非常好用的一个参数</span></span><br><span class="line">COOKIES_ENABLED = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 默认请求头，上面写了一个USER_AGENT，其实这个东西就是放在请求头里面的，这个东西可以根据你爬取的内容做相应设置</span></span><br><span class="line">DEFAULT_REQUEST_HEADERS = &#123;</span><br><span class="line">    <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-CN,zh;q=0.9&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.90 Safari/537.36&#x27;</span>,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 项目管道，300为优先级，越低越爬取的优先度越高</span></span><br><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">&#x27;spider.pipelines.SpiderPipeline&#x27;</span>: <span class="number">300</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="定义数据结构-items"><a href="#定义数据结构-items" class="headerlink" title="定义数据结构 items"></a>定义数据结构 items</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderItem</span>(<span class="params">scrapy.Item</span>):</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line">    <span class="comment"># 需要取哪些内容，就创建哪些容器</span></span><br><span class="line">    <span class="comment"># 标题</span></span><br><span class="line">    title = scrapy.Field()</span><br><span class="line">    <span class="comment"># 作者</span></span><br><span class="line">    author = scrapy.Field()</span><br><span class="line">    <span class="comment"># 来源</span></span><br><span class="line">    source = scrapy.Field()</span><br></pre></td></tr></table></figure>

<h1 id="项目主程序"><a href="#项目主程序" class="headerlink" title="项目主程序"></a>项目主程序</h1><p>使用 MySQLdb 操作数据库</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install MySQLdb</span><br></pre></td></tr></table></figure>

<p>安装不成功请使用离线安装方式，pypi：[<a href="https://pypi.org/project/mysqlclient/#files]">https://pypi.org/project/mysqlclient/#files]</a></p>
<p>选择对应的Python版本，下载.whl文件，并离线安装</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">pip install mysqlclient-<span class="number">2.0</span><span class="number">.3</span>-cp37-cp37m-win_amd64.whl</span><br></pre></td></tr></table></figure>

<p>以爬取知网文章标题、作者、隶属单位，并将结果保存至MySQL数据库为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CnkiSpider</span>(<span class="params">scrapy.Spider</span>):</span></span><br><span class="line">    name = <span class="string">&#x27;cnki&#x27;</span>  <span class="comment"># 定义爬虫名称</span></span><br><span class="line">    allowed_domains = [<span class="string">&#x27;cnki.com.cn&#x27;</span>]  <span class="comment"># 定义爬虫域</span></span><br><span class="line">    start_urls = [<span class="string">&#x27;http://search.cnki.com.cn/Search/ListResult&#x27;</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_requests</span>(<span class="params">self</span>):</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> num <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>, <span class="number">10</span>):</span><br><span class="line">            form_data = &#123;<span class="string">&quot;searchType&quot;</span>: <span class="string">&quot;MulityTermsSearch&quot;</span>, <span class="string">&quot;ParamIsNullOrEmpty&quot;</span>: <span class="string">&quot;false&quot;</span>, <span class="string">&quot;Islegal&quot;</span>: <span class="string">&quot;false&quot;</span>,</span><br><span class="line">                         <span class="string">&quot;Content&quot;</span>: <span class="string">&quot;计算机&quot;</span>, <span class="string">&quot;Page&quot;</span>: <span class="built_in">str</span>(num)&#125;</span><br><span class="line">            <span class="keyword">for</span> url <span class="keyword">in</span> self.start_urls:</span><br><span class="line">                <span class="keyword">yield</span> scrapy.FormRequest(url=url, formdata=form_data, method=<span class="string">&#x27;POST&#x27;</span>, callback=self.parse)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span>(<span class="params">self, response</span>):</span></span><br><span class="line">        <span class="comment"># 打开数据库连接</span></span><br><span class="line">        db = MySQLdb.connect(<span class="string">&quot;localhost&quot;</span>, <span class="string">&quot;root&quot;</span>, <span class="string">&quot;123456&quot;</span>, <span class="string">&quot;cnki&quot;</span>, charset=<span class="string">&#x27;utf8&#x27;</span>, port=<span class="number">3306</span>)</span><br><span class="line">        <span class="comment"># 使用cursor()方法获取操作游标</span></span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        title = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;tit clearfix&quot;]//a[1]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> title:</span><br><span class="line">            sql = <span class="string">&quot;INSERT INTO article(title) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        author = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/span[1]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> author:</span><br><span class="line">            sql1 = <span class="string">&quot;INSERT INTO author(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item).split(<span class="string">&quot;;&quot;</span>)[<span class="number">0</span>])</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql1)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        affiliated = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/span[3]/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> affiliated:</span><br><span class="line">            sql3 = <span class="string">&quot;INSERT INTO affiliated(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql3)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        source = response.xpath(<span class="string">&#x27;//div[@class=&quot;list-item&quot;]/p[@class=&quot;source&quot;]/a[1]/span/@title&#x27;</span>).extract()</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> source:</span><br><span class="line">            sql2 = <span class="string">&quot;INSERT INTO source(`name`) VALUE (&#x27;%s&#x27;)&quot;</span> % (<span class="built_in">str</span>(item))</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                <span class="comment"># 执行sql语句</span></span><br><span class="line">                cursor.execute(sql2)</span><br><span class="line">                <span class="comment"># 提交到数据库执行</span></span><br><span class="line">                db.commit()</span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="comment"># Rollback in case there is any error</span></span><br><span class="line">                db.rollback()</span><br><span class="line">        <span class="comment"># 关闭数据库连接</span></span><br><span class="line">        db.close()</span><br></pre></td></tr></table></figure>

<h1 id="数据处理-pipelines"><a href="#数据处理-pipelines" class="headerlink" title="数据处理 pipelines"></a>数据处理 pipelines</h1><p>以将爬取到的数据导出为excel为例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpiderPipeline</span>:</span></span><br><span class="line">    <span class="comment"># 用来将item保存到输出结果中</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span>(<span class="params">self, item, spider</span>):</span></span><br><span class="line">        self.exporter.export_item(item)</span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 执行文件创建，然后初始化exporter，并启动start_exporting()，开始接收Item</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.file = <span class="built_in">open</span>(<span class="string">&quot;/cnki_data.csv&quot;</span>, <span class="string">&quot;wb&quot;</span>)</span><br><span class="line">        <span class="comment"># self.exporter = CsvItemExporter(self.file,</span></span><br><span class="line">        <span class="comment">#                                 fields_to_export=[&quot;title&quot;])</span></span><br><span class="line">        self.exporter = CsvItemExporter(self.file,</span><br><span class="line">                                        fields_to_export=[<span class="string">&quot;title&quot;</span>, <span class="string">&quot;author&quot;</span>, <span class="string">&quot;source&quot;</span>])</span><br><span class="line">        self.exporter.start_exporting()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 结束exporter的exporting，关闭文件流</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span>(<span class="params">self, spider</span>):</span></span><br><span class="line">        self.exporter.finish_exporting()</span><br><span class="line">        self.file.close()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Scrapy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Scrapy</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Kafka</title>
    <url>/2021/03/16/Spring-Boot%E6%95%B4%E5%90%88Kafka/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
Apache kafka官网上对kafka的简单别成为 a distributed streaming platform  即一个分布式流平台
主要有三大功能 ：
1. publish and subscribe 发布和订阅 像消息系统一样读写数据流
2. process（kafka stream ） 处理数据
3. Storage 存储系统   

<span id="more"></span>

<h1 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h1><h2 id="安装JDK"><a href="#安装JDK" class="headerlink" title="安装JDK"></a>安装JDK</h2><p><a href="https://www.oracle.com/java/technologies/javase-downloads.html">https://www.oracle.com/java/technologies/javase-downloads.html</a></p>
<h2 id="安装Zookeeper"><a href="#安装Zookeeper" class="headerlink" title="安装Zookeeper"></a>安装Zookeeper</h2><h3 id="Zookeeper官网下载地址"><a href="#Zookeeper官网下载地址" class="headerlink" title="Zookeeper官网下载地址"></a>Zookeeper官网下载地址</h3><p><a href="http://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/">http://archive.apache.org/dist/zookeeper/zookeeper-3.4.14/</a></p>
<h3 id="运行Zookeeper"><a href="#运行Zookeeper" class="headerlink" title="运行Zookeeper"></a>运行Zookeeper</h3><p>修改<code>conf\zoo_sample.cfg</code>为<code>\conf.cfg</code>再执行<code>bin\zkServer.sh</code></p>
<h2 id="安装Kafka"><a href="#安装Kafka" class="headerlink" title="安装Kafka"></a>安装Kafka</h2><h3 id="Kafka官网下载地址"><a href="#Kafka官网下载地址" class="headerlink" title="Kafka官网下载地址"></a>Kafka官网下载地址</h3><p><a href="http://kafka.apache.org/downloads">http://kafka.apache.org/downloads</a></p>
<h3 id="运行Kafka"><a href="#运行Kafka" class="headerlink" title="运行Kafka"></a>运行Kafka</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bin\kafka-server-start.sh config\server.properties</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Boot整合Kafka"><a href="#Spring-Boot整合Kafka" class="headerlink" title="Spring Boot整合Kafka"></a>Spring Boot整合Kafka</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.kafka&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-kafka&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">&lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>

<h2 id="Spring-Boot配置文件-application-properties"><a href="#Spring-Boot配置文件-application-properties" class="headerlink" title="Spring Boot配置文件 application.properties"></a>Spring Boot配置文件 application.properties</h2><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 连接kafka的地址，多个地址用逗号分隔</span></span><br><span class="line"><span class="meta">spring.kafka.bootstrap-servers</span>=<span class="string">localhost:9092</span></span><br><span class="line"><span class="comment"># 消费组</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.group-id</span>=<span class="string">test-consumer</span></span><br><span class="line"><span class="comment"># latest（默认值）在偏移量无效的情况下，消费者将从最新的记录开始读取数据（在消费者启动之后生成的记录）</span></span><br><span class="line"><span class="meta">spring.kafka.consumer.auto-offset-reset</span>=<span class="string">latest</span></span><br></pre></td></tr></table></figure>

<h2 id="生产者配置-KafkaProducerConfig"><a href="#生产者配置-KafkaProducerConfig" class="headerlink" title="生产者配置 KafkaProducerConfig"></a>生产者配置 KafkaProducerConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaProducerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.kafka.bootstrap-servers&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ProducerFactory&lt;String, Message&gt; <span class="title">producerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; configProps = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                StringSerializer.class);</span><br><span class="line">        configProps.put(</span><br><span class="line">                ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG,</span><br><span class="line">                JsonSerializer.class);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaProducerFactory&lt;&gt;(configProps);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> KafkaTemplate&lt;String, Message&gt; <span class="title">kafkaTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> KafkaTemplate&lt;&gt;(producerFactory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者配置-KafkaConsumerConfig"><a href="#消费者配置-KafkaConsumerConfig" class="headerlink" title="消费者配置 KafkaConsumerConfig"></a>消费者配置 KafkaConsumerConfig</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableKafka</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaConsumerConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.kafka.bootstrap-servers&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bootstrapServers;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.kafka.consumer.group-id&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String consumerGroupId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.kafka.consumer.auto-offset-reset&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String autoOffsetReset;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConsumerFactory&lt;String, Message&gt; <span class="title">consumerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; props = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG,</span><br><span class="line">                bootstrapServers);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.GROUP_ID_CONFIG,</span><br><span class="line">                consumerGroupId);</span><br><span class="line">        props.put(</span><br><span class="line">                ConsumerConfig.AUTO_OFFSET_RESET_CONFIG,</span><br><span class="line">                autoOffsetReset);</span><br><span class="line">        <span class="comment">// props.put(</span></span><br><span class="line">        <span class="comment">//         ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG,</span></span><br><span class="line">        <span class="comment">//         StringDeserializer.class);</span></span><br><span class="line">        <span class="comment">// props.put(</span></span><br><span class="line">        <span class="comment">//         ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG,</span></span><br><span class="line">        <span class="comment">//         StringDeserializer.class);</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultKafkaConsumerFactory&lt;&gt;(</span><br><span class="line">                props,</span><br><span class="line">                <span class="keyword">new</span> StringDeserializer(),</span><br><span class="line">                <span class="keyword">new</span> JsonDeserializer&lt;&gt;(Message.class));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; <span class="title">kafkaListenerContainerFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ConcurrentKafkaListenerContainerFactory&lt;String, Message&gt; factory</span><br><span class="line">                = <span class="keyword">new</span> ConcurrentKafkaListenerContainerFactory&lt;&gt;();</span><br><span class="line">        factory.setConsumerFactory(consumerFactory());</span><br><span class="line">        <span class="comment">// factory.setRecordFilterStrategy(</span></span><br><span class="line">        <span class="comment">//         r -&gt; r.value().contains(&quot;fuck&quot;)</span></span><br><span class="line">        <span class="comment">// );</span></span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="初始化-KafkaInitialConfiguration"><a href="#初始化-KafkaInitialConfiguration" class="headerlink" title="初始化 KafkaInitialConfiguration"></a>初始化 KafkaInitialConfiguration</h2><p>初始化Topic</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaInitialConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 创建一个名为test的Topic并设置分区数为8，分区副本数为2</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NewTopic <span class="title">initialTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NewTopic(<span class="string">&quot;test&quot;</span>, <span class="number">8</span>, (<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果要修改分区数，只需修改配置值重启项目即可</span></span><br><span class="line">    <span class="comment">// 修改分区数并不会导致数据的丢失，但是分区数只能增大不能减小</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> NewTopic <span class="title">updateTopic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> NewTopic(<span class="string">&quot;test&quot;</span>, <span class="number">10</span>, (<span class="keyword">short</span>) <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="实体类-Message"><a href="#实体类-Message" class="headerlink" title="实体类 Message"></a>实体类 Message</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">6678420965611108427L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String message;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Message</span><span class="params">(String from, String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.from = from;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Message&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;from=&#x27;&quot;</span> + from + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, message=&#x27;&quot;</span> + message + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getFrom</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFrom</span><span class="params">(String from)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.from = from;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMessage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> message;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMessage</span><span class="params">(String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.message = message;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="生产者-SendMessageController"><a href="#生产者-SendMessageController" class="headerlink" title="生产者 SendMessageController"></a>生产者 SendMessageController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMessageController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> KafkaTemplate&lt;String, Message&gt; kafkaTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;send/&#123;message&#125;&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(<span class="meta">@PathVariable</span> String message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.kafkaTemplate.send(<span class="string">&quot;test&quot;</span>, <span class="keyword">new</span> Message(<span class="string">&quot;demo&quot;</span>, message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="消费者-KafkaMessageListener"><a href="#消费者-KafkaMessageListener" class="headerlink" title="消费者 KafkaMessageListener"></a>消费者 KafkaMessageListener</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">KafkaMessageListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@KafkaListener(topics = &quot;test&quot;, groupId = &quot;test-consumer&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">listen</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">        logger.info(<span class="string">&quot;接收消息: &#123;&#125;&quot;</span>, message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">GET http://localhost:8080/send/你好kafka</span><br></pre></td></tr></table></figure>



<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">2021-03-16 11:34:38.782  INFO 14040 --- [nio-8080-exec-2] o.a.k.clients.producer.ProducerConfig    : ProducerConfig values: </span><br><span class="line">	acks = 1</span><br><span class="line">	batch.size = 16384</span><br><span class="line">	bootstrap.servers = [localhost:9092]</span><br><span class="line">	buffer.memory = 33554432</span><br><span class="line">	client.dns.lookup = use_all_dns_ips</span><br><span class="line">	client.id = producer-1</span><br><span class="line">	compression.type = none</span><br><span class="line">	connections.max.idle.ms = 540000</span><br><span class="line">	delivery.timeout.ms = 120000</span><br><span class="line">	enable.idempotence = false</span><br><span class="line">	interceptor.classes = []</span><br><span class="line">	internal.auto.downgrade.txn.commit = true</span><br><span class="line">	key.serializer = class org.apache.kafka.common.serialization.StringSerializer</span><br><span class="line">	linger.ms = 0</span><br><span class="line">	max.block.ms = 60000</span><br><span class="line">	max.in.flight.requests.per.connection = 5</span><br><span class="line">	max.request.size = 1048576</span><br><span class="line">	metadata.max.age.ms = 300000</span><br><span class="line">	metadata.max.idle.ms = 300000</span><br><span class="line">	metric.reporters = []</span><br><span class="line">	metrics.num.samples = 2</span><br><span class="line">	metrics.recording.level = INFO</span><br><span class="line">	metrics.sample.window.ms = 30000</span><br><span class="line">	partitioner.class = class org.apache.kafka.clients.producer.internals.DefaultPartitioner</span><br><span class="line">	receive.buffer.bytes = 32768</span><br><span class="line">	reconnect.backoff.max.ms = 1000</span><br><span class="line">	reconnect.backoff.ms = 50</span><br><span class="line">	request.timeout.ms = 30000</span><br><span class="line">	retries = 2147483647</span><br><span class="line">	retry.backoff.ms = 100</span><br><span class="line">	sasl.client.callback.handler.class = null</span><br><span class="line">	sasl.jaas.config = null</span><br><span class="line">	sasl.kerberos.kinit.cmd = /usr/bin/kinit</span><br><span class="line">	sasl.kerberos.min.time.before.relogin = 60000</span><br><span class="line">	sasl.kerberos.service.name = null</span><br><span class="line">	sasl.kerberos.ticket.renew.jitter = 0.05</span><br><span class="line">	sasl.kerberos.ticket.renew.window.factor = 0.8</span><br><span class="line">	sasl.login.callback.handler.class = null</span><br><span class="line">	sasl.login.class = null</span><br><span class="line">	sasl.login.refresh.buffer.seconds = 300</span><br><span class="line">	sasl.login.refresh.min.period.seconds = 60</span><br><span class="line">	sasl.login.refresh.window.factor = 0.8</span><br><span class="line">	sasl.login.refresh.window.jitter = 0.05</span><br><span class="line">	sasl.mechanism = GSSAPI</span><br><span class="line">	security.protocol = PLAINTEXT</span><br><span class="line">	security.providers = null</span><br><span class="line">	send.buffer.bytes = 131072</span><br><span class="line">	ssl.cipher.suites = null</span><br><span class="line">	ssl.enabled.protocols = [TLSv1.2]</span><br><span class="line">	ssl.endpoint.identification.algorithm = https</span><br><span class="line">	ssl.engine.factory.class = null</span><br><span class="line">	ssl.key.password = null</span><br><span class="line">	ssl.keymanager.algorithm = SunX509</span><br><span class="line">	ssl.keystore.location = null</span><br><span class="line">	ssl.keystore.password = null</span><br><span class="line">	ssl.keystore.type = JKS</span><br><span class="line">	ssl.protocol = TLSv1.2</span><br><span class="line">	ssl.provider = null</span><br><span class="line">	ssl.secure.random.implementation = null</span><br><span class="line">	ssl.trustmanager.algorithm = PKIX</span><br><span class="line">	ssl.truststore.location = null</span><br><span class="line">	ssl.truststore.password = null</span><br><span class="line">	ssl.truststore.type = JKS</span><br><span class="line">	transaction.timeout.ms = 60000</span><br><span class="line">	transactional.id = null</span><br><span class="line">	value.serializer = class org.springframework.kafka.support.serializer.JsonSerializer</span><br><span class="line"></span><br><span class="line">2021-03-16 11:34:38.810  INFO 14040 --- [nio-8080-exec-2] o.a.kafka.common.utils.AppInfoParser     : Kafka version: 2.6.0</span><br><span class="line">2021-03-16 11:34:38.810  INFO 14040 --- [nio-8080-exec-2] o.a.kafka.common.utils.AppInfoParser     : Kafka commitId: 62abe01bee039651</span><br><span class="line">2021-03-16 11:34:38.811  INFO 14040 --- [nio-8080-exec-2] o.a.kafka.common.utils.AppInfoParser     : Kafka startTimeMs: 1615865678810</span><br><span class="line">2021-03-16 11:34:38.817  INFO 14040 --- [ad | producer-1] org.apache.kafka.clients.Metadata        : [Producer clientId=producer-1] Cluster ID: OIXt1kWTR4CKrRi_PxifGw</span><br><span class="line">2021-03-16 11:34:38.878  INFO 14040 --- [ntainer#0-0-C-1] c.s.listener.KafkaMessageListener        : 接收消息: Message&#123;from=&#x27;demo&#x27;, message=&#x27;你好kafka&#x27;&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Kafka</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合EasyPoi</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88EasyPoi/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
easypoi功能如同名字easy,主打的功能就是容易,让一个没见接触过poi的人员 就可以方便的写出Excel导出,Excel模板导出,Excel导入,Word模板导出,通过简单的注解和模板 语言(熟悉的表达式语法),完成以前复杂的写法

<span id="more"></span>

<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;runtime&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.baomidou&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;mybatis-plus-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;cn.afterturn&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;easypoi-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.2.0&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Boot配置文件-application-properties"><a href="#Spring-Boot配置文件-application-properties" class="headerlink" title="Spring Boot配置文件 application.properties"></a>Spring Boot配置文件 application.properties</h1><p>Spring Boot核心配置文件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">#定义项目端口</span><br><span class="line">server.port=<span class="number">8888</span></span><br><span class="line">#定义项目的访问目录</span><br><span class="line">server.servlet.context-path=/easypoi</span><br><span class="line">#数据库驱动</span><br><span class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.cj.jdbc.Driver</span><br><span class="line">#数据库连接地址</span><br><span class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//localhost:3306/easy_poi?useUnicode=true&amp;characterEncoding=utf-8</span></span><br><span class="line">#数据库用户名</span><br><span class="line">spring.datasource.username=root</span><br><span class="line">#数据库用户密码</span><br><span class="line">spring.datasource.password=<span class="number">123456</span></span><br><span class="line">#映射文件的位置</span><br><span class="line">mybatis-plus.mapper-locations=classpath:com/springboot/dao<span class="comment">/*Dao.xml</span></span><br><span class="line"><span class="comment">#类型别名</span></span><br><span class="line"><span class="comment">mybatis-plus.type-aliases-package=com.springboot.entity</span></span><br></pre></td></tr></table></figure>

<h1 id="数据库-SQL"><a href="#数据库-SQL" class="headerlink" title="数据库 SQL"></a>数据库 SQL</h1><p>数据库文件，直接导入即可，MySQL用的5.7版本</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- MySQL dump 10.13  Distrib 5.7.29, for Win64 (x86_64)</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Host: 127.0.0.1    Database: easy_poi</span></span><br><span class="line"><span class="comment">-- ------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- Server version  5.7.29</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Table structure for table `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`user`</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @saved_cs_client     = @@character_set_client */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = utf8 */</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`user`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;主键&#x27;</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">  <span class="string">`email`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;邮箱&#x27;</span>,</span><br><span class="line">  <span class="string">`phone`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;手机号码&#x27;</span>,</span><br><span class="line">  <span class="string">`qq`</span> <span class="built_in">varchar</span>(<span class="number">255</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;qq号码&#x27;</span>,</span><br><span class="line">  <span class="string">`create_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">ON</span> <span class="keyword">UPDATE</span> <span class="keyword">CURRENT_TIMESTAMP</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;更新时间&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> AUTO_INCREMENT=<span class="number">9</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br><span class="line"><span class="comment">/*!40101 SET character_set_client = @saved_cs_client */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"><span class="comment">-- Dumping data for table `user`</span></span><br><span class="line"><span class="comment">--</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">LOCK</span> <span class="keyword">TABLES</span> <span class="string">`user`</span> WRITE;</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `user` DISABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`user`</span> <span class="keyword">VALUES</span> (<span class="number">1</span>,<span class="string">&#x27;王明&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>),(<span class="number">2</span>,<span class="string">&#x27;孙红&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>),(<span class="number">3</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>),(<span class="number">4</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>,<span class="string">&#x27;2020-11-22 00:22:48&#x27;</span>),(<span class="number">5</span>,<span class="string">&#x27;王明&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>),(<span class="number">6</span>,<span class="string">&#x27;孙红&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>),(<span class="number">7</span>,<span class="string">&#x27;张飞&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>),(<span class="number">8</span>,<span class="string">&#x27;李四&#x27;</span>,<span class="string">&#x27;123456@qq.com&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;123456&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>,<span class="string">&#x27;2020-11-22 00:50:04&#x27;</span>);</span><br><span class="line"><span class="comment">/*!40000 ALTER TABLE `user` ENABLE KEYS */</span>;</span><br><span class="line"><span class="keyword">UNLOCK</span> <span class="keyword">TABLES</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=@OLD_SQL_MODE */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- Dump completed on 2020-11-22  0:50:16</span></span><br></pre></td></tr></table></figure>

<h1 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h1><h2 id="interface"><a href="#interface" class="headerlink" title="interface"></a>interface</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserDao</span> <span class="keyword">extends</span> <span class="title">BaseMapper</span>&lt;<span class="title">User</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">List&lt;UserExportVO&gt; <span class="title">select</span><span class="params">(<span class="meta">@Param(&quot;startTime&quot;)</span> Date startTime, <span class="meta">@Param(&quot;endTime&quot;)</span> Date endTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insertList</span><span class="params">(<span class="meta">@Param(&quot;userExportVO&quot;)</span> List&lt;UserExportVO&gt; userExportVOS)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="mapper"><a href="#mapper" class="headerlink" title="mapper"></a>mapper</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span> <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.springboot.dao.UserDao&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">&quot;userVOMap&quot;</span> <span class="attr">type</span>=<span class="string">&quot;com.springboot.entity.export.UserExportVO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">&quot;id&quot;</span> <span class="attr">column</span>=<span class="string">&quot;id&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;username&quot;</span> <span class="attr">column</span>=<span class="string">&quot;username&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;email&quot;</span> <span class="attr">column</span>=<span class="string">&quot;email&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">column</span>=<span class="string">&quot;phone&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;qq&quot;</span> <span class="attr">column</span>=<span class="string">&quot;qq&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;createTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;create_time&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">&quot;updateTime&quot;</span> <span class="attr">column</span>=<span class="string">&quot;update_time&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;select&quot;</span> <span class="attr">resultMap</span>=<span class="string">&quot;userVOMap&quot;</span>&gt;</span></span><br><span class="line">        select id,username,email,phone,qq,create_time,update_time from user</span><br><span class="line">        <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;startTime != null and endTime != null &quot;</span>&gt;</span></span><br><span class="line">                create_time between #&#123;startTime&#125; and #&#123;endTime&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertList&quot;</span>&gt;</span></span><br><span class="line">        insert into user(username,email,phone,qq) values</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;userExportVO&quot;</span> <span class="attr">item</span>=<span class="string">&quot;item&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span>&gt;</span></span><br><span class="line">            (#&#123;item.username&#125;,#&#123;item.email&#125;,#&#123;item.phone&#125;,#&#123;item.qq&#125;)</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h1><h2 id="interface-1"><a href="#interface-1" class="headerlink" title="interface"></a>interface</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userExport</span><span class="params">(HttpServletResponse response, Date startTime, Date endTime)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">userImport</span><span class="params">(MultipartFile file)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Impl"><a href="#Impl" class="headerlink" title="Impl"></a>Impl</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">extends</span> <span class="title">ServiceImpl</span>&lt;<span class="title">UserDao</span>, <span class="title">User</span>&gt; <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserDao userDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userExport</span><span class="params">(HttpServletResponse response, Date startTime, Date endTime)</span> </span>&#123;</span><br><span class="line">        List&lt;UserExportVO&gt; userExportVOS = userDao.select(startTime, endTime);</span><br><span class="line">        String title = <span class="string">&quot;用户信息表&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (startTime != <span class="keyword">null</span> &amp;&amp; endTime != <span class="keyword">null</span>) &#123;</span><br><span class="line">            SimpleDateFormat format = <span class="keyword">new</span> SimpleDateFormat(<span class="string">&quot;yyyy-MM-dd&quot;</span>);</span><br><span class="line">            String startTimeStr = format.format(startTime);</span><br><span class="line">            String endTimeStr = format.format(endTime);</span><br><span class="line">            title = startTimeStr + <span class="string">&quot;至&quot;</span> + endTimeStr + <span class="string">&quot;用户信息表&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; oneSheet = ExcelUtil.createOneSheet(title, title, UserExportVO.class, userExportVOS);</span><br><span class="line">        List&lt;Map&lt;String, Object&gt;&gt; list = Lists.newArrayList();</span><br><span class="line">        list.add(oneSheet);</span><br><span class="line">        Workbook workbook = ExcelUtil.mutiSheet(list);</span><br><span class="line">        <span class="comment">//通过输出流输出文件</span></span><br><span class="line">        OutputStream os = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            response.setContentType(<span class="string">&quot;application/msexcel;charset=utf-8&quot;</span>);</span><br><span class="line">            response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span></span><br><span class="line">                    + <span class="keyword">new</span> String(title.getBytes(), StandardCharsets.ISO_8859_1) + <span class="string">&quot;.xlsx&quot;</span>);</span><br><span class="line">            response.setCharacterEncoding(<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">            os = response.getOutputStream();</span><br><span class="line">            workbook.write(os);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="comment">// 打印异常</span></span><br><span class="line">            log.error(<span class="string">&quot;导出异常：&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭资源</span></span><br><span class="line">            <span class="keyword">if</span> (os != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    os.close();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userImport</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line">        List&lt;UserExportVO&gt; userExportVOS = Lists.newArrayList();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ImportParams importParams = <span class="keyword">new</span> ImportParams();</span><br><span class="line">            importParams.setHeadRows(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//            importParams.setTitleRows(0);</span></span><br><span class="line">            userExportVOS = ExcelImportUtil.importExcel(file.getInputStream(), UserExportVO.class, importParams);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        userDao.insertList(userExportVOS);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/user&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserService userService;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/exportExcel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exportExcel</span><span class="params">(HttpServletResponse response, <span class="meta">@RequestParam(value = &quot;startTime&quot;, required = false)</span> Date startTime,</span></span></span><br><span class="line"><span class="function"><span class="params">                            <span class="meta">@RequestParam(value = &quot;endTime&quot;, required = false)</span> Date endTime)</span> </span>&#123;</span><br><span class="line">        userService.userExport(response, startTime, endTime);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/importExcel&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">importExcel</span><span class="params">(<span class="meta">@RequestParam(&quot;file&quot;)</span> MultipartFile file)</span> </span>&#123;</span><br><span class="line">        userService.userImport(file);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1348665906085238496L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="keyword">private</span> String qq;</span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="UserExportVO"><a href="#UserExportVO" class="headerlink" title="UserExportVO"></a>UserExportVO</h2><p>用于导出时映射数据的实体类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ExcelTarget(&quot;userExportVO&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserExportVO</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;编号&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;用户名&quot;, isImportField = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;邮箱&quot;, isImportField = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;电话号码&quot;, isImportField = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;qq号码&quot;, isImportField = &quot;true&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String qq;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;创建时间&quot;, databaseFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;, format = &quot;yyyy-MM-dd HH:mm:ss&quot;, width = 40)</span></span><br><span class="line">    <span class="keyword">private</span> Date createTime;</span><br><span class="line">    <span class="meta">@Excel(name = &quot;更新时间&quot;, databaseFormat = &quot;yyyy-MM-dd HH:mm:ss&quot;, format = &quot;yyyy-MM-dd HH:mm:ss&quot;, width = 40)</span></span><br><span class="line">    <span class="keyword">private</span> Date updateTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="工具类-ExcelUtil"><a href="#工具类-ExcelUtil" class="headerlink" title="工具类 ExcelUtil"></a>工具类 ExcelUtil</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExcelUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建workbook,</span></span><br><span class="line"><span class="comment">     * 通过maplist填充Excel内容</span></span><br><span class="line"><span class="comment">     * 返回workbook</span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 进一步使用可以写入流,e.g.</span></span><br><span class="line"><span class="comment">     * FileOutputStream fos = new FileOutputStream(file);</span></span><br><span class="line"><span class="comment">     * workbook.write(fos);</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Workbook <span class="title">mutiSheet</span><span class="params">(List&lt;Map&lt;String, Object&gt;&gt; mapListList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ExcelExportUtil.exportExcel(mapListList, ExcelType.XSSF);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">createOneSheet</span><span class="params">(ExportParams exportParams, Class&lt;?&gt; clazz, List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;title&quot;</span>, exportParams);</span><br><span class="line">        map.put(<span class="string">&quot;entity&quot;</span>, clazz);</span><br><span class="line">        map.put(<span class="string">&quot;data&quot;</span>, data);</span><br><span class="line">        <span class="keyword">return</span> map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建一个表格并填充内容</span></span><br><span class="line"><span class="comment">     * 返回map供工作簿使用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Map&lt;String, Object&gt; <span class="title">createOneSheet</span><span class="params">(String sheetName, String title, Class&lt;?&gt; clazz, List&lt;?&gt; data)</span> </span>&#123;</span><br><span class="line">        ExportParams exportParams = <span class="keyword">new</span> ExportParams(title, sheetName, ExcelType.XSSF);</span><br><span class="line">        <span class="keyword">return</span> createOneSheet(exportParams, clazz, data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p><img src="https://files.mdnice.com/user/10819/b043fd7a-18ee-4a8c-99df-bd42a33c3ce3.png"></p>
<h2 id="导出的excel"><a href="#导出的excel" class="headerlink" title="导出的excel"></a>导出的excel</h2><p><img src="https://files.mdnice.com/user/10819/0d3c5efd-0993-4b28-83c1-3f4a3dc4c9e9.png"></p>
<p>本文源码地址：<a href="https://github.com/jonssonyan/spring-demo/tree/master/springboot-easypoi">https://github.com/jonssonyan/spring-demo/tree/master/springboot-easypoi</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>EasyPoi</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Redis</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88Redis/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>

<blockquote>
<p>本文源码地址：<a href="https://github.com/jonssonyan/spring-demo/tree/master/springboot-redis">https://github.com/jonssonyan/spring-demo/tree/master/springboot-redis</a></p>
</blockquote>
<p>事先需要自己部署一个Redis，用于之后测试连接,本文操作Redis使用Spring Data Redis框架</p>
<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.projectlombok&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;lombok&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">    &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- spring-boot redis --&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-data-redis&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/commons-io/commons-io --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-io&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-io&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.commons/commons-collections4 --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;4.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/com.alibaba/fastjson --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;fastjson&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;1.2.58&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;!-- https:<span class="comment">//mvnrepository.com/artifact/org.apache.commons/commons-lang3 --&gt;</span></span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-lang3&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;3.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="Spring-Boot配置文件-application-properties"><a href="#Spring-Boot配置文件-application-properties" class="headerlink" title="Spring Boot配置文件 application.properties"></a>Spring Boot配置文件 application.properties</h1><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Redis服务器地址</span></span><br><span class="line"><span class="meta">spring.redis.host</span>=<span class="string">127.0.0.1</span></span><br><span class="line"><span class="comment"># Redis服务器连接端口</span></span><br><span class="line"><span class="meta">spring.redis.port</span>=<span class="string">6379</span></span><br><span class="line"><span class="comment"># Redis数据库索引（默认为0）</span></span><br><span class="line"><span class="comment">#spring.redis.database=</span></span><br><span class="line"><span class="comment"># Redis服务器连接用户名（默认为空）</span></span><br><span class="line"><span class="comment">#spring.redis.username=</span></span><br><span class="line"><span class="comment"># Redis服务器连接密码（默认为空）</span></span><br><span class="line"><span class="comment">#spring.redis.password=</span></span><br><span class="line"><span class="comment"># 连接超时时间（毫秒）</span></span><br><span class="line"><span class="meta">spring.redis.timeout</span>=<span class="string">0</span></span><br></pre></td></tr></table></figure>

<h1 id="Redis配置文件-RedisConfig"><a href="#Redis配置文件-RedisConfig" class="headerlink" title="Redis配置文件 RedisConfig"></a>Redis配置文件 RedisConfig</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConditionalOnClass(RedisService.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisService <span class="title">redisService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisService(redisTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRedisTemplate</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// redis configuration</span></span><br><span class="line">    <span class="comment">// -----------------------------------------------------------------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * key 的序列化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisSerializer keyRedisSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * value 的序列化器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisFastJsonSerializer&lt;Object&gt; valueRedisSerializer = <span class="keyword">new</span> RedisFastJsonSerializer&lt;&gt;(Object.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CacheManager <span class="title">cacheManager</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// RedisCacheWriter</span></span><br><span class="line">        RedisCacheWriter redisCacheWriter = RedisCacheWriter.nonLockingRedisCacheWriter(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// RedisCacheConfiguration - 值的序列化方式</span></span><br><span class="line">        RedisSerializationContext.SerializationPair&lt;Object&gt; serializationPair = RedisSerializationContext.SerializationPair.fromSerializer(valueRedisSerializer);</span><br><span class="line">        RedisCacheConfiguration redisCacheConfiguration = RedisCacheConfiguration.defaultCacheConfig().serializeValuesWith(serializationPair);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RedisCacheManager(redisCacheWriter, redisCacheConfiguration);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title">redisTemplate</span><span class="params">(RedisConnectionFactory redisConnectionFactory)</span> </span>&#123;</span><br><span class="line">        RedisTemplate&lt;String, Object&gt; redisTemplate = <span class="keyword">new</span> RedisTemplate&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 配置连接工厂</span></span><br><span class="line">        redisTemplate.setConnectionFactory(redisConnectionFactory);</span><br><span class="line">        <span class="comment">// 值序列化-RedisFastJsonSerializer</span></span><br><span class="line">        redisTemplate.setValueSerializer(valueRedisSerializer);</span><br><span class="line">        redisTemplate.setHashValueSerializer(valueRedisSerializer);</span><br><span class="line">        <span class="comment">// 键序列化-StringRedisSerializer</span></span><br><span class="line">        redisTemplate.setKeySerializer(keyRedisSerializer);</span><br><span class="line">        redisTemplate.setHashKeySerializer(keyRedisSerializer);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RedisFastJsonSerializer"><a href="#RedisFastJsonSerializer" class="headerlink" title="RedisFastJsonSerializer"></a>RedisFastJsonSerializer</h1><p>RedisFastJsonSerializer 是自定义的序列化和反序列化工具,为了往 Redis 中设值的时候, 自动将对象序列化, 取值的时候自动反序列化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisFastJsonSerializer</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> <span class="title">RedisSerializer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="comment">// 新建的GenericFastJson2JsonRedisSerializer里面添加白名,防止fastjson 反序列化报错</span></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().addAccept(<span class="string">&quot;com.springboot&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Class&lt;T&gt; clazz;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisFastJsonSerializer</span><span class="params">(Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.clazz = clazz;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">byte</span>[] serialize(T t) <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(t)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(t, SerializerFeature.WriteClassName).getBytes(StandardCharsets.UTF_8);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">deserialize</span><span class="params">(<span class="keyword">byte</span>[] bytes)</span> <span class="keyword">throws</span> SerializationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (Objects.isNull(bytes) || ArrayUtils.isEmpty(bytes)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseObject(<span class="keyword">new</span> String(bytes, StandardCharsets.UTF_8), clazz);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="RedisService"><a href="#RedisService" class="headerlink" title="RedisService"></a>RedisService</h1><p>封装一些Redis的常用方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> RedisTemplate&lt;String, Object&gt; redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RedisService</span><span class="params">(RedisTemplate&lt;String, Object&gt; redisTemplate)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.redisTemplate = redisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 设值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     缓存 &#123;<span class="doctag">@link</span> RedisKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 有效时长 (秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T 放入缓存中的值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">setValue</span><span class="params">(RedisKey key, T value, <span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        redisTemplate.opsForValue().set(key.of(), value, seconds, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Object <span class="title">getValue</span><span class="params">(String key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!Optional.ofNullable(redisTemplate.hasKey(key)).orElse(Boolean.FALSE)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisTemplate.opsForValue().get(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 取值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   缓存 &#123;<span class="doctag">@link</span> RedisKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> clazz 缓存对应的对象的 class 对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> T or null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> RedisService#getValue(String)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">getValue</span><span class="params">(RedisKey key, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> clazz.cast(getValue(key.of()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 删除</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key 缓存 &#123;<span class="doctag">@link</span> RedisKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">delete</span><span class="params">(RedisKey key)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(redisTemplate.delete(key.of())).orElse(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Description: 延长指定 key 的过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     &#123;<span class="doctag">@link</span> RedisKey&#125;</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> seconds 有效时长 (秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">expire</span><span class="params">(RedisKey key, <span class="keyword">long</span> seconds)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Optional.ofNullable(redisTemplate.expire(key.of(), seconds, TimeUnit.SECONDS)).orElse(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Files</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String CACHE_KEY_PREFIX = <span class="string">&quot;file:&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD_FILE_NAME = <span class="string">&quot;fileName&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String FIELD_FILE_CONTENT = <span class="string">&quot;fileContent&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Description: 缓存文件&lt;br&gt;</span></span><br><span class="line"><span class="comment">         * Details: 将文件对象读入内存, 获取字节数组, 最后 &#123;<span class="doctag">@code</span> Base64&#125; 编码. 以 缓存前缀 + 文件名 作为缓存 key</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> file (Required) 文件对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFile</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> HashOperations&lt;String, Object, Object&gt; ops = redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String fileName = Objects.requireNonNull(file, <span class="string">&quot;文件不能为空&quot;</span>).getName();</span><br><span class="line">            <span class="keyword">final</span> String fileContent = <span class="keyword">new</span> String(</span><br><span class="line">                    Base64.getEncoder().encode(IOUtils.toByteArray(FileUtils.openInputStream(Objects.requireNonNull(file, <span class="string">&quot;文件对象不能为空&quot;</span>)))),</span><br><span class="line">                    StandardCharsets.UTF_8</span><br><span class="line">            );</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> HashMap&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">            map.put(FIELD_FILE_NAME, fileName);</span><br><span class="line">            map.put(FIELD_FILE_CONTENT, fileContent);</span><br><span class="line">            ops.putAll(CACHE_KEY_PREFIX + fileName, map);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Description: 获取文件</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> fileName (Required) 文件名</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> java.io.File 文件对象</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="meta">@SneakyThrows</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> File <span class="title">getFile</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">final</span> HashOperations&lt;String, Object, Object&gt; ops = redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 缓存 Key</span></span><br><span class="line">            <span class="keyword">final</span> Map&lt;Object, Object&gt; entries = ops.entries(CACHE_KEY_PREFIX + Objects.requireNonNull(fileName, <span class="string">&quot;文件名不能为空&quot;</span>));</span><br><span class="line">            <span class="keyword">if</span> (MapUtils.isEmpty(entries)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> String cachedFileName = MapUtils.getString(entries, FIELD_FILE_NAME);</span><br><span class="line">            <span class="keyword">final</span> String cachedFileContent = MapUtils.getString(entries, FIELD_FILE_CONTENT);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> File file = <span class="keyword">new</span> File(FileUtils.getTempDirectoryPath() + cachedFileName);</span><br><span class="line">            <span class="keyword">try</span> (</span><br><span class="line">                    <span class="keyword">final</span> FileOutputStream out = <span class="keyword">new</span> FileOutputStream(file);</span><br><span class="line">                    <span class="keyword">final</span> BufferedOutputStream bufferedOutputStream = <span class="keyword">new</span> BufferedOutputStream(out)</span><br><span class="line">            ) &#123;</span><br><span class="line">                bufferedOutputStream.write(Base64.getDecoder().decode(cachedFileContent));</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> file;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * Description: 获取文件的字节数组</span></span><br><span class="line"><span class="comment">         *</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@param</span> fileName (Required) 文件名</span></span><br><span class="line"><span class="comment">         * <span class="doctag">@return</span> byte[] 文件的字节数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">byte</span>[] getBytes(String fileName) &#123;</span><br><span class="line">            <span class="keyword">final</span> HashOperations&lt;String, Object, Object&gt; ops = redisTemplate.opsForHash();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">final</span> Map&lt;Object, Object&gt; entries = ops.entries(CACHE_KEY_PREFIX + Objects.requireNonNull(fileName, <span class="string">&quot;文件名不能为空&quot;</span>));</span><br><span class="line">            <span class="keyword">return</span> Base64.getDecoder().decode(MapUtils.getString(entries, FIELD_FILE_CONTENT));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><h2 id="User"><a href="#User" class="headerlink" title="User"></a>User</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = -<span class="number">2961686750510451767L</span>;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="RedisKey"><a href="#RedisKey" class="headerlink" title="RedisKey"></a>RedisKey</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Builder</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisKey</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String SEPARATOR = <span class="string">&quot;.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis key 的前缀</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String prefix;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Redis key 的内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String suffix;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">of</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.format(<span class="string">&quot;%s.%s&quot;</span>, prefix, suffix);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ResultVO"><a href="#ResultVO" class="headerlink" title="ResultVO"></a>ResultVO</h2><p>视图类，返回json对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ResultVO</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line">    <span class="keyword">private</span> T data;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO&lt;Object&gt; <span class="title">success</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultVO&lt;Object&gt; resultVO = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">1</span>);</span><br><span class="line">        resultVO.setMsg(<span class="string">&quot;成功&quot;</span>);</span><br><span class="line">        resultVO.setData(object);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO&lt;Object&gt; <span class="title">success</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> success(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO&lt;Object&gt; <span class="title">fail</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        ResultVO&lt;Object&gt; resultVO = <span class="keyword">new</span> ResultVO&lt;&gt;();</span><br><span class="line">        resultVO.setCode(<span class="number">0</span>);</span><br><span class="line">        resultVO.setMsg(<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        resultVO.setData(object);</span><br><span class="line">        <span class="keyword">return</span> resultVO;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> ResultVO&lt;Object&gt; <span class="title">fail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> fail(<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Controller</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/redis/set&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO&lt;Object&gt; <span class="title">set</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setId(<span class="number">1L</span>);</span><br><span class="line">        user.setName(<span class="string">&quot;wang&quot;</span>);</span><br><span class="line">        user.setAge(<span class="number">22</span>);</span><br><span class="line">        redisService.setValue(RedisKey.builder().prefix(<span class="string">&quot;user&quot;</span>).suffix(<span class="string">&quot;wang&quot;</span>).build(), user, <span class="number">10000L</span>);</span><br><span class="line">        <span class="keyword">return</span> ResultVO.success(redisService.getValue(RedisKey.builder().prefix(<span class="string">&quot;user&quot;</span>).suffix(<span class="string">&quot;wang&quot;</span>).build(), user.getClass()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Redis: <a href="https://redis.io/">https://redis.io/</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Shiro</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88Shiro/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>

<blockquote>
<p>本文源码地址：<a href="https://github.com/jonssonyan/spring-demo/tree/master/springboot-shiro">https://github.com/jonssonyan/spring-demo/tree/master/springboot-shiro</a></p>
</blockquote>
<p>在Spring Boot中集成Shiro进行用户的认证过程主要可以归纳为以下三点：</p>
<ol>
<li>定义一个ShiroConfig，然后配置SecurityManager Bean，SecurityManager为Shiro的安全管理器，管理着所有Subject；</li>
<li>在ShiroConfig中配置ShiroFilterFactoryBean，其为Shiro过滤器工厂类，依赖于SecurityManager；</li>
<li>自定义Realm实现，Realm包含<code>doGetAuthorizationInfo()</code>和<code>doGetAuthenticationInfo()</code>方法，因为本文只涉及用户认证，所以只实现<code>doGetAuthenticationInfo()</code>方法。</li>
</ol>
<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.apache.shiro&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;shiro-spring-boot-web-starter&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;1.4.1&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="ShiroConfig"><a href="#ShiroConfig" class="headerlink" title="ShiroConfig"></a>ShiroConfig</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShiroConfig</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ShiroFilterFactoryBean <span class="title">shiroFilterFactoryBean</span><span class="params">(<span class="meta">@Qualifier(&quot;defaultSecurityManager&quot;)</span> DefaultSecurityManager defaultSecurityManager)</span> </span>&#123;</span><br><span class="line">        ShiroFilterFactoryBean shiroFilterFactoryBean = <span class="keyword">new</span> ShiroFilterFactoryBean();</span><br><span class="line">        shiroFilterFactoryBean.setSecurityManager(defaultSecurityManager);</span><br><span class="line">        <span class="comment">// 添加shiro内置过滤器</span></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            anon：无参，开放权限，可以理解为匿名用户或游客</span></span><br><span class="line"><span class="comment">            authc：无参，需要认证</span></span><br><span class="line"><span class="comment">            logout：无参，注销，执行后会直接跳转到shiroFilterFactoryBean.setLoginUrl(); 设置的 url</span></span><br><span class="line"><span class="comment">            authcBasic：无参，表示 httpBasic 认证</span></span><br><span class="line"><span class="comment">            user：无参，表示必须存在用户，当登入操作时不做检查</span></span><br><span class="line"><span class="comment">            ssl：无参，表示安全的URL请求，协议为 https</span></span><br><span class="line"><span class="comment">            perms[user]：参数可写多个，表示需要某个或某些权限才能通过，多个参数时写 perms[&quot;user, admin&quot;]，当有多个参数时必须每个参数都通过才算通过</span></span><br><span class="line"><span class="comment">            roles[admin]：参数可写多个，表示是某个或某些角色才能通过，多个参数时写 roles[&quot;admin，user&quot;]，当有多个参数时必须每个参数都通过才算通过</span></span><br><span class="line"><span class="comment">            rest[user]：根据请求的方法，相当于 perms[user:method]，其中 method 为 post，get，delete 等</span></span><br><span class="line"><span class="comment">            port[8081]：当请求的URL端口不是8081时，跳转到schemal://serverName:8081?queryString 其中 schmal 是协议 http 或 https 等等，serverName 是你访问的 Host，8081 是 Port 端口，queryString 是你访问的 URL 里的 ? 后面的参数</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">// 设置访问页面需要的权限</span></span><br><span class="line">        map.put(<span class="string">&quot;/user/add&quot;</span>, <span class="string">&quot;perms[user:add]&quot;</span>);</span><br><span class="line">        map.put(<span class="string">&quot;/user/update&quot;</span>, <span class="string">&quot;perms[user:update]&quot;</span>);</span><br><span class="line">        shiroFilterFactoryBean.setFilterChainDefinitionMap(map);</span><br><span class="line">        <span class="comment">// 设置转到登陆界面</span></span><br><span class="line">        shiroFilterFactoryBean.setLoginUrl(<span class="string">&quot;/toLogin&quot;</span>);</span><br><span class="line">        <span class="comment">// 设置没有权限跳转的页面</span></span><br><span class="line">        shiroFilterFactoryBean.setUnauthorizedUrl(<span class="string">&quot;/noAuth&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> shiroFilterFactoryBean;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DefaultWebSecurityManager <span class="title">defaultSecurityManager</span><span class="params">(<span class="meta">@Qualifier(&quot;userRealm&quot;)</span> UserRealm userRealm)</span> </span>&#123;</span><br><span class="line">        DefaultWebSecurityManager defaultWebSecurityManager = <span class="keyword">new</span> DefaultWebSecurityManager();</span><br><span class="line">        defaultWebSecurityManager.setRealm(userRealm);</span><br><span class="line">        <span class="keyword">return</span> defaultWebSecurityManager;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserRealm <span class="title">userRealm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserRealm();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="UserRealm"><a href="#UserRealm" class="headerlink" title="UserRealm"></a>UserRealm</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行授权&quot;</span>);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="comment">// 设置权限。这里只要登陆的用户都会执行下面这段代码，实际开发中，这里的权限应该从数据库中获取</span></span><br><span class="line">        info.addStringPermission(<span class="string">&quot;user:add&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;执行认证&quot;</span>);</span><br><span class="line">        <span class="comment">// username，password从数据库中获取，这里为了方便在代码中写死</span></span><br><span class="line">        String username = <span class="string">&quot;admin&quot;</span>;</span><br><span class="line">        String password = <span class="string">&quot;123&quot;</span>;</span><br><span class="line">        <span class="comment">// 前端传来的用户名密码从token中获取</span></span><br><span class="line">        UsernamePasswordToken token = (UsernamePasswordToken) authenticationToken;</span><br><span class="line">        <span class="comment">// 用户名认证</span></span><br><span class="line">        <span class="keyword">if</span> (!token.getUsername().equals(username)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>; <span class="comment">// 用户名不正确，抛出异常UnknownAccountException</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 密码认证，shiro做，加密了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(<span class="string">&quot;&quot;</span>, password, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(value = &#123;&quot;/&quot;, &quot;/index&quot;&#125;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;login&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/add&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/add&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/user/update&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">update</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;user/update&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/toLogin&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">toLogin</span><span class="params">(<span class="meta">@RequestParam</span> String username, <span class="meta">@RequestParam</span> String password, ModelAndView modelAndView)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 获取当前用户subject</span></span><br><span class="line">        Subject subject = SecurityUtils.getSubject();</span><br><span class="line">        <span class="comment">// 封装用户对象</span></span><br><span class="line">        UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(username, password);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            subject.login(token); <span class="comment">// 执行登陆操作</span></span><br><span class="line">            modelAndView.setViewName(<span class="string">&quot;index&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> modelAndView;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownAccountException u) &#123; <span class="comment">// 捕获用户名是否正确的异常</span></span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;用户名错误&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IncorrectCredentialsException i) &#123; <span class="comment">// 密码是否正确的异常</span></span><br><span class="line">            modelAndView.addObject(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;密码错误&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        modelAndView.setViewName(<span class="string">&quot;login&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/noAuth&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">noAuth</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;你尚未拥有权限&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="前端页面"><a href="#前端页面" class="headerlink" title="前端页面"></a>前端页面</h1><p>前端使用的thymeleaf模板引擎</p>
<h2 id="login-html"><a href="#login-html" class="headerlink" title="login.html"></a>login.html</h2><p>登录页面</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">&quot;$&#123;msg&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">th:action</span>=<span class="string">&quot;@&#123;/toLogin&#125;&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入用户名&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入密码&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登陆&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="index-html"><a href="#index-html" class="headerlink" title="index.html"></a>index.html</h2><p>后台主页</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span> <span class="attr">xmlns:th</span>=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello shiro<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;user/add&#125;&quot;</span>&gt;</span>add<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">&quot;@&#123;user/update&#125;&quot;</span>&gt;</span>update<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="add-html"><a href="#add-html" class="headerlink" title="add.html"></a>add.html</h2><p>添加页面，需要有添加权限</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>add<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>add<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="update-html"><a href="#update-html" class="headerlink" title="update.html"></a>update.html</h2><p>修改页面，需要有修改权限</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>update<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>update<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><h2 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h2><p><img src="https://files.mdnice.com/user/10819/aa1dadf2-b116-4ec6-8e65-69c4c966d8cd.png"></p>
<h2 id="后台页面"><a href="#后台页面" class="headerlink" title="后台页面"></a>后台页面</h2><p>代码中值赋予user角色添加的权限，所以当我们点击add按钮时可用，点击update按钮时不可用</p>
<p><img src="https://files.mdnice.com/user/10819/8c690175-3766-4359-863f-a93863bd3b24.png"></p>
<p><img src="https://files.mdnice.com/user/10819/f2f03d3a-d2e4-4979-b345-8dd2c964ea50.png"></p>
<p><img src="https://files.mdnice.com/user/10819/c70ad210-f113-47ee-b03f-cc5d60332e7e.png"></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合WebSocket</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88WebSocket/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-websocket&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://img-blog.csdnimg.cn/20201115233752129.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="websocket配置类"><a href="#websocket配置类" class="headerlink" title="websocket配置类"></a>websocket配置类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.websocket.websocket.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span> <span class="comment">// 开启WebSocket相关功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketServerConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyWebSocketHandler myWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MyHandshakeInterceptor myHandshakeInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当客户端通过/connect和服务端连接通信时，使用MyWebSocketHandler处理会话</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandlerRegistry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//添加一个处理器还有定义处理器的处理路径（注意：报403加.setAllowedOrigins(&quot;*&quot;)）</span></span><br><span class="line">        webSocketHandlerRegistry.addHandler(myWebSocketHandler, <span class="string">&quot;/ws&quot;</span>).addInterceptors(myHandshakeInterceptor).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">         * 在这里我们用到.withSockJS()，SockJS是spring用来处理浏览器对websocket的兼容性，</span></span><br><span class="line"><span class="comment">         * 目前浏览器支持websocket还不是很好，特别是IE11以下.</span></span><br><span class="line"><span class="comment">         * SockJS能根据浏览器能否支持websocket来提供三种方式用于websocket请求，</span></span><br><span class="line"><span class="comment">         * 三种方式分别是 WebSocket, HTTP Streaming以及 HTTP Long Polling</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        webSocketHandlerRegistry.addHandler(myWebSocketHandler, <span class="string">&quot;/ws/sockjs&quot;</span>).addInterceptors(myHandshakeInterceptor).withSockJS();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.websocket.websocket.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyWebSocketHandler</span> <span class="keyword">implements</span> <span class="title">WebSocketHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和客户端链接成功的时候触发该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession webSocketSession)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;和客户端建立连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和客户端建立连接后，处理客户端发送的请求</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketMessage</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(WebSocketSession webSocketSession, WebSocketMessage&lt;?&gt; webSocketMessage)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object content = webSocketMessage.getPayload();</span><br><span class="line">        log.info(content.toString());</span><br><span class="line">        <span class="comment">// 发送消息给客户端</span></span><br><span class="line">        webSocketSession.sendMessage(<span class="keyword">new</span> TextMessage(fakeAi(content.toString())));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> String <span class="title">fakeAi</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span> || <span class="string">&quot;&quot;</span>.equals(input)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;你说什么？没听清︎&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> input.replace(<span class="string">&#x27;你&#x27;</span>, <span class="string">&#x27;我&#x27;</span>)</span><br><span class="line">                .replace(<span class="string">&quot;吗&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">                .replace(<span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;!&#x27;</span>)</span><br><span class="line">                .replace(<span class="string">&#x27;？&#x27;</span>, <span class="string">&#x27;！&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和客户端连接失败的时候触发该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> throwable</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession webSocketSession, Throwable throwable)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        webSocketSession.close(CloseStatus.SERVER_ERROR);</span><br><span class="line">        log.error(<span class="string">&quot;连接异常&quot;</span>, throwable);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 和客户端断开连接的时候触发该方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketSession</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> closeStatus</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession webSocketSession, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        log.info(<span class="string">&quot;断开连接&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 是否支持部分消息：如果设置为true，那么一个大的或未知尺寸的消息将会被分割，并会收到多次消息（会通过多次调用方法handleMessage(WebSocketSession, WebSocketMessage). ）</span></span><br><span class="line"><span class="comment">     * 如果分为多条消息，那么可以通过一个api：org.springframework.web.socket.WebSocketMessage.isLast() 是否是某条消息的最后一部分。</span></span><br><span class="line"><span class="comment">     * 默认一般为false，消息不分割</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">supportsPartialMessages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.websocket.websocket.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.server.ServerHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.server.HandshakeInterceptor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyHandshakeInterceptor</span> <span class="keyword">implements</span> <span class="title">HandshakeInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 握手之前，若返回false，则不建立链接</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpRequest</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> serverHttpResponse</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> webSocketHandler</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> Exception</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">beforeHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Map&lt;String, Object&gt; map)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterHandshake</span><span class="params">(ServerHttpRequest serverHttpRequest, ServerHttpResponse serverHttpResponse, WebSocketHandler webSocketHandler, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一次握手，建立持久性连接</span></span><br><span class="line">        log.info(<span class="string">&quot;握手成功&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;WebSocket客户端&lt;/title&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/sockjs-client/0.3.4/sockjs.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;link href=<span class="string">&quot;https://cdn.bootcss.com/twitter-bootstrap/4.4.1/css/bootstrap.min.css&quot;</span> rel=<span class="string">&quot;stylesheet&quot;</span>&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;style&gt;</span><br><span class="line">    .jumbotron &#123;</span><br><span class="line">        width: <span class="number">100</span>%;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #text &#123;</span><br><span class="line">        height: 3rem;</span><br><span class="line">        font-size: 1rem;</span><br><span class="line">        line-height: 3rem;</span><br><span class="line">        margin: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    .btn &#123;</span><br><span class="line">        margin-right: 5px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #connect &#123;</span><br><span class="line">        margin-left: 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #log &#123;</span><br><span class="line">        margin: 1rem <span class="number">0</span> <span class="number">0</span> 1rem;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;container&quot;</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;row&quot;</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;jumbotron&quot;</span>&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;text&quot;</span> placeholder=<span class="string">&quot;请输入你想传输的内容&quot;</span> id=<span class="string">&quot;text&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;col-lg-12&quot;</span>/&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;连接&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-info&quot;</span> id=<span class="string">&quot;connect&quot;</span> onclick=<span class="string">&quot;connect()&quot;</span>/&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;发送&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-success&quot;</span> id=<span class="string">&quot;sent&quot;</span> disabled=<span class="string">&quot;disabled&quot;</span> onclick=<span class="string">&quot;sent()&quot;</span>/&gt;</span><br><span class="line">            &lt;input type=<span class="string">&quot;button&quot;</span> value=<span class="string">&quot;断开&quot;</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">&quot;btn btn-danger&quot;</span> id=<span class="string">&quot;disconnect&quot;</span> disabled=<span class="string">&quot;disabled&quot;</span></span><br><span class="line">                   onclick=<span class="string">&quot;disconnect()&quot;</span>/&gt;</span><br><span class="line"></span><br><span class="line">            &lt;div id=<span class="string">&quot;log&quot;</span>&gt;</span><br><span class="line">                &lt;p&gt;聊天记录:&lt;/p&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><br><span class="line">    let text = document.querySelector(<span class="string">&#x27;#text&#x27;</span>);</span><br><span class="line">    let connectBtn = document.querySelector(<span class="string">&quot;#connect&quot;</span>);</span><br><span class="line">    let sentBtn = document.querySelector(<span class="string">&quot;#sent&quot;</span>);</span><br><span class="line">    let disconnectBtn = document.querySelector(<span class="string">&quot;#disconnect&quot;</span>);</span><br><span class="line">    let logDiv = document.querySelector(<span class="string">&quot;#log&quot;</span>);</span><br><span class="line"></span><br><span class="line">    let ws = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">connect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        let targetUri = <span class="string">&quot;/ws/sockjs&quot;</span>;</span><br><span class="line">        ws = <span class="keyword">new</span> SockJS(targetUri);</span><br><span class="line">        ws.onopen = function () &#123;</span><br><span class="line">            setConnected(<span class="keyword">true</span>);</span><br><span class="line">            log(<span class="string">&#x27;和服务端连接成功！&#x27;</span>);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onmessage = function (event) &#123;</span><br><span class="line">            log(<span class="string">&#x27;服务端说：&#x27;</span> + event.data);</span><br><span class="line">        &#125;;</span><br><span class="line">        ws.onclose = function () &#123;</span><br><span class="line">            setConnected(<span class="keyword">false</span>);</span><br><span class="line">            log(<span class="string">&#x27;和服务端断开连接！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">sent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ws != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ws.send(text.value);</span><br><span class="line">            log(<span class="string">&#x27;客户端说：&#x27;</span> + text.value);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            log(<span class="string">&#x27;请先建立连接！&#x27;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">disconnect</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (ws != <span class="keyword">null</span>) &#123;</span><br><span class="line">            ws.close();</span><br><span class="line">            ws = <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        setConnected(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">log</span><span class="params">(value)</span> </span>&#123;</span><br><span class="line">        let content = document.createElement(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line">        content.innerHTML = value;</span><br><span class="line">        logDiv.appendChild(content);</span><br><span class="line">        text.value = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">function <span class="title">setConnected</span><span class="params">(connected)</span> </span>&#123;</span><br><span class="line">        connectBtn.disabled = connected;</span><br><span class="line">        disconnectBtn.disabled = !connected;</span><br><span class="line">        sentBtn.disabled = !connected;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://img-blog.csdnimg.cn/20201115233843384.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br><img src="https://img-blog.csdnimg.cn/20201115233843358.png#pic_center" alt="在这里插入图片描述"></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>WebSocket</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring-Boot整合Mail实现邮件发送</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88Mail%E5%AE%9E%E7%8E%B0%E9%82%AE%E4%BB%B6%E5%8F%91%E9%80%81/</url>
    <content><![CDATA[<p>邮件发送其实是一个非常常见的需求，用户注册，找回密码等地方，都会用到，使用 JavaSE 代码发送邮件，步骤还是挺繁琐的，SpringBoot 中对于邮件发送，提供了相关的自动化配置类，使得邮件发送变得非常容易。</p>
<span id="more"></span>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://img-blog.csdnimg.cn/20201206230247722.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"></p>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">    &lt;!-- Spring Boot 邮件依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-mail&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!--jasypt配置文件加解密--&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;com.github.ulisesbocchio&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;jasypt-spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">      &lt;version&gt;2.1.1&lt;/version&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-test&lt;/artifactId&gt;</span><br><span class="line">      &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;cn.hutool&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;hutool-all&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- Spring Boot 模板依赖 --&gt;</span><br><span class="line">    &lt;dependency&gt;</span><br><span class="line">      &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">      &lt;artifactId&gt;spring-boot-starter-thymeleaf&lt;/artifactId&gt;</span><br><span class="line">    &lt;/dependency&gt;</span><br><span class="line">  &lt;/dependencies&gt;</span><br></pre></td></tr></table></figure>
<h1 id="Spring-Boot配置文件"><a href="#Spring-Boot配置文件" class="headerlink" title="Spring Boot配置文件"></a>Spring Boot配置文件</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  mail:</span><br><span class="line">    host: smtp.qq.com</span><br><span class="line">    port: <span class="number">465</span></span><br><span class="line">    # 邮箱用户名</span><br><span class="line">    username: <span class="number">485206058</span><span class="meta">@qq</span>.com</span><br><span class="line">    # 使用 jasypt 加密密码，使用testGeneratePassword测试类的方法 生成加密密码，替换 ENC(加密密码)</span><br><span class="line">    password: ENC(加密密码)</span><br><span class="line">    protocol: smtp</span><br><span class="line">    test-connection: <span class="keyword">true</span></span><br><span class="line">    <span class="keyword">default</span>-encoding: UTF-<span class="number">8</span></span><br><span class="line">    properties:</span><br><span class="line">      mail.smtp.auth: <span class="keyword">true</span></span><br><span class="line">      mail.smtp.starttls.enable: <span class="keyword">true</span></span><br><span class="line">      mail.smtp.starttls.required: <span class="keyword">true</span></span><br><span class="line">      mail.smtp.ssl.enable: <span class="keyword">true</span></span><br><span class="line">      mail.display.sendmail: spring-boot-demo</span><br><span class="line"># 为 jasypt 配置解密秘钥</span><br><span class="line">jasypt:</span><br><span class="line">  encryptor:</span><br><span class="line">    password: spring-boot-demo</span><br></pre></td></tr></table></figure>
<h1 id="接口-MailService"><a href="#接口-MailService" class="headerlink" title="接口 MailService"></a>接口 <code>MailService</code></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送文本邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String to, String subject, String content, String... cc)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送HTML邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content, String... cc)</span> <span class="keyword">throws</span> MessagingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带附件的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to       收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject  邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 附件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc       抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath, String... cc)</span> <span class="keyword">throws</span> MessagingException</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送正文中有静态资源的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscPath 静态资源地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscId   静态资源id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">sendResourceMail</span><span class="params">(String to, String subject, String content, String rscPath, String rscId, String... cc)</span> <span class="keyword">throws</span> MessagingException</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="实现类-MailServiceImpl"><a href="#实现类-MailServiceImpl" class="headerlink" title="实现类 MailServiceImpl"></a>实现类 <code>MailServiceImpl</code></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceImpl</span> <span class="keyword">implements</span> <span class="title">MailService</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String from;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送文本邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">(String to, String subject, String content, String... cc)</span> </span>&#123;</span><br><span class="line">        SimpleMailMessage message = <span class="keyword">new</span> SimpleMailMessage();</span><br><span class="line">        message.setFrom(from);</span><br><span class="line">        message.setTo(to);</span><br><span class="line">        message.setSubject(subject);</span><br><span class="line">        message.setText(content);</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtil.isNotEmpty(cc)) &#123;</span><br><span class="line">            message.setCc(cc);</span><br><span class="line">        &#125;</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送HTML邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">(String to, String subject, String content, String... cc)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtil.isNotEmpty(cc)) &#123;</span><br><span class="line">            helper.setCc(cc);</span><br><span class="line">        &#125;</span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送带附件的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to       收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject  邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content  邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> filePath 附件地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc       抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">(String to, String subject, String content, String filePath, String... cc)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtil.isNotEmpty(cc)) &#123;</span><br><span class="line">            helper.setCc(cc);</span><br><span class="line">        &#125;</span><br><span class="line">        FileSystemResource file = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(filePath));</span><br><span class="line">        String fileName = filePath.substring(filePath.lastIndexOf(File.separator));</span><br><span class="line">        helper.addAttachment(fileName, file);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 发送正文中有静态资源的邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> to      收件人地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> subject 邮件主题</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> content 邮件内容</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscPath 静态资源地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> rscId   静态资源id</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> cc      抄送地址</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件发送异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendResourceMail</span><span class="params">(String to, String subject, String content, String rscPath, String rscId, String... cc)</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        MimeMessage message = mailSender.createMimeMessage();</span><br><span class="line"></span><br><span class="line">        MimeMessageHelper helper = <span class="keyword">new</span> MimeMessageHelper(message, <span class="keyword">true</span>);</span><br><span class="line">        helper.setFrom(from);</span><br><span class="line">        helper.setTo(to);</span><br><span class="line">        helper.setSubject(subject);</span><br><span class="line">        helper.setText(content, <span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">if</span> (ArrayUtil.isNotEmpty(cc)) &#123;</span><br><span class="line">            helper.setCc(cc);</span><br><span class="line">        &#125;</span><br><span class="line">        FileSystemResource res = <span class="keyword">new</span> FileSystemResource(<span class="keyword">new</span> File(rscPath));</span><br><span class="line">        helper.addInline(rscId, res);</span><br><span class="line"></span><br><span class="line">        mailSender.send(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><h2 id="加密解密测试类"><a href="#加密解密测试类" class="headerlink" title="加密解密测试类"></a>加密解密测试类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.xkcoding.email;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.jasypt.encryption.StringEncryptor;</span><br><span class="line"><span class="keyword">import</span> org.junit.Test;</span><br><span class="line"><span class="keyword">import</span> org.junit.runner.RunWith;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.test.context.junit4.SpringRunner;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RunWith(SpringRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringBootDemoEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> StringEncryptor encryptor;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成加密密码</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testGeneratePassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 你的邮箱密码</span></span><br><span class="line">        String password = <span class="string">&quot;yfjulihmmdpabhae&quot;</span>;</span><br><span class="line">        <span class="comment">// 加密后的密码(注意：配置上去的时候需要加 ENC(加密密码))</span></span><br><span class="line">        String encryptPassword = encryptor.encrypt(password);</span><br><span class="line">        String decryptPassword = encryptor.decrypt(encryptPassword);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;password = &quot;</span> + password);</span><br><span class="line">        System.out.println(<span class="string">&quot;encryptPassword = &quot;</span> + encryptPassword);</span><br><span class="line">        System.out.println(<span class="string">&quot;decryptPassword = &quot;</span> + decryptPassword);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="发邮件的测试类-MailServiceTest"><a href="#发邮件的测试类-MailServiceTest" class="headerlink" title="发邮件的测试类 MailServiceTest"></a>发邮件的测试类 <code>MailServiceTest</code></h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MailServiceTest</span> <span class="keyword">extends</span> <span class="title">SpringBootDemoEmailApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MailService mailService;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TemplateEngine templateEngine;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试简单邮件</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendSimpleMail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        mailService.sendSimpleMail(<span class="string">&quot;205820645@qq.com&quot;</span>, <span class="string">&quot;这是一封简单邮件&quot;</span>, <span class="string">&quot;这是一封普通的SpringBoot测试邮件&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试HTML邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setVariable(<span class="string">&quot;project&quot;</span>, <span class="string">&quot;Spring Boot Demo&quot;</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Spring Boot&quot;</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;https://spring.io&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String emailTemplate = templateEngine.process(<span class="string">&quot;welcome&quot;</span>, context);</span><br><span class="line">        mailService.sendHtmlMail(<span class="string">&quot;205820645@qq.com&quot;</span>, <span class="string">&quot;这是一封模板HTML邮件&quot;</span>, emailTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试HTML邮件，自定义模板目录</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendHtmlMail2</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line"></span><br><span class="line">        SpringResourceTemplateResolver templateResolver = <span class="keyword">new</span> SpringResourceTemplateResolver();</span><br><span class="line">        templateResolver.setApplicationContext(context);</span><br><span class="line">        templateResolver.setCacheable(<span class="keyword">false</span>);</span><br><span class="line">        templateResolver.setPrefix(<span class="string">&quot;classpath:/email/&quot;</span>);</span><br><span class="line">        templateResolver.setSuffix(<span class="string">&quot;.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">        templateEngine.setTemplateResolver(templateResolver);</span><br><span class="line"></span><br><span class="line">        Context context = <span class="keyword">new</span> Context();</span><br><span class="line">        context.setVariable(<span class="string">&quot;project&quot;</span>, <span class="string">&quot;Spring Boot Demo&quot;</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;author&quot;</span>, <span class="string">&quot;Spring Boot&quot;</span>);</span><br><span class="line">        context.setVariable(<span class="string">&quot;url&quot;</span>, <span class="string">&quot;https://spring.io&quot;</span>);</span><br><span class="line"></span><br><span class="line">        String emailTemplate = templateEngine.process(<span class="string">&quot;test&quot;</span>, context);</span><br><span class="line">        mailService.sendHtmlMail(<span class="string">&quot;205820645@qq.com&quot;</span>, <span class="string">&quot;这是一封模板HTML邮件&quot;</span>, emailTemplate);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试附件邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendAttachmentsMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        URL resource = ResourceUtil.getResource(<span class="string">&quot;static/image.png&quot;</span>);</span><br><span class="line">        mailService.sendAttachmentsMail(<span class="string">&quot;205820645@qq.com&quot;</span>, <span class="string">&quot;这是一封带附件的邮件&quot;</span>, <span class="string">&quot;邮件中有附件，请注意查收！&quot;</span>, resource.getPath());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 测试静态资源邮件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> MessagingException 邮件异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendResourceMail</span><span class="params">()</span> <span class="keyword">throws</span> MessagingException </span>&#123;</span><br><span class="line">        String rscId = <span class="string">&quot;Spring Boot&quot;</span>;</span><br><span class="line">        String content = <span class="string">&quot;&lt;html&gt;&lt;body&gt;这是带静态资源的邮件&lt;br/&gt;&lt;img src=\&#x27;cid:&quot;</span> + rscId + <span class="string">&quot;\&#x27; &gt;&lt;/body&gt;&lt;/html&gt;&quot;</span>;</span><br><span class="line">        URL resource = ResourceUtil.getResource(<span class="string">&quot;static/xkcoding.png&quot;</span>);</span><br><span class="line">        mailService.sendResourceMail(<span class="string">&quot;205820645@qq.com&quot;</span>, <span class="string">&quot;这是一封带静态资源的邮件&quot;</span>, content, resource.getPath(), rscId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="静态资源文件"><a href="#静态资源文件" class="headerlink" title="静态资源文件"></a>静态资源文件</h1><h2 id="test-html"><a href="#test-html" class="headerlink" title="test.html"></a>test.html</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;SpringBootDemo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin-left: auto;</span><br><span class="line">            margin-right: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #welcome &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;welcome&quot;</span>&gt;</span><br><span class="line">    &lt;h3&gt;欢迎使用 &lt;span th:text=&quot;$&#123;project&#125;&quot;&gt;&lt;/span&gt; - Powered By &lt;span th:text=&quot; $&#123;author&#125;&quot;&gt;&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;span th:text=&quot;$&#123;url&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-align: center; padding: 10px&quot;</span>&gt;</span><br><span class="line">        &lt;a style=<span class="string">&quot;text-decoration: none;&quot;</span> href=<span class="string">&quot;#&quot;</span> th:href=<span class="string">&quot;@&#123;$&#123;url&#125;&#125;&quot;</span> target=<span class="string">&quot;_bank&quot;</span>&gt;</span><br><span class="line">            &lt;strong&gt;spring-boot-demo&lt;/strong&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="welcome-html"><a href="#welcome-html" class="headerlink" title="welcome.html"></a>welcome.html</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html lang=<span class="string">&quot;en&quot;</span> xmlns:th=<span class="string">&quot;http://www.thymeleaf.org&quot;</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;SpringBootDemo&lt;/title&gt;</span><br><span class="line">    &lt;style&gt;</span><br><span class="line">        body &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">            margin-left: auto;</span><br><span class="line">            margin-right: auto;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        #welcome &#123;</span><br><span class="line">            text-align: center;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div id=<span class="string">&quot;welcome&quot;</span>&gt;</span><br><span class="line">    &lt;h3&gt;欢迎使用 &lt;span th:text=&quot;$&#123;project&#125;&quot;&gt;&lt;/span&gt; - Powered By &lt;span th:text=&quot; $&#123;author&#125;&quot;&gt;&lt;/span&gt;&lt;/h3&gt;</span><br><span class="line">    &lt;span th:text=&quot;$&#123;url&#125;&quot;&gt;&lt;/span&gt;</span><br><span class="line">    &lt;div style=<span class="string">&quot;text-align: center; padding: 10px&quot;</span>&gt;</span><br><span class="line">        &lt;a style=<span class="string">&quot;text-decoration: none;&quot;</span> href=<span class="string">&quot;#&quot;</span> th:href=<span class="string">&quot;@&#123;$&#123;url&#125;&#125;&quot;</span> target=<span class="string">&quot;_bank&quot;</span>&gt;</span><br><span class="line">            &lt;strong&gt;spring-boot-demo&lt;/strong&gt;</span><br><span class="line">        &lt;/a&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="效果截图"><a href="#效果截图" class="headerlink" title="效果截图"></a>效果截图</h1><p><img src="https://img-blog.csdnimg.cn/20201206231701221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201206231701135.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/20201206231701110.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020120623170180.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"><br><img src="https://img-blog.csdnimg.cn/2020120623170155.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70"></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Mail</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合validation注解校验</title>
    <url>/2021/03/10/Spring-Boot%E6%95%B4%E5%90%88Validation%E6%B3%A8%E8%A7%A3%E6%A0%A1%E9%AA%8C/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--https:<span class="comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation --&gt;</span></span><br><span class="line">      &lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-validation&lt;/artifactId&gt;</span><br><span class="line">          &lt;version&gt;2.3.3.RELEASE&lt;/version&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@TableField(&quot;username&quot;)</span></span><br><span class="line"><span class="meta">@NotBlank(message = &quot;&#123;user.name.notBlank&#125;&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String username;</span><br><span class="line"><span class="meta">@NotBlank(message = &quot;&#123;user.password.notBlank&#125;&quot;)</span></span><br><span class="line"><span class="meta">@TableField(&quot;password&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"><span class="meta">@NotBlank(message = &quot;&#123;user.email.notBlank&#125;&quot;)</span></span><br><span class="line"><span class="meta">@Email(message = &quot;&#123;user.email.pattern&#125;&quot;)</span></span><br><span class="line"><span class="meta">@TableField(&quot;email&quot;)</span></span><br><span class="line"><span class="keyword">private</span> String email;</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>查看<code>LocalValidationFactoryBean</code>类的源码，发现Spring Boot默认的<code>ValidationMessagesSource</code>校验出错时的提示文件是在<code>resources</code>文件夹下文件<code>ValidationMessages.properties</code></p>
<h2 id="ValidationMessages-properties"><a href="#ValidationMessages-properties" class="headerlink" title="ValidationMessages.properties"></a>ValidationMessages.properties</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">user.name.notBlank=用户名不能为空</span><br><span class="line">user.password.notBlank=密码不能为空</span><br><span class="line">user.email.notBlank=邮箱不能为空</span><br><span class="line">user.email.pattern=邮箱格式不正确</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20200930012325741.png#pic_center" alt="ValidationMessages.properties"></p>
<h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 添加用户</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> user 用户对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/insert&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ResultVO&lt;Object&gt; <span class="title">insert</span><span class="params">(<span class="meta">@Validated</span> <span class="meta">@RequestBody</span> User user, BindingResult bindingResult)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (bindingResult.hasErrors()) &#123;</span><br><span class="line">            List&lt;ObjectError&gt; allErrors = bindingResult.getAllErrors();</span><br><span class="line">            <span class="keyword">return</span> ResultVOUtil.fail(allErrors.stream().map(ObjectError::getDefaultMessage).collect(Collectors.toList()));</span><br><span class="line">        &#125;</span><br><span class="line">        userService.insert(user.doBuild());</span><br><span class="line">        <span class="keyword">return</span> ResultVOUtil.success();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://img-blog.csdnimg.cn/20200930012523905.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="效果"></p>
<h1 id="参考注解"><a href="#参考注解" class="headerlink" title="参考注解"></a>参考注解</h1><table>
<thead>
<tr>
<th align="left">注解</th>
<th align="left">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="left">@NotNull</td>
<td align="left">值不能为空</td>
</tr>
<tr>
<td align="left">@Null</td>
<td align="left">值必须为空</td>
</tr>
<tr>
<td align="left">@Pattern(regex=)</td>
<td align="left">字符串必须匹配正则表达式</td>
</tr>
<tr>
<td align="left">@Size(min, max)</td>
<td align="left">集合元素的数量必须在min和max之间</td>
</tr>
<tr>
<td align="left">@CreditCardNumber(ignoreNonDigitCharacters=)</td>
<td align="left">字符串必须是信用卡号，按照美国的标准验证</td>
</tr>
<tr>
<td align="left">@Email</td>
<td align="left">字符串必须是Email地址</td>
</tr>
<tr>
<td align="left">@Length(min, max)</td>
<td align="left">检查字符串的长度</td>
</tr>
<tr>
<td align="left">@NotBlank</td>
<td align="left">字符串不能为空串</td>
</tr>
<tr>
<td align="left">@NotEmpty</td>
<td align="left">字符串不能为null, 集合必须有元素</td>
</tr>
<tr>
<td align="left">@Range(min, max)</td>
<td align="left">数字必须大于min, 小于max</td>
</tr>
<tr>
<td align="left">@SafeHtml</td>
<td align="left">字符串必须是安全的html</td>
</tr>
<tr>
<td align="left">@URL</td>
<td align="left">字符串必须是合法的URL</td>
</tr>
<tr>
<td align="left">@AssertFalse</td>
<td align="left">值必须是false</td>
</tr>
<tr>
<td align="left">@AssertTrue</td>
<td align="left">值必须是true</td>
</tr>
<tr>
<td align="left">@DecimalMax(value=, inclusive=)</td>
<td align="left">值必须小于等于(inclusive=true)/小于(inclusive=false)属性指定的值，也可以注释在字符串类型的属性上。</td>
</tr>
<tr>
<td align="left">@DecimalMin(value=, inclusive=)</td>
<td align="left">值必须大于等于(inclusive=true)/小于(inclusive=false)属性指定的值，也可以注释在字符串类型的属性上。</td>
</tr>
<tr>
<td align="left">@Digist(integer=,fraction=)</td>
<td align="left">数字格式检查。integer指定整数部分的最大长度，fraction指定小数部分的最大长度</td>
</tr>
<tr>
<td align="left">@Future</td>
<td align="left">时间必须是未来的</td>
</tr>
<tr>
<td align="left">@Past</td>
<td align="left">事件必须是过去的</td>
</tr>
<tr>
<td align="left">@Max(value=)</td>
<td align="left">值必须小于等于value指定的值。不能注解在字符串类型属性上。</td>
</tr>
<tr>
<td align="left">@Min(value=)</td>
<td align="left">值必须小于等于value指定的值。不能注解在字符串类型属性上</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Validation</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Cloud Netflix整合Eureka</title>
    <url>/2021/03/09/Spring%20Cloud%20Netflix%E6%95%B4%E5%90%88Eureka/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />
Spring-Cloud Euraka是Spring Cloud集合中一个组件，它是对Euraka的集成，用于服务注册和发现。Eureka是Netflix中的一个开源框架。它和 zookeeper、Consul一样，都是用于服务注册管理的，同样，Spring-Cloud 还集成了Zookeeper和Consul。

<span id="more"></span>
<h1 id="搭建eureka服务注册中心"><a href="#搭建eureka服务注册中心" class="headerlink" title="搭建eureka服务注册中心"></a>搭建eureka服务注册中心</h1><h2 id="引入以下依赖"><a href="#引入以下依赖" class="headerlink" title="引入以下依赖"></a>引入以下依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 最新版的 eureka 服务端包 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-server&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- SpringCloud依赖，起到管理版本的作用 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Spring-Cloud-和-Spring-Boot-之间版本对应关系"><a href="#Spring-Cloud-和-Spring-Boot-之间版本对应关系" class="headerlink" title="Spring Cloud 和 Spring Boot 之间版本对应关系"></a>Spring Cloud 和 Spring Boot 之间版本对应关系</h3><table>
<thead>
<tr>
<th align="left">Release Train</th>
<th align="left">Boot Version</th>
</tr>
</thead>
<tbody><tr>
<td align="left"><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-2020.0-Release-Notes">2020.0.x</a> aka Ilford</td>
<td align="left">2.4.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-cloud/spring-cloud-release/wiki/Spring-Cloud-Hoxton-Release-Notes">Hoxton</a></td>
<td align="left">2.2.x, 2.3.x (Starting with SR5)</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Greenwich-Release-Notes">Greenwich</a></td>
<td align="left">2.1.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Finchley-Release-Notes">Finchley</a></td>
<td align="left">2.0.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Edgware-Release-Notes">Edgware</a></td>
<td align="left">1.5.x</td>
</tr>
<tr>
<td align="left"><a href="https://github.com/spring-projects/spring-cloud/wiki/Spring-Cloud-Dalston-Release-Notes">Dalston</a></td>
<td align="left">1.5.x</td>
</tr>
</tbody></table>
<h2 id="在启动类上添加-EnableEurekaServer注解，表明这是一个Eureka服务端"><a href="#在启动类上添加-EnableEurekaServer注解，表明这是一个Eureka服务端" class="headerlink" title="在启动类上添加@EnableEurekaServer注解，表明这是一个Eureka服务端"></a>在启动类上添加<code>@EnableEurekaServer</code>注解，表明这是一个Eureka服务端</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableEurekaServer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudEurekaApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudEurekaApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在application-properties中添加一些配置"><a href="#在application-properties中添加一些配置" class="headerlink" title="在application.properties中添加一些配置"></a>在application.properties中添加一些配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">spring.application.name=Eureka-Server</span><br><span class="line"># 指定了Eureka服务端的IP</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">eureka.instance.statusPageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/info</span></span><br><span class="line">eureka.instance.healthCheckUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/health</span></span><br><span class="line">eureka.instance.homePageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;/</span></span><br><span class="line"># 表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false</span><br><span class="line"># eureka.client.register-with-eureka=false</span><br><span class="line"># 表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false</span><br><span class="line"># eureka.client.fetch-registry=false</span><br><span class="line"># 指定Eureka服务端的地址，默认值为http://localhost:8761/eureka 指定Eureka服务端的地址为另外一个Eureka服务端的地址8081</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></span><br><span class="line"># 用于定义服务续约任务的调用间隔时间，默认30秒</span><br><span class="line">eureka.client.serviceUrl.registry-fetch-interval-seconds=<span class="number">5</span></span><br></pre></td></tr></table></figure>

<h2 id="配置完毕后启动服务，访问http-localhost-8080"><a href="#配置完毕后启动服务，访问http-localhost-8080" class="headerlink" title="配置完毕后启动服务，访问http://localhost:8080/"></a>配置完毕后启动服务，访问<a href="http://localhost:8080/">http://localhost:8080/</a></h2><p><img src="https://files.mdnice.com/user/10819/9e117fd0-770a-41e2-8aca-fccf4ada0b91.png"></p>
<p>由于还没有Eureka客户端将服务注册进来，所以Instances currently registered with Eureka列表是空的</p>
<h1 id="搭建provider服务提供者"><a href="#搭建provider服务提供者" class="headerlink" title="搭建provider服务提供者"></a>搭建provider服务提供者</h1><h2 id="引入以下依赖-1"><a href="#引入以下依赖-1" class="headerlink" title="引入以下依赖"></a>引入以下依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;!-- 监控管理 --&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- SpringCloud依赖，起到管理版本的作用 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在启动类上加-EnableDiscoveryClient注解，表明这是一个Eureka客户端"><a href="#在启动类上加-EnableDiscoveryClient注解，表明这是一个Eureka客户端" class="headerlink" title="在启动类上加@EnableDiscoveryClient注解，表明这是一个Eureka客户端"></a>在启动类上加<code>@EnableDiscoveryClient</code>注解，表明这是一个Eureka客户端</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudProviderApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudProviderApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="接着编写一个TestController，对外提供一些REST服务"><a href="#接着编写一个TestController，对外提供一些REST服务" class="headerlink" title="接着编写一个TestController，对外提供一些REST服务"></a>接着编写一个TestController，对外提供一些REST服务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在application-properties中添加一些配置-1"><a href="#在application-properties中添加一些配置-1" class="headerlink" title="在application.properties中添加一些配置"></a>在application.properties中添加一些配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 指定了服务的端口为8081</span><br><span class="line">server.port=<span class="number">8082</span></span><br><span class="line"># 指定服务名称为Server-Provider，后续服务消费者要获取上面TestController中接口的时候会用到这个服务名</span><br><span class="line">spring.application.name=Server-Provider</span><br><span class="line"># 虽然这两个配置的默认值就是true，但这里还是显式配置下，使Eureka客户端的功能更为直观（即向服务端注册服务并定时从服务端获取服务缓存到本地）</span><br><span class="line">eureka.client.register-with-eureka=<span class="keyword">true</span></span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">true</span></span><br><span class="line"># 指定Eureka服务端的地址，这里为上面定义的Eureka服务端地址</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//localhost:8080/eureka/,http://localhost:8081/eureka/</span></span><br><span class="line"># 访问路径可以显示IP地址</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息"><a href="#配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息" class="headerlink" title="配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息"></a>配置好后，启动Eureka-Client，可以从控制台中看到注册成功的消息</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Registered Applications size is zero : <span class="keyword">true</span></span><br><span class="line">Application version is -<span class="number">1</span>: <span class="keyword">true</span></span><br><span class="line">Getting all instance registry info from the eureka server</span><br><span class="line">The response status is <span class="number">200</span></span><br><span class="line">Starting heartbeat executor: renew interval is: <span class="number">30</span></span><br><span class="line">InstanceInfoReplicator onDemand update allowed rate per min is <span class="number">4</span></span><br><span class="line">Discovery Client initialized at timestamp <span class="number">1611244216061</span> with initial instances count: <span class="number">0</span></span><br><span class="line">Registering application SERVER-PROVIDER with eureka with status UP</span><br><span class="line">Saw local status change event StatusChangeEvent [timestamp=<span class="number">1611244216076</span>, current=UP, previous=STARTING]</span><br><span class="line">DiscoveryClient_SERVER-PROVIDER/DESKTOP-7LUOFJF.lan:Server-Provider:<span class="number">8081</span>: registering service...</span><br><span class="line"><span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8081 <span class="params">(http)</span> with context path &#x27;&#x27;</span></span><br><span class="line"><span class="function">Updating port to 8081</span></span><br><span class="line"><span class="function">DiscoveryClient_SERVER-PROVIDER/DESKTOP-7LUOFJF.lan:Server-Provider:8081 - registration status: 204</span></span><br></pre></td></tr></table></figure>

<h2 id="再次访问http-localhost-8082-，可看到服务列表里已经出现了名字为Server-providerde服务了"><a href="#再次访问http-localhost-8082-，可看到服务列表里已经出现了名字为Server-providerde服务了" class="headerlink" title="再次访问http://localhost:8082/，可看到服务列表里已经出现了名字为Server-providerde服务了"></a>再次访问<a href="http://localhost:8082/%EF%BC%8C%E5%8F%AF%E7%9C%8B%E5%88%B0%E6%9C%8D%E5%8A%A1%E5%88%97%E8%A1%A8%E9%87%8C%E5%B7%B2%E7%BB%8F%E5%87%BA%E7%8E%B0%E4%BA%86%E5%90%8D%E5%AD%97%E4%B8%BAServer-providerde%E6%9C%8D%E5%8A%A1%E4%BA%86">http://localhost:8082/，可看到服务列表里已经出现了名字为Server-providerde服务了</a></h2><p><img src="https://files.mdnice.com/user/10819/e983bc6b-4dd0-482d-90f8-4e4f05fb405c.png"></p>
<p>UP表示在线的意思（如果Eureka客户端正常关闭，那么这里的状态将变为DOWN），点击后面的链接<a href="https://mrbird.cc/192.168.73.109:Server-Provider:8082">http://192.168.68.233:8081/actuator/info</a>将访问该服务的<code>/info</code>接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;<span class="string">&quot;app&quot;</span>:&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;Server-Provider&quot;</span>&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>这时候关闭Eureka客户端，再次刷新<a href="http://localhost:8080/">http://localhost:8080/</a></p>
<p><img src="https://files.mdnice.com/user/10819/6738f4e5-4cad-4e36-a75d-2257437a0edb.png"></p>
<p>可看到虽然Eureka客户端已经关闭了，但是Eureka服务端页面的服务服务列表中依然还有该服务，并且页面红色文字提示</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</span><br></pre></td></tr></table></figure>

<p>大致意思是Eureka已经进入了<strong>保护模式</strong>。微服务在部署之后可能由于网络问题造成Eureka客户端无法成功的发送心跳给Eureka服务端，这时候Eureka服务端认定Eureka客户端已经挂掉了，虽然实际上Eureka客户端还在正常的运行着。而保护模式就是为了解决这个问题，即当Eureka服务端在短时间内同时丢失了过多的Eureka客户端时，Eureka服务端会进入保护模式，不去剔除这些客户端。因为我们这里只部署了一个Eureka客户端服务，所以关闭客户端后满足“短时间内丢失过多Eureka客户端”的条件。</p>
<p>在开发中可以先将保护模式给关了，我们在Eureka服务端加上一条配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka.server.enable-self-preservation= <span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h2 id="开启服务监控actuator"><a href="#开启服务监控actuator" class="headerlink" title="开启服务监控actuator"></a>开启服务监控actuator</h2><h3 id="引入以下依赖-2"><a href="#引入以下依赖-2" class="headerlink" title="引入以下依赖"></a>引入以下依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="在application-properties中添加一些配置-2"><a href="#在application-properties中添加一些配置-2" class="headerlink" title="在application.properties中添加一些配置"></a>在application.properties中添加一些配置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 启用监控</span><br><span class="line"># 开放所有端点health，info，metrics，通过actuator/+端点名就可以获取相应的信息。默认打开health和info，metrics默认不开放</span><br><span class="line">management.endpoints.web.exposure.include=*</span><br><span class="line">#未开启actuator/health时，我们获取到的信息是&#123;&quot;status&quot;:&quot;UP&quot;&#125;，status的值还有可能是 DOWN。开启后打印详细信息</span><br><span class="line">management.endpoint.health.show-details=always</span><br><span class="line">info.app.name=Server-Provider</span><br></pre></td></tr></table></figure>

<h3 id="访问路径"><a href="#访问路径" class="headerlink" title="访问路径"></a>访问路径</h3><p>localhost根据自己部署的服务器IP、主机名访问。 info、health为默认开放，metrics默认不开放</p>
<ul>
<li><p>心跳检查 <a href="http://localhost:8081/actuator/info">http://localhost:8081/actuator/info</a> </p>
</li>
<li><p>健康检查 <a href="http://localhost:8081/actuator/health">http://localhost:8081/actuator/health</a> </p>
</li>
<li><p>指标 <a href="http://localhost:8081/actuator/metrics">http://localhost:8081/actuator/metrics</a> </p>
</li>
</ul>
<h1 id="Eureka集群"><a href="#Eureka集群" class="headerlink" title="Eureka集群"></a>Eureka集群</h1><p>ureka服务端充当了重要的角色，所有Eureka客户端都将自己提供的服务注册到Eureka服务端，然后供所有服务消费者使用。如果单节点的Eureka服务端宕机了，那么所有服务都无法正常的访问，这必将是灾难性的。为了提高Eureka服务端的可用性，我们一般会对其集群部署，即同时部署多个Eureka服务端，并且可以相互间同步服务。    </p>
<p>在搭建Eureka服务端的时候我们曾把下面两个配置给关闭了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka.client.register-with-eureka=<span class="keyword">false</span></span><br><span class="line"></span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<p>实际上在Eureka集群模式中，开启这两个参数可以让当前Eureka服务端将自己也作为服务注册到别的Eureka服务端，并且从别的Eureka服务端获取服务进行同步。所以这里我们将这两个参数置为true（默认就是true），下面开始搭建Eureka服务端集群，为了简单起见这里只搭建两个节点的Eureka服务端集群。</p>
<p>两个applications.properties配置如下</p>
<ul>
<li>8080端口的Eureka服务端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8080</span></span><br><span class="line">spring.application.name=Eureka-Server</span><br><span class="line"># 指定了Eureka服务端的IP</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">eureka.instance.statusPageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/info</span></span><br><span class="line">eureka.instance.healthCheckUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/health</span></span><br><span class="line">eureka.instance.homePageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;/</span></span><br><span class="line"># 表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false</span><br><span class="line"># eureka.client.register-with-eureka=false</span><br><span class="line"># 表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false</span><br><span class="line"># eureka.client.fetch-registry=false</span><br><span class="line"># 指定Eureka服务端的地址，默认值为http://localhost:8761/eureka 指定Eureka服务端的地址为另外一个Eureka服务端的地址8081</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:8081/eureka/</span></span><br><span class="line"># 用于定义服务续约任务的调用间隔时间，默认30秒</span><br><span class="line">eureka.client.serviceUrl.registry-fetch-interval-seconds=<span class="number">5</span></span><br><span class="line"># 关闭保护模式</span><br><span class="line">eureka.server.enable-self-preservation=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>8081端口的Eureka服务端</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server.port=<span class="number">8081</span></span><br><span class="line">spring.application.name=Eureka-Server</span><br><span class="line"># 指定了Eureka服务端的IP</span><br><span class="line">eureka.instance.hostname=localhost</span><br><span class="line">eureka.instance.statusPageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/info</span></span><br><span class="line">eureka.instance.healthCheckUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/health</span></span><br><span class="line">eureka.instance.homePageUrl=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;/</span></span><br><span class="line"># 表示是否将服务注册到Eureka服务端，由于自身就是Eureka服务端，所以设置为false</span><br><span class="line"># eureka.client.register-with-eureka=false</span><br><span class="line"># 表示是否从Eureka服务端获取服务信息，因为这里只搭建了一个Eureka服务端，并不需要从别的Eureka服务端同步服务信息，所以这里设置为false</span><br><span class="line"># eureka.client.fetch-registry=false</span><br><span class="line"># 指定Eureka服务端的地址，默认值为http://localhost:8761/eureka 指定Eureka服务端的地址为另外一个Eureka服务端的地址8080</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//$&#123;eureka.instance.hostname&#125;:8080/eureka/</span></span><br><span class="line"># 用于定义服务续约任务的调用间隔时间，默认30秒</span><br><span class="line">eureka.client.serviceUrl.registry-fetch-interval-seconds=<span class="number">5</span></span><br><span class="line"># 关闭保护模式</span><br><span class="line">eureka.server.enable-self-preservation=<span class="keyword">false</span></span><br></pre></td></tr></table></figure>

<h1 id="搭建consumer服务消费者"><a href="#搭建consumer服务消费者" class="headerlink" title="搭建consumer服务消费者"></a>搭建consumer服务消费者</h1><p>Eureka客户端即是服务提供者，也是服务消费者，即自身的接口可能被别的服务访问，同时也可能调用别的服务接口</p>
<h2 id="引入一下依赖"><a href="#引入一下依赖" class="headerlink" title="引入一下依赖"></a>引入一下依赖</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-cloud-starter-netflix-eureka-client&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line">    &lt;!-- SpringCloud依赖，起到管理版本的作用 --&gt;</span><br><span class="line">    &lt;dependencyManagement&gt;</span><br><span class="line">        &lt;dependencies&gt;</span><br><span class="line">            &lt;dependency&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.cloud&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-cloud-dependencies&lt;/artifactId&gt;</span><br><span class="line">                &lt;version&gt;Hoxton.SR9&lt;/version&gt;</span><br><span class="line">                &lt;type&gt;pom&lt;/type&gt;</span><br><span class="line">                &lt;scope&gt;import&lt;/scope&gt;</span><br><span class="line">            &lt;/dependency&gt;</span><br><span class="line">        &lt;/dependencies&gt;</span><br><span class="line">    &lt;/dependencyManagement&gt;</span><br></pre></td></tr></table></figure>

<h2 id="在入口类中加入-EnableDiscoveryClient注解用于发现服务和注册服务，并配置一个RestTemplate-Bean，然后加上-LoadBalanced注解来开启负载均衡"><a href="#在入口类中加入-EnableDiscoveryClient注解用于发现服务和注册服务，并配置一个RestTemplate-Bean，然后加上-LoadBalanced注解来开启负载均衡" class="headerlink" title="在入口类中加入@EnableDiscoveryClient注解用于发现服务和注册服务，并配置一个RestTemplate Bean，然后加上@LoadBalanced注解来开启负载均衡"></a>在入口类中加入<code>@EnableDiscoveryClient</code>注解用于发现服务和注册服务，并配置一个<code>RestTemplate Bean</code>，然后加上<code>@LoadBalanced</code>注解来开启负载均衡</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringCloudConsumerApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@LoadBalanced</span></span><br><span class="line">    <span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SpringCloudConsumerApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="编写一个TestController，用于消费服务"><a href="#编写一个TestController，用于消费服务" class="headerlink" title="编写一个TestController，用于消费服务"></a>编写一个TestController，用于消费服务</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入了RestTemplate，getInfo中使用RestTemplate对象均衡的去获取服务并消费。</span></span><br><span class="line"><span class="comment">     * 可以看到我们使用服务名称（Server-Provider）去获取服务的，而不是使用传统的IP加端口的形式。</span></span><br><span class="line"><span class="comment">     * 这就体现了使用Eureka去获取服务的好处，我们只要保证这个服务名称不变即可，IP和端口不再是我们关心的点</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/info&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.restTemplate.getForEntity(<span class="string">&quot;http://Server-Provider/hello&quot;</span>, String.class).getBody();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="在application-properties中添加一些配置-3"><a href="#在application-properties中添加一些配置-3" class="headerlink" title="在application.properties中添加一些配置"></a>在application.properties中添加一些配置</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"># 指定了服务的端口为8083</span><br><span class="line">server.port=<span class="number">8083</span></span><br><span class="line"># 指定服务名称为Server-Consumer，后续服务消费者要获取上面TestController中接口的时候会用到这个服务名</span><br><span class="line">spring.application.name=Server-Consumer</span><br><span class="line"># 虽然这两个配置的默认值就是true，但这里还是显式配置下，使Eureka客户端的功能更为直观（即向服务端注册服务并定时从服务端获取服务缓存到本地）</span><br><span class="line">eureka.client.register-with-eureka=<span class="keyword">true</span></span><br><span class="line">eureka.client.fetch-registry=<span class="keyword">true</span></span><br><span class="line"># 指定Eureka服务端的地址，这里为上面定义的Eureka服务端地址</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//localhost:8080/eureka/,http://localhost:8081/eureka/</span></span><br><span class="line"># 访问路径可以显示IP地址</span><br><span class="line">eureka.instance.prefer-ip-address=<span class="keyword">true</span></span><br></pre></td></tr></table></figure>

<h2 id="启动该项目，访问http-localhost-8083-info"><a href="#启动该项目，访问http-localhost-8083-info" class="headerlink" title="启动该项目，访问http://localhost:8083/info"></a>启动该项目，访问<a href="http://localhost:8083/info">http://localhost:8083/info</a></h2><p><img src="https://files.mdnice.com/user/10819/470b98f1-b309-4122-b727-49bb8f4c592e.png"></p>
<h1 id="Eureka添加认证"><a href="#Eureka添加认证" class="headerlink" title="Eureka添加认证"></a>Eureka添加认证</h1><p>出于安全的考虑，我们可能会对Eureka服务端添加用户认证的功能。我们在Eureka-Server引入Spring-Security依赖</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-starter-security&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<p>然后在application.yml中配置用户名和密码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring.security.user.name=admin</span><br><span class="line">spring.security.user.password=<span class="number">123456</span></span><br></pre></td></tr></table></figure>

<p>Eureka服务端配置了密码之后，所有<code>eureka.client.serviceUrl.defaultZone</code>的配置也必须配置上用户名和密码，格式为：<code>eureka.client.serviceUrl.defaultZone=http://$&#123;userName&#125;:$&#123;password&#125;@$&#123;hosetname&#125;:$&#123;port&#125;/eureka/</code>，如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">eureka.client.serviceUrl.defaultZone=http:<span class="comment">//admin:123456@$&#123;eureka.instance.hostname&#125;:8080/eureka/</span></span><br></pre></td></tr></table></figure>

<p>重新打包并部署后，访问<a href="http://localhost:8080/%EF%BC%8C%E9%A1%B5%E9%9D%A2%E5%B0%86%E5%BC%B9%E5%87%BA%E9%AA%8C%E8%AF%81%E7%AA%97%E5%8F%A3%EF%BC%8C%E8%BE%93%E5%85%A5%E7%94%A8%E6%88%B7%E5%90%8D%E5%92%8C%E5%AF%86%E7%A0%81%E5%90%8E%E5%8D%B3%E5%8F%AF%E8%AE%BF%E9%97%AE">http://localhost:8080/，页面将弹出验证窗口，输入用户名和密码后即可访问</a></p>
<p><img src="https://files.mdnice.com/user/10819/7ef86017-a9b9-482f-9b95-c3027732035d.png"></p>
<h1 id="Eureka配置"><a href="#Eureka配置" class="headerlink" title="Eureka配置"></a>Eureka配置</h1><h2 id="Eureka中常用的配置选项及代表的含义"><a href="#Eureka中常用的配置选项及代表的含义" class="headerlink" title="Eureka中常用的配置选项及代表的含义"></a>Eureka中常用的配置选项及代表的含义</h2><table>
<thead>
<tr>
<th align="left">配置</th>
<th align="left">含义</th>
<th align="left">默认值</th>
</tr>
</thead>
<tbody><tr>
<td align="left">eureka.client.enabled</td>
<td align="left">是否启用Eureka Client</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">eureka.client.register-with-eureka</td>
<td align="left">表示是否将自己注册到Eureka Server</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">eureka.client.fetch-registry</td>
<td align="left">表示是否从Eureka Server获取注册的服务信息</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">eureka.client.serviceUrl.defaultZone</td>
<td align="left">配置Eureka Server地址，用于注册服务和获取服务</td>
<td align="left"><a href="http://localhost:8761/eureka">http://localhost:8761/eureka</a></td>
</tr>
<tr>
<td align="left">eureka.client.registry-fetch-interval-seconds</td>
<td align="left">默认值为30秒，即每30秒去Eureka Server上获取服务并缓存</td>
<td align="left">30</td>
</tr>
<tr>
<td align="left">eureka.instance.lease-renewal-interval-in-seconds</td>
<td align="left">向Eureka Server发送心跳的间隔时间，单位为秒，用于服务续约</td>
<td align="left">30</td>
</tr>
<tr>
<td align="left">eureka.instance.lease-expiration-duration-in-seconds</td>
<td align="left">定义服务失效时间，即Eureka Server检测到Eureka Client木有心跳后（客户端意外下线）多少秒将其剔除</td>
<td align="left">90</td>
</tr>
<tr>
<td align="left">eureka.server.enable-self-preservation</td>
<td align="left">用于开启Eureka Server自我保护功能</td>
<td align="left">true</td>
</tr>
<tr>
<td align="left">eureka.client.instance-info-replication-interval-seconds</td>
<td align="left">更新实例信息的变化到Eureka服务端的间隔时间，单位为秒</td>
<td align="left">30</td>
</tr>
<tr>
<td align="left">eureka.client.eureka-service-url-poll-interval-seconds</td>
<td align="left">轮询Eureka服务端地址更改的间隔时间，单位为秒。</td>
<td align="left">300</td>
</tr>
<tr>
<td align="left">eureka.instance.prefer-ip-address</td>
<td align="left">表示使用IP进行配置为不是域名</td>
<td align="left">false</td>
</tr>
<tr>
<td align="left">eureka.client.healthcheck.enabled</td>
<td align="left">默认Erueka Server是通过心跳来检测Eureka Client的健康状况的，通过置为true改变Eeureka Server对客户端健康检测的方式，改用Actuator的/health端点来检测。</td>
<td align="left">false</td>
</tr>
</tbody></table>
<p>Eureka还有许多别的配置，具体可以参考<code>EurekaClientConfigBean</code>，<code>EurekaServerConfigBean</code>和<code>EurekaInstanceConfigBean</code>配置类的源码。</p>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Spring Cloud Netflix: <a href="https://cloud.spring.io/spring-cloud-netflix/reference/html/#service-discovery-eureka-clients">https://cloud.spring.io/spring-cloud-netflix/reference/html/#service-discovery-eureka-clients</a></p>
]]></content>
      <categories>
        <category>Spring Cloud Netflix</category>
      </categories>
      <tags>
        <tag>Eureka</tag>
        <tag>Spring Cloud Netflix</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis基础总结</title>
    <url>/2021/03/09/Redis%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>
<h1 id="Redis基本数据类型"><a href="#Redis基本数据类型" class="headerlink" title="Redis基本数据类型"></a>Redis基本数据类型</h1><ol>
<li><strong>字符串</strong>：redis没有直接使用C语言传统的字符串表示，而是自己实现的叫做简单动态字符串SDS的抽象类型。C语言的字符串不记录自身的长度信息，而SDS则保存了长度信息，这样将获取字符串长度的时间由O(N)降低到了O(1)，同时可以避免缓冲区溢出和减少修改字符串长度时所需的内存重分配次数。</li>
<li><strong>链表linkedlist</strong>：redis链表是一个双向无环链表结构，很多发布订阅、慢查询、监视器功能都是使用到了链表来实现，每个链表的节点由一个listNode结构来表示，每个节点都有指向前置节点和后置节点的指针，同时表头节点的前置和后置节点都指向NULL。</li>
<li><strong>字典hashtable</strong>：用于保存键值对的抽象数据结构。redis使用hash表作为底层实现，每个字典带有两个hash表，供平时使用和rehash时使用，hash表使用链地址法来解决键冲突，被分配到同一个索引位置的多个键值对会形成一个单向链表，在对hash表进行扩容或者缩容的时候，为了服务的可用性，rehash的过程不是一次性完成的，而是渐进式的。</li>
<li><strong>跳跃表skiplist</strong>：跳跃表是有序集合的底层实现之一，redis中在实现有序集合键和集群节点的内部结构中都是用到了跳跃表。redis跳跃表由zskiplist和zskiplistNode组成，zskiplist用于保存跳跃表信息（表头、表尾节点、长度等），zskiplistNode用于表示表跳跃节点，每个跳跃表的层高都是1-32的随机数，在同一个跳跃表中，多个节点可以包含相同的分值，但是每个节点的成员对象必须是唯一的，节点按照分值大小排序，如果分值相同，则按照成员对象的大小排序。</li>
<li><strong>整数集合intset</strong>：用于保存整数值的集合抽象数据结构，不会出现重复元素，底层实现为数组。</li>
<li><strong>压缩列表ziplist</strong>：压缩列表是为节约内存而开发的顺序性数据结构，他可以包含多个节点，每个节点可以保存一个字节数组或者整数值。</li>
</ol>
<p>基于这些基础的数据结构，redis封装了自己的对象系统，包含字符串对象string、列表对象list、哈希对象hash、集合对象set、有序集合对象zset，每种对象都用到了至少一种基础的数据结构。</p>
<p>redis通过encoding属性设置对象的编码形式来提升灵活性和效率，基于不同的场景redis会自动做出优化。不同对象的编码如下：</p>
<p>字符串对象string：int整数、embstr编码的简单动态字符串、raw简单动态字符串</p>
<ul>
<li>列表对象list：ziplist、linkedlist</li>
<li>哈希对象hash：ziplist、hashtable</li>
<li>集合对象set：intset、hashtable</li>
<li>有序集合对象zset：ziplist、skiplist</li>
</ul>
<h1 id="Redis为什么快呢？"><a href="#Redis为什么快呢？" class="headerlink" title="Redis为什么快呢？"></a>Redis为什么快呢？</h1><p>redis的速度非常的快，单机的redis就可以支撑每秒10几万的并发，相对于mysql来说，性能是mysql的几十倍。速度快的原因主要有几点：</p>
<ol>
<li>完全基于内存操作</li>
<li>C语言实现，优化过的数据结构，基于几种基础的数据结构，redis做了大量的优化，性能极高</li>
<li>使用单线程，无上下文的切换成本</li>
<li>基于非阻塞的IO多路复用机制</li>
</ol>
<h1 id="Redis6-0之后又改用多线程呢"><a href="#Redis6-0之后又改用多线程呢" class="headerlink" title="Redis6.0之后又改用多线程呢?"></a>Redis6.0之后又改用多线程呢?</h1><p>redis使用多线程并非是完全摒弃单线程，redis还是使用单线程模型来处理客户端的请求，只是使用多线程来处理数据的读写和协议解析，执行命令还是使用单线程。</p>
<p>这样做的目的是因为redis的性能瓶颈在于网络IO而非CPU，使用多线程能提升IO读写的效率，从而整体提高redis的性能。</p>
<h1 id="知道什么是热key吗？热key问题怎么解决？"><a href="#知道什么是热key吗？热key问题怎么解决？" class="headerlink" title="知道什么是热key吗？热key问题怎么解决？"></a>知道什么是热key吗？热key问题怎么解决？</h1><p>所谓热key问题就是，突然有几十万的请求去访问redis上的某个特定key，那么这样会造成流量过于集中，达到物理网卡上限，从而导致这台redis的服务器宕机引发雪崩。<br><img src="https://img-blog.csdnimg.cn/20201029224313564.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>针对热key的解决方案：</p>
<ol>
<li>提前把热key打散到不同的服务器，降低压力</li>
<li>加入二级缓存，提前加载热key数据到内存中，如果redis宕机，走内存查询</li>
</ol>
<h1 id="缓存击穿、缓存穿透、缓存雪崩"><a href="#缓存击穿、缓存穿透、缓存雪崩" class="headerlink" title="缓存击穿、缓存穿透、缓存雪崩"></a>缓存击穿、缓存穿透、缓存雪崩</h1><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><p>缓存击穿的概念就是单个key并发访问过高，过期时导致所有请求直接打到db上，这个和热key的问题比较类似，只是说的点在于过期导致请求全部打到DB上而已。</p>
<p>解决方案：</p>
<ol>
<li>加锁更新，比如请求查询A，发现缓存中没有，对A这个key加锁，同时去数据库查询数据，写入缓存，再返回给用户，这样后面的请求就可以从缓存中拿到数据了。</li>
<li>将过期时间组合写在value中，通过异步的方式不断的刷新过期时间，防止此类现象。</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/2020102922440658.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p>缓存穿透是指查询不存在缓存中的数据，每次请求都会打到DB，就像缓存不存在一样。<br><img src="https://img-blog.csdnimg.cn/20201029224432785.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>针对这个问题，加一层布隆过滤器。布隆过滤器的原理是在你存入数据的时候，会通过散列函数将它映射为一个位数组中的K个点，同时把他们置为1。</p>
<p>这样当用户再次来查询A，而A在布隆过滤器值为0，直接返回，就不会产生击穿请求打到DB了。</p>
<p>显然，使用布隆过滤器之后会有一个问题就是误判，因为它本身是一个数组，可能会有多个值落到同一个位置，那么理论上来说只要我们的数组长度够长，误判的概率就会越低，这种问题就根据实际情况来就好了。<br><img src="https://img-blog.csdnimg.cn/20201029224445342.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><p>当某一时刻发生大规模的缓存失效的情况，比如你的缓存服务宕机了，会有大量的请求进来直接打到DB上，这样可能导致整个系统的崩溃，称为雪崩。雪崩和击穿、热key的问题不太一样的是，他是指大规模的缓存都过期失效了。<br><img src="https://img-blog.csdnimg.cn/20201029224504281.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>针对雪崩几个解决方案：</p>
<ol>
<li>针对不同key设置不同的过期时间，避免同时过期</li>
<li>限流，如果redis宕机，可以限流，避免同时刻大量请求打崩DB</li>
<li>二级缓存，同热key的方案。</li>
</ol>
<h1 id="Redis的过期策略"><a href="#Redis的过期策略" class="headerlink" title="Redis的过期策略"></a>Redis的过期策略</h1><h2 id="惰性删除"><a href="#惰性删除" class="headerlink" title="惰性删除"></a>惰性删除</h2><p>惰性删除指的是当我们查询key的时候才对key进行检测，如果已经达到过期时间，则删除。显然，他有一个缺点就是如果这些过期的key没有被访问，那么他就一直无法被删除，而且一直占用内存。<br><img src="https://img-blog.csdnimg.cn/20201029224542974.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h2><p>定期删除指的是redis每隔一段时间对数据库做一次检查，删除里面的过期key。由于不可能对所有key去做轮询来删除，所以redis会每次随机取一些key去做检查和删除。</p>
<h3 id="那么定期-惰性都没有删除过期的key怎么办？"><a href="#那么定期-惰性都没有删除过期的key怎么办？" class="headerlink" title="那么定期+惰性都没有删除过期的key怎么办？"></a>那么定期+惰性都没有删除过期的key怎么办？</h3><p>假设redis每次定期随机查询key的时候没有删掉，这些key也没有做查询的话，就会导致这些key一直保存在redis里面无法被删除，这时候就会走到redis的内存淘汰机制。</p>
<ol>
<li>volatile-lru：从已设置过期时间的key中，移出最近最少使用的key进行淘汰</li>
<li>volatile-ttl：从已设置过期时间的key中，移出将要过期的key</li>
<li>volatile-random：从已设置过期时间的key中随机选择key淘汰</li>
<li>allkeys-lru：从key中选择最近最少使用的进行淘汰</li>
<li>allkeys-random：从key中随机选择key进行淘汰</li>
<li>noeviction：当内存达到阈值的时候，新写入操作报错</li>
</ol>
<h1 id="持久化方式有哪些？有什么区别？"><a href="#持久化方式有哪些？有什么区别？" class="headerlink" title="持久化方式有哪些？有什么区别？"></a>持久化方式有哪些？有什么区别？</h1><h2 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h2><p>RDB持久化可以手动执行也可以根据配置定期执行，它的作用是将某个时间点上的数据库状态保存到RDB文件中，RDB文件是一个压缩的二进制文件，通过它可以还原某个时刻数据库的状态。由于RDB文件是保存在硬盘上的，所以即使redis崩溃或者退出，只要RDB文件存在，就可以用它来恢复还原数据库的状态。</p>
<p>可以通过SAVE或者BGSAVE来生成RDB文件。</p>
<p>SAVE命令会阻塞redis进程，直到RDB文件生成完毕，在进程阻塞期间，redis不能处理任何命令请求，这显然是不合适的。</p>
<p>BGSAVE则是会fork出一个子进程，然后由子进程去负责生成RDB文件，父进程还可以继续处理命令请求，不会阻塞进程。</p>
<h2 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h2><p>AOF和RDB不同，AOF是通过保存redis服务器所执行的写命令来记录数据库状态的。</p>
<p>AOF通过追加、写入、同步三个步骤来实现持久化机制。</p>
<ol>
<li>当AOF持久化处于激活状态，服务器执行完写命令之后，写命令将会被追加append到aof_buf缓冲区的末尾</li>
<li>在服务器每结束一个事件循环之前，将会调用flushAppendOnlyFile函数决定是否要将aof_buf的内容保存到AOF文件中，可以通过配置appendfsync来决定。</li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">always ##aof_buf内容写入并同步到AOF文件</span><br><span class="line">everysec ##将aof_buf中内容写入到AOF文件，如果上次同步AOF文件时间距离现在超过<span class="number">1</span>秒，则再次对AOF文件进行同步</span><br><span class="line">no ##将aof_buf内容写入AOF文件，但是并不对AOF文件进行同步，同步时间由操作系统决定</span><br></pre></td></tr></table></figure>

<p>如果不设置，默认选项将会是everysec，因为always来说虽然最安全（只会丢失一次事件循环的写命令），但是性能较差，而everysec模式只不过会可能丢失1秒钟的数据，而no模式的效率和everysec相仿，但是会丢失上次同步AOF文件之后的所有写命令数据。</p>
<h1 id="怎么实现Redis的高可用？"><a href="#怎么实现Redis的高可用？" class="headerlink" title="怎么实现Redis的高可用？"></a>怎么实现Redis的高可用？</h1><p>要想实现高可用，一台机器肯定是不够的，而redis要保证高可用，有2个可选方案。</p>
<h2 id="主从架构"><a href="#主从架构" class="headerlink" title="主从架构"></a>主从架构</h2><p>主从模式是最简单的实现高可用的方案，核心就是主从同步。主从同步的原理如下：</p>
<ol>
<li>slave发送sync命令到master</li>
<li>master收到sync之后，执行bgsave，生成RDB全量文件</li>
<li>master把slave的写命令记录到缓存</li>
<li>bgsave执行完毕之后，发送RDB文件到slave，slave执行</li>
<li>master发送缓存中的写命令到slave，slave执行</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20201029224749909.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>这里我写的这个命令是sync，但是在redis2.8版本之后已经使用psync来替代sync了，原因是sync命令非常消耗系统资源，而psync的效率更高。</p>
<h2 id="哨兵"><a href="#哨兵" class="headerlink" title="哨兵"></a>哨兵</h2><p>基于主从方案的缺点还是很明显的，假设master宕机，那么就不能写入数据，那么slave也就失去了作用，整个架构就不可用了，除非你手动切换，主要原因就是因为没有自动故障转移机制。而哨兵(sentinel)的功能比单纯的主从架构全面的多了，它具备自动故障转移、集群监控、消息通知等功能。<br><img src="https://img-blog.csdnimg.cn/20201029224813542.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br>哨兵可以同时监视多个主从服务器，并且在被监视的master下线时，自动将某个slave提升为master，然后由新的master继续接收命令。整个过程如下：</p>
<ol>
<li>初始化sentinel，将普通的redis代码替换成sentinel专用代码</li>
<li>初始化masters字典和服务器信息，服务器信息主要保存ip:port，并记录实例的地址和ID</li>
<li>创建和master的两个连接，命令连接和订阅连接，并且订阅sentinel:hello频道</li>
<li>每隔10秒向master发送info命令，获取master和它下面所有slave的当前信息</li>
<li>当发现master有新的slave之后，sentinel和新的slave同样建立两个连接，同时每个10秒发送info命令，更新master信息</li>
<li>sentinel每隔1秒向所有服务器发送ping命令，如果某台服务器在配置的响应时间内连续返回无效回复，将会被标记为下线状态</li>
<li>选举出领头sentinel，领头sentinel需要半数以上的sentinel同意</li>
<li>领头sentinel从已下线的的master所有slave中挑选一个，将其转换为master</li>
<li>让所有的slave改为从新的master复制数据</li>
<li>将原来的master设置为新的master的从服务器，当原来master重新回复连接时，就变成了新master的从服务器</li>
</ol>
<p>sentinel会每隔1秒向所有实例（包括主从服务器和其他sentinel）发送ping命令，并且根据回复判断是否已经下线，这种方式叫做主观下线。当判断为主观下线时，就会向其他监视的sentinel询问，如果超过半数的投票认为已经是下线状态，则会标记为客观下线状态，同时触发故障转移。</p>
<h1 id="redis集群的原理吗"><a href="#redis集群的原理吗" class="headerlink" title="redis集群的原理吗"></a>redis集群的原理吗</h1><p>如果说依靠哨兵可以实现redis的高可用，如果还想在支持高并发同时容纳海量的数据，那就需要redis集群。redis集群是redis提供的分布式数据存储方案，集群通过数据分片sharding来进行数据的共享，同时提供复制和故障转移的功能。</p>
<h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>一个redis集群由多个节点node组成，而多个node之间通过cluster meet命令来进行连接，节点的握手过程：</p>
<ol>
<li>节点A收到客户端的cluster meet命令</li>
<li>A根据收到的IP地址和端口号，向B发送一条meet消息</li>
<li>节点B收到meet消息返回pong</li>
<li>A知道B收到了meet消息，返回一条ping消息，握手成功</li>
<li>最后，节点A将会通过gossip协议把节点B的信息传播给集群中的其他节点，其他节点也将和B进行握手</li>
</ol>
<p><img src="https://img-blog.csdnimg.cn/20201029224955639.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h2 id="槽slot"><a href="#槽slot" class="headerlink" title="槽slot"></a>槽slot</h2><p>redis通过集群分片的形式来保存数据，整个集群数据库被分为16384个slot，集群中的每个节点可以处理0-16384个slot，当数据库16384个slot都有节点在处理时，集群处于上线状态，反之只要有一个slot没有得到处理都会处理下线状态。通过cluster addslots命令可以将slot指派给对应节点处理。</p>
<p>slot是一个位数组，数组的长度是16384/8=2048，而数组的每一位用1表示被节点处理，0表示不处理，如图所示的话表示A节点处理0-7的slot。</p>
<p><img src="https://img-blog.csdnimg.cn/20201029225013195.png#pic_center"><br>当客户端向节点发送命令，如果刚好找到slot属于当前节点，那么节点就执行命令，反之，则会返回一个MOVED命令到客户端指引客户端转向正确的节点。（MOVED过程是自动的）<img src="https://img-blog.csdnimg.cn/20201029225022307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="在这里插入图片描述"><br>如果增加或者移出节点，对于slot的重新分配也是非常方便的，redis提供了工具帮助实现slot的迁移，整个过程是完全在线的，不需要停止服务。</p>
<h2 id="故障转移"><a href="#故障转移" class="headerlink" title="故障转移"></a>故障转移</h2><p>如果节点A向节点B发送ping消息，节点B没有在规定的时间内响应pong，那么节点A会标记节点B为pfail疑似下线状态，同时把B的状态通过消息的形式发送给其他节点，如果超过半数以上的节点都标记B为pfail状态，B就会被标记为fail下线状态，此时将会发生故障转移，优先从复制数据较多的从节点选择一个成为主节点，并且接管下线节点的slot，整个过程和哨兵非常类似，都是基于Raft协议做选举。</p>
<h1 id="Redis事务机制"><a href="#Redis事务机制" class="headerlink" title="Redis事务机制"></a>Redis事务机制</h1><p>redis通过MULTI、EXEC、WATCH等命令来实现事务机制，事务执行过程将一系列多个命令按照顺序一次性执行，并且在执行期间，事务不会被中断，也不会去执行客户端的其他请求，直到所有命令执行完毕。事务的执行过程如下：</p>
<ol>
<li>服务端收到客户端请求，事务以MULTI开始</li>
<li>如果客户端正处于事务状态，则会把事务放入队列同时返回给客户端QUEUED，反之则直接执行这个命令</li>
<li>当收到客户端EXEC命令时，WATCH命令监视整个事务中的key是否有被修改，如果有则返回空回复到客户端表示失败，否则redis会遍历整个事务队列，执行队列中保存的所有命令，最后返回结果给客户端</li>
<li>WATCH的机制本身是一个CAS的机制，被监视的key会被保存到一个链表中，如果某个key被修改，那么REDIS_DIRTY_CAS标志将会被打开，这时服务器会拒绝执行事务。</li>
</ol>
]]></content>
      <categories>
        <category>Redis</category>
      </categories>
      <tags>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>高并发下缓存与数据库双写不一致解决方案</title>
    <url>/2021/03/09/%E9%AB%98%E5%B9%B6%E5%8F%91%E4%B8%8B%E7%BC%93%E5%AD%98%E4%B8%8E%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8F%8C%E5%86%99%E4%B8%8D%E4%B8%80%E8%87%B4%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>

<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><p>在高并发场景下，数据库和缓存双写不一致情况，我们可以当写入数据库后删除缓存，当查的时候先查缓存，如果缓存为空再查数据库，最后写入缓存，但是这样还是存在一个问题。</p>
<p><img src="https://files.mdnice.com/user/10819/27642055-05b9-4258-bb15-d0d5f845daa7.png"></p>
<p>如图所示，当出现这种情况时该方案就会出现问题，线程2阻塞一段时间后，又把stock=9有更新到缓存中，而数据库中的stock=10，下一次查时，会查到缓存中的stock=9</p>
<h1 id="方案优化"><a href="#方案优化" class="headerlink" title="方案优化"></a>方案优化</h1><p>对于这种问题，如果业务场景对数据一致性没有那么高，我们可以在更新缓存时设置一个过期时间，过期之后缓存也就不存在了，还有一种我们可以使用延迟双删方案。</p>
<p><img src="https://files.mdnice.com/user/10819/3b5f336d-183b-4d04-8845-3c3b1e25a923.png"></p>
<p>间隔的n秒没有统一的标准，完全看个人的经验，所以这种方案还是存在问题。最佳解决方案时使用分布式锁。</p>
<p>我们可以使用redis读锁和写锁。我们使用redisson实现分布式锁。</p>
<h1 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h1><h2 id="注入RedissonClient对象"><a href="#注入RedissonClient对象" class="headerlink" title="注入RedissonClient对象"></a>注入RedissonClient对象</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> RedissonClient <span class="title">redissonClient</span><span class="params">()</span></span>&#123;</span><br><span class="line">    Config config = <span class="keyword">new</span> Config();</span><br><span class="line">    config.useSingleServer().setAddress(<span class="string">&quot;redis://127.0.0.1:6379&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="读锁请求"><a href="#读锁请求" class="headerlink" title="读锁请求"></a>读锁请求</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;read&quot;)</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> String <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">       RReadWriteLock readWriteLock = redissonClient.getReadWriteLock(RedisConstant.READ_WRITE_LOCK);</span><br><span class="line">       <span class="comment">//读之前加读锁，读锁的作用就是等待该lockkey释放写锁以后再读</span></span><br><span class="line">       RLock rLock = readWriteLock.readLock();</span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           rLock.lock();</span><br><span class="line">           String uuid = redisTemplate.opsForValue().get(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line">           <span class="keyword">return</span> uuid;</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">           rLock.unlock();</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h2 id="写锁请求"><a href="#写锁请求" class="headerlink" title="写锁请求"></a>写锁请求</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;write&quot;)</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">write</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">      RReadWriteLock readWriteLock = redissonClient.getReadWriteLock(RedisConstant.READ_WRITE_LOCK);</span><br><span class="line">      <span class="comment">//写之前加写锁，写锁加锁成功，读锁只能等待</span></span><br><span class="line">      RLock rLock = readWriteLock.writeLock();</span><br><span class="line">      String s = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          rLock.lock();</span><br><span class="line">           s = UUID.randomUUID().toString();</span><br><span class="line">          Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">          redisTemplate.opsForValue().set(<span class="string">&quot;uuid&quot;</span>,s);</span><br><span class="line">      &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">          rLock.unlock();</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> s;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>
<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Redisson GitHub: <a href="https://github.com/redisson/redisson">https://github.com/redisson/redisson</a><br>[2] Redisson中文文档: <a href="https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95">https://github.com/redisson/redisson/wiki/%E7%9B%AE%E5%BD%95</a></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>分布式锁</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js安装及相关配置</title>
    <url>/2021/03/08/Node.js%E5%AE%89%E8%A3%85%E5%8F%8A%E7%9B%B8%E5%85%B3%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>Node.js安装、设置国内淘宝镜像、安装yarn等</p>
<span id="more"></span>

<p>在安装完nodejs后，通过npm下载全局模块默认安装到<code>&#123;%USERDATA%&#125;C:\Users\username\AppData\</code>下的<code>Roaming\npm</code>下，这当然是不太对的默认。</p>
<h1 id="npm模块安装路径配置"><a href="#npm模块安装路径配置" class="headerlink" title="npm模块安装路径配置"></a>npm模块安装路径配置</h1><p>不推荐Node.js安装在c盘<br>安装LTS版本的nodejs，nodejs安装路径会自动添加到PATH环境变量；<br>本文安装路径为：<code>D:\Applications\nodejs</code></p>
<h2 id="在nodejs安装目录下创建一个node-cache文件夹"><a href="#在nodejs安装目录下创建一个node-cache文件夹" class="headerlink" title="在nodejs安装目录下创建一个node_cache文件夹"></a>在nodejs安装目录下创建一个node_cache文件夹</h2><p>node_modules在nodejs安装后会自动创建<br>注意：设置完npm插件的安装路径后，会在你设置的路径下自动创建一个node_modules文件夹来存储插件<br>缓存路径为创建的node_cache文件夹</p>
<h2 id="运行以下两条cmd命令"><a href="#运行以下两条cmd命令" class="headerlink" title="运行以下两条cmd命令"></a>运行以下两条cmd命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Applications\nodejs\node_global&quot;</span>　　//全局模块插件存放路径</span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Applications\nodejs\node_cache&quot;</span>　　//缓存路径 warn:路径中不能包含空格否则npx使用不了</span><br></pre></td></tr></table></figure>

<p>设置完成后，我们可以通过<code>npm config list</code>来查看npm的配置</p>
<h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p>环境变量必须配置，否则npm模块插件无法运行</p>
<p>将下面两个路径添加至环境变量</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">D:\Applications\nodejs</span><br><span class="line">D:\Applications\nodejs\node_global</span><br></pre></td></tr></table></figure>

<h1 id="npm使用淘宝的镜像"><a href="#npm使用淘宝的镜像" class="headerlink" title="npm使用淘宝的镜像"></a>npm使用淘宝的镜像</h1><h2 id="安装淘宝的cnpm，然后在使用时直接将npm命令替换成cnpm命令即可"><a href="#安装淘宝的cnpm，然后在使用时直接将npm命令替换成cnpm命令即可" class="headerlink" title="安装淘宝的cnpm，然后在使用时直接将npm命令替换成cnpm命令即可"></a>安装淘宝的cnpm，然后在使用时直接将npm命令替换成cnpm命令即可</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h2 id="修改默认的仓库地址"><a href="#修改默认的仓库地址" class="headerlink" title="修改默认的仓库地址"></a>修改默认的仓库地址</h2><p>npm的默认地址是 <code>https://registry.npmjs.org/</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm config get registry // 查看npm的仓库地址</span><br><span class="line">npm config <span class="built_in">set</span> registry https://registry.npm.taobao.org // 修改默认的仓库地址</span><br></pre></td></tr></table></figure>

<h1 id="安装yarn"><a href="#安装yarn" class="headerlink" title="安装yarn"></a>安装yarn</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install -g yarn</span><br><span class="line">// 查看版本号</span><br><span class="line">yarn --version</span><br><span class="line">// 设置yarn国内淘宝镜像</span><br><span class="line">yarn config <span class="built_in">set</span> registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<h1 id="安装Vue-CLI"><a href="#安装Vue-CLI" class="headerlink" title="安装Vue CLI"></a>安装Vue CLI</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 全局安装</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">// 查看版本号</span><br><span class="line">vue --version</span><br></pre></td></tr></table></figure>

<h1 id="创建uni-app项目"><a href="#创建uni-app项目" class="headerlink" title="创建uni-app项目"></a>创建uni-app项目</h1><h2 id="通过vue-cli命令行"><a href="#通过vue-cli命令行" class="headerlink" title="通过vue-cli命令行"></a>通过vue-cli命令行</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">// 先全局安装vue cli</span><br><span class="line">npm install -g @vue/cli</span><br><span class="line">// 创建项目</span><br><span class="line">vue create -p dcloudio/uni-preset-vue my-project</span><br></pre></td></tr></table></figure>

<h2 id="运行、发布uni-app"><a href="#运行、发布uni-app" class="headerlink" title="运行、发布uni-app"></a>运行、发布uni-app</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm run dev:%PLATFORM%</span><br><span class="line">npm run build:%PLATFORM%</span><br></pre></td></tr></table></figure>

<p><code>%PLATFORM%</code> 可取值如下：</p>
<table>
<thead>
<tr>
<th align="left">值</th>
<th align="left">平台</th>
</tr>
</thead>
<tbody><tr>
<td align="left">app-plus</td>
<td align="left">app平台生成打包资源（支持npm run build:app-plus，可用于持续集成。不支持run，运行调试仍需在HBuilderX中操作）</td>
</tr>
<tr>
<td align="left">h5</td>
<td align="left">H5</td>
</tr>
<tr>
<td align="left">mp-alipay</td>
<td align="left">支付宝小程序</td>
</tr>
<tr>
<td align="left">mp-baidu</td>
<td align="left">百度小程序</td>
</tr>
<tr>
<td align="left">mp-weixin</td>
<td align="left">微信小程序</td>
</tr>
<tr>
<td align="left">mp-toutiao</td>
<td align="left">字节跳动小程序</td>
</tr>
<tr>
<td align="left">mp-qq</td>
<td align="left">qq 小程序</td>
</tr>
<tr>
<td align="left">mp-360</td>
<td align="left">360 小程序</td>
</tr>
<tr>
<td align="left">quickapp-webview</td>
<td align="left">快应用(webview)</td>
</tr>
<tr>
<td align="left">quickapp-webview-union</td>
<td align="left">快应用联盟</td>
</tr>
<tr>
<td align="left">quickapp-webview-huawei</td>
<td align="left">快应用华为</td>
</tr>
</tbody></table>
<h1 id="可能出现的报错"><a href="#可能出现的报错" class="headerlink" title="可能出现的报错"></a>可能出现的报错</h1><h2 id="错误描述"><a href="#错误描述" class="headerlink" title="错误描述"></a>错误描述</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">yarn : 无法将“yarn”项识别为 cmdlet、函数、脚本文件或可运行程序的名称。请检查名称的拼写，如果包括路径，请确保路径正确</span><br><span class="line">，然后再试一次。</span><br><span class="line">所在位置 行:1 字符: 1</span><br><span class="line">+ yarn --version</span><br><span class="line">+ ~~~~</span><br><span class="line">    + CategoryInfo          : ObjectNotFound: (yarn:String) [], CommandNotFoundException</span><br><span class="line">    + FullyQualifiedErrorId : CommandNotFoundException</span><br></pre></td></tr></table></figure>

<h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><ol>
<li>以管理员身份运行PowerShell</li>
<li>执行：<code>get-ExecutionPolicy</code>，显示<code>Restricted</code>，表示状态是禁止的</li>
<li>执行：<code>set-ExecutionPolicy RemoteSigned</code></li>
<li>这时再执行<code>get-ExecutionPolicy</code>，就显示<code>RemoteSigned</code></li>
</ol>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Node.js</tag>
        <tag>npm</tag>
      </tags>
  </entry>
  <entry>
    <title>CSS flex弹性盒模型基础</title>
    <url>/2021/03/08/CSS-flex%E5%BC%B9%E6%80%A7%E7%9B%92%E6%A8%A1%E5%9E%8B%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>2009年，W3C 提出了一种新的方案—-Flex 布局，可以简便、完整、响应式地实现各种页面布局。目前，它已经得到了所有浏览器的支持，这意味着，现在就能很安全地使用这项功能。</p>
<span id="more"></span>
<p><img src="https://files.mdnice.com/user/10819/4a4e3c96-6353-4ab3-aa12-fed3a9584052.png"></p>
<h1 id="Flex-布局是什么？"><a href="#Flex-布局是什么？" class="headerlink" title="Flex 布局是什么？"></a>Flex 布局是什么？</h1><p>Flex 是 Flexible Box 的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。</p>
<p>任何一个容器都可以指定为 Flex 布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>行内元素也可以使用 Flex 布局。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: inline-flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Webkit 内核的浏览器，必须加上<code>-webkit</code>前缀。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-flex; <span class="comment">/* Safari */</span></span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>注意，设为 Flex 布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。</p>
<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><p>采用 Flex 布局的元素，称为 Flex 容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为 Flex 项目（flex item），简称”项目”。</p>
<p><img src="https://files.mdnice.com/user/10819/3bbb7787-ffe9-406c-bfeb-cdb711c6890c.png"></p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p>
<p>项目默认沿主轴排列。单个项目占据的主轴空间叫做<code>main size</code>，占据的交叉轴空间叫做<code>cross size</code>。</p>
<h1 id="容器的属性"><a href="#容器的属性" class="headerlink" title="容器的属性"></a>容器的属性</h1><p>以下6个属性设置在容器上。</p>
<ul>
<li><p>flex-direction</p>
</li>
<li><p>flex-wrap</p>
</li>
<li><p>flex-flow</p>
</li>
<li><p>justify-content</p>
</li>
<li><p>align-items</p>
</li>
<li><p>align-content</p>
</li>
</ul>
<h2 id="flex-direction属性"><a href="#flex-direction属性" class="headerlink" title="flex-direction属性"></a>flex-direction属性</h2><p><code>flex-direction</code>属性决定主轴的方向（即项目的排列方向）。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/624adf79-f1d3-4766-8f42-14eed90a83af.png"></p>
<p>它可能有4个值。</p>
<ul>
<li><p><code>row</code>（默认值）：主轴为水平方向，起点在左端。</p>
</li>
<li><p><code>row-reverse</code>：主轴为水平方向，起点在右端。</p>
</li>
<li><p><code>column</code>：主轴为垂直方向，起点在上沿。</p>
</li>
<li><p><code>column-reverse</code>：主轴为垂直方向，起点在下沿。</p>
</li>
</ul>
<h2 id="flex-wrap属性"><a href="#flex-wrap属性" class="headerlink" title="flex-wrap属性"></a>flex-wrap属性</h2><p>默认情况下，项目都排在一条线（又称”轴线”）上。<code>flex-wrap</code>属性定义，如果一条轴线排不下，如何换行。</p>
<p><img src="https://files.mdnice.com/user/10819/2fb82e86-7375-40f3-bfbe-acf396ff8009.png"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可能取三个值。</p>
<p>（1）<code>nowrap</code>（默认）：不换行。</p>
<p><img src="https://files.mdnice.com/user/10819/21e0acd1-d6e4-4d9f-b8e9-8d371d101d7a.png"></p>
<p>（2）<code>wrap</code>：换行，第一行在上方。</p>
<p><img src="https://files.mdnice.com/user/10819/93e92b23-a43e-4a1f-bcca-fc91fa57fc10.png"></p>
<p>（3）<code>wrap-reverse</code>：换行，第一行在下方。</p>
<p><img src="https://files.mdnice.com/user/10819/e78a207a-e594-4e0d-9c79-d5c901b2cfad.png"></p>
<h2 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h2><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: &lt;flex-direction&gt; || &lt;flex-wrap&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="justify-content属性"><a href="#justify-content属性" class="headerlink" title="justify-content属性"></a>justify-content属性</h2><p><code>justify-content</code>属性定义了项目在主轴上的对齐方式。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右。</p>
<ul>
<li><code>flex-start</code>（默认值）：左对齐</li>
<li><code>flex-end</code>：右对齐</li>
<li><code>center</code>： 居中</li>
<li><code>space-between</code>：两端对齐，项目之间的间隔都相等。</li>
<li><code>space-around</code>：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<h2 id="align-items属性"><a href="#align-items属性" class="headerlink" title="align-items属性"></a>align-items属性</h2><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/e9b98670-0a9f-4e19-bccc-a6fae7dd45cd.png"></p>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下。</p>
<ul>
<li><p><code>flex-start</code>：交叉轴的起点对齐。</p>
</li>
<li><p><code>flex-end</code>：交叉轴的终点对齐。</p>
</li>
<li><p><code>center</code>：交叉轴的中点对齐。</p>
</li>
<li><p><code>baseline</code>: 项目的第一行文字的基线对齐。</p>
</li>
<li><p><code>stretch</code>（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</p>
</li>
</ul>
<h2 id="align-content属性"><a href="#align-content属性" class="headerlink" title="align-content属性"></a>align-content属性</h2><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-content</span>: flex-start | flex-end | center | space-between | space-around | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/78efe830-9fff-41a4-85ae-76116cfd817f.png"></p>
<p>该属性可能取6个值。</p>
<ul>
<li><code>flex-start</code>：与交叉轴的起点对齐。</li>
<li><code>flex-end</code>：与交叉轴的终点对齐。</li>
<li><code>center</code>：与交叉轴的中点对齐。</li>
<li><code>space-between</code>：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li><code>space-around</code>：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li><code>stretch</code>（默认值）：轴线占满整个交叉轴。</li>
</ul>
<h1 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h1><p>以下6个属性设置在项目上。</p>
<ul>
<li><code>order</code></li>
<li><code>flex-grow</code></li>
<li><code>flex-shrink</code></li>
<li><code>flex-basis</code></li>
<li><code>flex</code></li>
<li><code>align-self</code></li>
</ul>
<h2 id="order属性"><a href="#order属性" class="headerlink" title="order属性"></a>order属性</h2><p><code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: &lt;integer&gt;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/3bed7ae0-534e-4e5a-bc3f-159fff3711d6.png"></p>
<h2 id="flex-grow属性"><a href="#flex-grow属性" class="headerlink" title="flex-grow属性"></a>flex-grow属性</h2><p><code>flex-grow</code>属性定义项目的放大比例，默认为<code>0</code>，即如果存在剩余空间，也不放大。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/a50cfc10-7b7f-468b-974f-391112468c25.png"></p>
<p>如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p>
<h2 id="flex-shrink属性"><a href="#flex-shrink属性" class="headerlink" title="flex-shrink属性"></a>flex-shrink属性</h2><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/ae7dbf48-da52-4236-83c1-937f4129ddf8.png"></p>
<p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。</p>
<p>负值对该属性无效。</p>
<h2 id="flex-basis属性"><a href="#flex-basis属性" class="headerlink" title="flex-basis属性"></a>flex-basis属性</h2><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p>
<h2 id="flex属性"><a href="#flex属性" class="headerlink" title="flex属性"></a>flex属性</h2><p><code>flex</code>属性是<code>flex-grow</code>, <code>flex-shrink</code> 和 <code>flex-basis</code>的简写，默认值为<code>0 1 auto</code>。后两个属性可选。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>该属性有两个快捷值：<code>auto</code> (<code>1 1 auto</code>) 和 none (<code>0 0 auto</code>)。</p>
<p>建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<h2 id="align-self属性"><a href="#align-self属性" class="headerlink" title="align-self属性"></a>align-self属性</h2><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/f82fdff4-17c6-435c-a22b-59ff87b89a2d.png"></p>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    * &#123;</span><br><span class="line"><span class="css">        <span class="comment">/*去除内边距和外边距*/</span></span></span><br><span class="line">        margin: 0;</span><br><span class="line">        padding: 0;</span><br><span class="line"><span class="css">        <span class="comment">/*让边框不占宽度和高度*/</span></span></span><br><span class="line">        box-sizing: border-box;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*声明弹性盒模型*/</span></span></span><br><span class="line">        display: flex;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span> <span class="selector-class">.menu</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="comment">/*高度撑满*/</span></span></span><br><span class="line">        height: 100vh;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-direction: column;</span><br><span class="line"><span class="css">        <span class="comment">/*menu宽度*/</span></span></span><br><span class="line">        width: 255px;</span><br><span class="line">        border: solid 1px rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span> <span class="selector-class">.menu</span> <span class="selector-class">.logo</span> &#123;</span></span><br><span class="line">        height: 40px;</span><br><span class="line">        border: solid 1px rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span> <span class="selector-class">.menu</span> <span class="selector-class">.nav</span> &#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        border: solid 1px rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-id">#app</span> <span class="selector-class">.home</span> &#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        display: flex;</span><br><span class="line"><span class="css">        <span class="comment">/*排列方向竖向*/</span></span></span><br><span class="line">        flex-direction: column;</span><br><span class="line">        height: 100vh;</span><br><span class="line">        border: solid 1px rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.home</span> <span class="selector-class">.head</span> &#123;</span></span><br><span class="line">        height: 40px;</span><br><span class="line">        display: flex;</span><br><span class="line">        border: solid 1px rebeccapurple;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.home</span> <span class="selector-class">.head</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 20px;</span><br><span class="line">        height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.home</span> <span class="selector-class">.main</span> &#123;</span></span><br><span class="line">        flex: 1;</span><br><span class="line">        display: flex;</span><br><span class="line">        flex-flow: row wrap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">    <span class="selector-class">.home</span> <span class="selector-class">.main</span> <span class="selector-class">.item</span> &#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 40px;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;logo&quot;</span>&gt;</span>logo<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;nav&quot;</span>&gt;</span>nav<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;head&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>9<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>flex</tag>
      </tags>
  </entry>
  <entry>
    <title>GOROOT GOPATH Go Modules三者的关系介绍</title>
    <url>/2021/03/08/GOROOT-GOPATH-Go-Modules%E4%B8%89%E8%80%85%E7%9A%84%E5%85%B3%E7%B3%BB%E4%BB%8B%E7%BB%8D/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<span id="more"></span>

<h1 id="GOROOT介绍"><a href="#GOROOT介绍" class="headerlink" title="GOROOT介绍"></a>GOROOT介绍</h1><p>在安装完Golang语言的时候，所谓的安装路径其实就是你的<code>GOROOT</code>路径，也就是说<code>GOROOT</code>存放的Golang语言内建的程式库的所在位置，而通常你安装完后，你电脑的环境变数就会设好<code>GOROOT</code>路径，当你开发Golang程式的时候，当你<code>import</code>内建的程式库的时候，并不需要额外安装，而当程式运行后，预设也会先去<code>GOROOT</code>路径下寻找相对应的程式库来运行。</p>
<h2 id="查看Glang环境变量"><a href="#查看Glang环境变量" class="headerlink" title="查看Glang环境变量"></a>查看Glang环境变量</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> env</span><br></pre></td></tr></table></figure>

<p><img src="https://img-blog.csdnimg.cn/20200924095034714.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="环境变量"><br><code>env</code>中有些是我已经修改过的，通常如果你是初次安装Golang语言并且没做什么环境变数设定的话，<code>GOROOT</code>设定路径就是你当初安装Golang语言的路径，而<code>GOPATH</code>通常预设会是使用者目录下的<code>go</code>资料夹。</p>
<h2 id="使用-go-run-执行某个文件"><a href="#使用-go-run-执行某个文件" class="headerlink" title="使用 go run 执行某个文件"></a>使用 go run 执行某个文件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;fmt&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	fmt.Println(<span class="string">&quot;hello world&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后再执行以下指令：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> run main.<span class="keyword">go</span></span><br></pre></td></tr></table></figure>

<p>就会成功输出<code>hello world</code>，<code>go run</code>其实会帮你将程式码进行编译并产生执行档，而编译档跟执行档事实上是存在一个暂存资料夹里面，当运行完此程式就会自动删除。该指令可以想成类似直译的方式运行，而不需要做其他任何环境设定，即可运行。</p>
<h2 id="引用第三方套件"><a href="#引用第三方套件" class="headerlink" title="引用第三方套件"></a>引用第三方套件</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	router := gin.Default()</span><br><span class="line">	router.Run()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>import</code>了一个<code>github.com/gin-gonic/gin</code>套件，这个是别人开发的Web Framework套件，是不存在于官方程式库的，而是放在GitHub上的第三方套件。</p>
<ul>
<li> 当执行Golang程式码，当需要存取套件时，会先去<code>GOROOT</code>路径下的<code>src</code>资料夹找同等于我们在程式码中<code>import</code>的路径下去找有没有<code>gin</code>这个资料夹，而这资料夹里面就是包含了所有有关于该套件的程式库。</li>
<li> 如果在<code>GOROOT</code>路径下没有找到，则会往<code>GOPATH</code>路径下的src资料夹找同等于我们在程式码中<code>import</code>的路径下去找有没有<code>gin</code>这个资料夹。</li>
</ul>
<p>所以只要<code>GOROOT</code>跟<code>GOPATH</code>路径下都没有找到该套件的话，就无法执行该程式码。</p>
<h1 id="GOPATH介绍"><a href="#GOPATH介绍" class="headerlink" title="GOPATH介绍"></a>GOPATH介绍</h1><p>根据上面GOROOT的介绍，我们可以知道官方的程式库所在位置就是在GOROOT里面，而GOPATH就是专门存放第三方套件以供我们程式码的需要。那通常开发Golang的话，通常会在重新设定GOPATH的位置。</p>
<h2 id="GOPATH目录"><a href="#GOPATH目录" class="headerlink" title="GOPATH目录"></a>GOPATH目录</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">bin</span><br><span class="line">pkg</span><br><span class="line">src</span><br></pre></td></tr></table></figure>

<p>依照Golang语言的惯例(强制)，GOPATH是指src路径的上一层，我们要在GOPATH路径下主动新增src资料夹，所谓src就是代表source code的意思，也就是放我们开发Golang程式码的相关专案的原始码。</p>
<h2 id="GOPATH的缺点"><a href="#GOPATH的缺点" class="headerlink" title="GOPATH的缺点"></a>GOPATH的缺点</h2><p>第三方套件只要不是官方程式库，都需要放置在<code>GOPATH/src</code>的路径下才可以使用。</p>
<p>go get最常用在当我们想用别人公开在GitHub上的套件，可以帮我们从网路上clone到<code>GOPATH/src</code>里面。虽然这样很方便，但是你会发现<code>GOPATH/src</code>下的程式码会很复杂，除了有你自己开发的专案资料夹，也包含其他第三方程式库的专案资料夹。</p>
<p>再来，如果你开发的专案采用第三方套件是不同版本怎么办？以往的解决方法是要设定多组不同的GOPATH。虽然社群也有开发相对应的<code>package manager</code>，如<code>Vendor</code>、<code>Dep</code>来解决该问题，但毕竟不是官方主导的。</p>
<h1 id="Go-Modules的诞生"><a href="#Go-Modules的诞生" class="headerlink" title="Go Modules的诞生"></a>Go Modules的诞生</h1><p>为了解决不被GOPATH的问题，因此官方在1.11开始推出了Go Modules的功能。Go Modules解决方式很像是Java看到Maven的做法，将第三方程式库储存在本地的空间，并且给程式去引用。</p>
<h2 id="设定GO111MODULE环境变数"><a href="#设定GO111MODULE环境变数" class="headerlink" title="设定GO111MODULE环境变数"></a>设定GO111MODULE环境变数</h2><p>总共可以三种不同的值：</p>
<ul>
<li>auto<br>默认值，go命令会根据当前目录来决定是否启用modules功能。需要满足两种情形：<br>该专案目录不在<code>GOPATH/src/</code>下<br>当前或上一层目录存在go.mod档案</li>
<li>on<br>go命令会使用modules，而不会GOPATH目录下查找。</li>
<li>off<br>go命令将不会支持module功能，寻找套件如以前GOPATH的做法去寻找。</li>
</ul>
<p>我是建议要开发Go专案就不再使用GOPATH的功能了，而是采用Go Modules的做法，因此建议都设定为on。<br>而采用Go Modules，下载下来的第三方套件都在哪呢？其实就位在<code>GOPATH/pkg/mod</code>资料夹里面。</p>
<h2 id="初始化mod"><a href="#初始化mod" class="headerlink" title="初始化mod"></a>初始化mod</h2><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod init &lt;module name&gt;</span><br></pre></td></tr></table></figure>

<p><code>&lt;module name&gt;</code>可填可不填，不填的话预设就是采用专案资料夹的名称。</p>
<p>在此档案内可以写以下几个关键字：</p>
<ul>
<li>module<br>定义模组路径</li>
<li>go<br>定义go语言version</li>
<li>require<br>指定依赖的套件，预设是最新版，可以指定版本号</li>
<li>exclude<br>排除该套件和其版本</li>
<li>replace<br>使用不同的套件版本并替换原有的套件版本</li>
<li>注解<br>// 单行注解<br>/* 多行注解*/<br>indirect 代表被间接导入的依赖包</li>
</ul>
<p>假设现在我要引入GitHub上的<code>gin-gonic/gin</code>的套件，如下定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">module awesomeProject</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="number">1.13</span></span><br><span class="line"></span><br><span class="line">require github.com/gin-gonic/gin v1<span class="number">.6</span><span class="number">.3</span></span><br></pre></td></tr></table></figure>

<p>再执行以下指令：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> mod download</span><br></pre></td></tr></table></figure>

<p>会将需要的套件安装在<code>GOPATH/pkg/mod</code>资料夹里面。而且会发现出现一个go.sum的档案，这个档案基本上用来记录套件版本的关系，确保是正确的，是不太需要理会的。</p>
<blockquote>
<p>官方说明：除了go.mod之外，go命令还维护一个名为go.sum的文件，其中包含特定模块版本内容的预期加密哈希<br>go命令使用go.sum文件确保这些模块的未来下载检索与第一次下载相同的位，以确保项目所依赖的模块不会出现意外更改，无论是出于恶意、意外还是其他原因。 go.mod和go.sum都应检入版本控制。<br>go.sum 不需要手工维护，所以可以不用太关注。</p>
</blockquote>
<p>如果将gin版本改成v1.4.0再重新执行<code>go mod download</code>，就会发现在<code>GOPATH/pkg/mod</code>里面<code>gin-gonic</code>会有两个资料夹分别是<code>gin@v1.4.0</code>、<code>gin@v1.5.0</code>，借此来区分版本。</p>
<p>当然其实也可以不执行go mod download，而直接运行go build or go install 也会自动将套件安装在相对应的地方。</p>
<p>还有一种方式直接下载套件而不用在go.mod中定义：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">go</span> get github.com/gin-gonic/gin@v1<span class="number">.5</span><span class="number">.0</span></span><br></pre></td></tr></table></figure>

<p>只要有开启<code>go modules</code>功能，<code>go get</code> 就不会像以前一样在<code>GOPATH/src</code>下放置套件档案，而是会放在<code>GOPATH/pkg/mod</code>里面，并且<code>go.mod</code>会写好引入，这样也就不用使用<code>go mod download</code>指令了。</p>
]]></content>
      <categories>
        <category>Go</category>
      </categories>
      <tags>
        <tag>Go</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Logback</title>
    <url>/2021/03/08/Spring-Boot%E6%95%B4%E5%90%88Logback/</url>
    <content><![CDATA[<p>Logback是由log4j创始人设计的又一个开源日志组件，是springboot默认的日志组件。</p>
<span id="more"></span>

<h1 id="自定义日志配置"><a href="#自定义日志配置" class="headerlink" title="自定义日志配置"></a>自定义日志配置</h1><p>根据不同的日志系统，你可以按如下规则组织配置文件名，就能被正确加载：</p>
<ul>
<li>Logback：logback-spring.xml, logback-spring.groovy, logback.xml, logback.groovy</li>
<li>Log4j：log4j-spring.properties, log4j-spring.xml, log4j.properties, log4j.xml</li>
<li>Log4j2：log4j2-spring.xml, log4j2.xml</li>
<li>JDK (Java Util Logging)：logging.properties</li>
</ul>
<h1 id="日志级别"><a href="#日志级别" class="headerlink" title="日志级别"></a>日志级别</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">日志级别从高到低：TRACE &lt; DEBUG &lt; INFO &lt; WARN &lt; ERROR &lt; FATAL</span><br></pre></td></tr></table></figure>

<p>如果设置为 WARN ，则低于 WARN 的信息都不会输出。</p>
<p><strong>这里我们介绍Spring Boot 整合 Logback的方式</strong></p>
<blockquote>
<p>Logback是由log4j创始人设计的又一个开源日志组件。</p>
</blockquote>
<p>logback是springboot默认的日志组件</p>
<h1 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h1><p><img src="https://img-blog.csdnimg.cn/20201030005009903.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">          &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">          &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">      &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h1 id="TestController"><a href="#TestController" class="headerlink" title="TestController"></a>TestController</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.slf4j.Logger;</span><br><span class="line"><span class="keyword">import</span> org.slf4j.LoggerFactory;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestController</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Logger log = LoggerFactory.getLogger(<span class="keyword">this</span>.getClass());</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/test&quot;)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2000</span>; i++) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">            log.info(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Logback配置文件logback-spring-xml"><a href="#Logback配置文件logback-spring-xml" class="headerlink" title="Logback配置文件logback-spring.xml"></a>Logback配置文件<code>logback-spring.xml</code></h1><p>模板如下，更具自己项目情况适当修改</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志输出路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_HOME&quot;</span> <span class="attr">value</span>=<span class="string">&quot;/data/logging/logs&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--控制台日志输出配置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;consoleLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--对输出日志进行格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--此处设置字符集--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; (%file:%line\) [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志文件配置info--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;fileInfoLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，</span></span><br><span class="line"><span class="comment">        所以我们使用下面的策略，可以避免输出 Error 的日志--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--过滤 Error--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--匹配到就禁止--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--没有匹配到就允许--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/system_info.%d&#123;yyyy-MM-dd&#125;_%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>5<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>20MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志输出编码格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--格式化输出：%d表示日期，%thread表示线程名，%-5level：级别从左显示5个字符宽度%msg：日志消息，%n是换行符--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--日志文件配置error--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;fileErrorLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--设置日志级别,过滤掉info日志,只输入error日志--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span></span><br><span class="line">                %msg%n</span><br><span class="line">            <span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--滚动策略--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.TimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_HOME&#125;/system_error.%d&#123;yyyy-MM-dd&#125;_%i.log<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">MaxHistory</span>&gt;</span>1<span class="tag">&lt;/<span class="name">MaxHistory</span>&gt;</span></span><br><span class="line">            &lt;timeBasedFileNamingAndTriggeringPolicy</span><br><span class="line">                    class=&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP&quot;&gt;</span><br><span class="line">                <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>20MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">timeBasedFileNamingAndTriggeringPolicy</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志输出编码格式化--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>%d [%thread] %-5level %logger&#123;36&#125; %line - %msg%n<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--指定最基础的日志输出级别--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;consoleLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--name 扫描包的位置--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">&quot;com.demo&quot;</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileInfoLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileErrorLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">logger</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多环境日志输出"><a href="#多环境日志输出" class="headerlink" title="多环境日志输出"></a>多环境日志输出</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    &lt;!-- 测试环境+开发环境. 多个使用逗号隔开. --&gt;</span><br><span class="line">    &lt;springProfile name=<span class="string">&quot;test,dev&quot;</span>&gt;</span><br><span class="line">        &lt;logger name=<span class="string">&quot;springboot.log.demo.controller&quot;</span> level=<span class="string">&quot;DEBUG&quot;</span> additivity=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">            &lt;appender-ref ref=<span class="string">&quot;consoleLog&quot;</span>/&gt;</span><br><span class="line">        &lt;/logger&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line"></span><br><span class="line">    &lt;!-- 生产环境. --&gt;</span><br><span class="line">    &lt;springProfile name=<span class="string">&quot;prod&quot;</span>&gt;</span><br><span class="line">        &lt;logger name=<span class="string">&quot;springboot.log.demo.controller&quot;</span> level=<span class="string">&quot;INFO&quot;</span> additivity=<span class="string">&quot;false&quot;</span>&gt;</span><br><span class="line">            &lt;appender-ref ref=<span class="string">&quot;consoleLog&quot;</span>/&gt;</span><br><span class="line">        &lt;/logger&gt;</span><br><span class="line">    &lt;/springProfile&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure>

<p>当application.yml设置环境为test时，激活log为test配置；设置为prod时，激活log配置为prod配置：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">spring:</span><br><span class="line">  profiles:</span><br><span class="line">    active: test</span><br></pre></td></tr></table></figure>

<h2 id="lt-encoder-gt-表示对日志进行编码："><a href="#lt-encoder-gt-表示对日志进行编码：" class="headerlink" title="&lt;encoder&gt;表示对日志进行编码："></a><code>&lt;encoder&gt;</code>表示对日志进行编码：</h2><ul>
<li>%d{HH: mm:ss.SSS}——日志输出时间</li>
<li>%thread——输出日志的进程名字，这在Web应用以及异步任务处理中很有用</li>
<li>%-5level——日志级别，并且使用5个字符靠左对齐</li>
<li>%logger{36}——日志输出者的名字</li>
<li>%msg——日志消息</li>
<li>%n——平台的换行符 </li>
<li>ThresholdFilter为系统定义的拦截器，例如：我们用ThresholdFilter来过滤掉ERROR级别以下的日志不输出到文件中，可以保证文件里只有Error级别日志。</li>
</ul>
<h1 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h1><p><img src="https://img-blog.csdnimg.cn/20201030010401208.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201030010420795.png#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201030010432242.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"><br><img src="https://img-blog.csdnimg.cn/20201030010443151.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center"></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Logback</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot解决前后端分离项目中跨域问题</title>
    <url>/2021/03/08/Spring-Boot%E8%A7%A3%E5%86%B3%E5%89%8D%E5%90%8E%E7%AB%AF%E5%88%86%E7%A6%BB%E9%A1%B9%E7%9B%AE%E4%B8%AD%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>

<h1 id="基于过滤器的CORS"><a href="#基于过滤器的CORS" class="headerlink" title="基于过滤器的CORS"></a>基于过滤器的CORS</h1><p>Spring框架还提供了CorsFilter。在这种情况下，不用使用<code>@CrossOrigin</code>或 <code>WebMvcConfigurer#addCorsMappings(CorsRegistry)</code>，例如，可以在Spring Boot应用程序中声明如下的过滤器：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.card.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.CorsConfiguration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.cors.UrlBasedCorsConfigurationSource;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.filter.CorsFilter;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 跨域访问控制</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CorsConfig</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> CorsConfiguration <span class="title">buildConfig</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CorsConfiguration corsConfiguration = <span class="keyword">new</span> CorsConfiguration();</span><br><span class="line">        <span class="comment">// 允许任何域名使用</span></span><br><span class="line">        corsConfiguration.addAllowedOrigin(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何头</span></span><br><span class="line">        corsConfiguration.addAllowedHeader(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="comment">// 允许任何方法（post、get等）</span></span><br><span class="line">        corsConfiguration.addAllowedMethod(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> corsConfiguration;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CorsFilter <span class="title">corsFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UrlBasedCorsConfigurationSource source = <span class="keyword">new</span> UrlBasedCorsConfigurationSource();</span><br><span class="line">        <span class="comment">// 对接口配置跨域设置</span></span><br><span class="line">        source.registerCorsConfiguration(<span class="string">&quot;/**&quot;</span>, buildConfig());</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> CorsFilter(source);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Nginx方式"><a href="#Nginx方式" class="headerlink" title="Nginx方式"></a>Nginx方式</h1><p>1.下载Nginx（推荐1.18.0）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">https:<span class="comment">//nginx.org/en/download.html</span></span><br></pre></td></tr></table></figure>

<p>2.配置Nginx，编辑 <code>nginx-1.18.0\conf\nginx.conf</code></p>
<p>把默认的server配置注释掉</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">        listen <span class="number">80</span>;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"> </span><br><span class="line">        location /&#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//192.168.0.76:8005/;</span></span><br><span class="line">        &#125;</span><br><span class="line"> </span><br><span class="line">        location /ssns-serve&#123;</span><br><span class="line">            proxy_pass http:<span class="comment">//localhost:8080;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>上面代码的意思是将<code>localhost:80</code>转发为<code>192.168.0.76:8005</code>,也就是说现在访问<code>localhost:80</code>实际上是访问<code>192.168.0.76:8005</code>,而访问<code>localhost:80/ssns-serve</code>则是访问<code>localhost:8080</code>,并以<code>ssns-serve</code>开头的url</p>
<h1 id="配置跨域-CORS-支持"><a href="#配置跨域-CORS-支持" class="headerlink" title="配置跨域(CORS)支持"></a>配置跨域(CORS)支持</h1><p>Spring Framework 4.2 GA为CORS提供了第一类支持，使您比通常的基于过滤器的解决方案更容易和更强大地配置它。所以springMVC的版本要在4.2或以上版本才支持@CrossOrigin</p>
<h2 id="Controller配置CORS"><a href="#Controller配置CORS" class="headerlink" title="Controller配置CORS"></a>Controller配置CORS</h2><p>1.1.controller方法的CORS配置，您可以向@RequestMapping注解处理程序方法添加一个@CrossOrigin注解，以便启用CORS（默认情况下，@CrossOrigin允许在@RequestMapping注解中指定的所有源和HTTP方法）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CrossOrigin</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中@CrossOrigin中的2个参数：<br><strong>origins</strong>： 允许可访问的域列表<br><strong>maxAge</strong>：准备响应前的缓存持续的最大时间（以秒为单位）</p>
<p>1.2.为整个controller启用@CrossOrigin</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(origins = &quot;http://baidu.com&quot;, maxAge = 3600)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.3.同时使用controller和方法级别的CORS配置，Spring将合并两个注释属性以创建合并的CORS配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin(maxAge = 3600)</span></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/account&quot;)</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AccountController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@CrossOrigin(origins = &quot;http://baidu.com&quot;)</span></span><br><span class="line">    <span class="meta">@GetMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Account <span class="title">retrieve</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/&#123;id&#125;&quot;)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(<span class="meta">@PathVariable</span> Long id)</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>1.4.如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.cors().and()...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="全局CORS配置"><a href="#全局CORS配置" class="headerlink" title="全局CORS配置"></a>全局CORS配置</h2><p>除了细粒度、基于注释的配置之外，您还可能需要定义一些全局CORS配置。这类似于使用筛选器，但可以声明为Spring MVC并结合细粒度@CrossOrigin配置。默认情况下，所有origins and GET, HEAD and POST methods是允许的</p>
<p>JavaConfig<br>使整个应用程序的CORS简化为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebMvc</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addMapping(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您正在使用Spring Boot，建议将WebMvcConfigurer bean声明如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebMvcConfigurer <span class="title">corsConfigurer</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="keyword">new</span> WebMvcConfigurerAdapter() &#123;</span><br><span class="line">            <span class="meta">@Override</span> </span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">                registry.addMapping(<span class="string">&quot;/**&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>您可以轻松地更改任何属性，以及仅将此CORS配置应用到特定的路径模式：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCorsMappings</span><span class="params">(CorsRegistry registry)</span> </span>&#123;</span><br><span class="line">    registry.addMapping(<span class="string">&quot;/api/**&quot;</span>)</span><br><span class="line">        .allowedOrigins(<span class="string">&quot;http://baidu.com&quot;</span>)</span><br><span class="line">        .allowedMethods(<span class="string">&quot;PUT&quot;</span>, <span class="string">&quot;DELETE&quot;</span>)</span><br><span class="line">            .allowedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>, <span class="string">&quot;header3&quot;</span>)</span><br><span class="line">        .exposedHeaders(<span class="string">&quot;header1&quot;</span>, <span class="string">&quot;header2&quot;</span>)</span><br><span class="line">        .allowCredentials(<span class="keyword">false</span>).maxAge(<span class="number">3600</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果您正在使用Spring Security，请确保在Spring安全级别启用CORS，并允许它利用Spring MVC级别定义的配置</p>
<h2 id="Spring注解-CrossOrigin不起作用的原因"><a href="#Spring注解-CrossOrigin不起作用的原因" class="headerlink" title="Spring注解@CrossOrigin不起作用的原因"></a>Spring注解@CrossOrigin不起作用的原因</h2><p>1、是springMVC的版本要在4.2或以上版本才支持@CrossOrigin<br>2、非@CrossOrigin没有解决跨域请求问题，而是不正确的请求导致无法得到预期的响应，导致浏览器端提示跨域问题<br>3、在Controller注解上方添加@CrossOrigin注解后，仍然出现跨域问题，解决方案之一就是：<br>在@RequestMapping注解中没有指定Get、Post方式，具体指定后，问题解决</p>
<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@CrossOrigin</span></span><br><span class="line"><span class="meta">@RestController</span> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">person</span></span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping(method = RequestMethod.GET)</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">add</span><span class="params">()</span> </span>&#123; <span class="comment">// ...</span></span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Spring Boot</tag>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>Elasticserch环境搭建.md</title>
    <url>/2021/03/08/Elasticserch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>Elasticsearch是一个基于Lucene的搜索服务器。它提供了一个分布式多用户能力的全文搜索引擎，基于RESTful web接口。Elasticsearch是用Java语言开发的，并作为Apache许可条款下的开放源码发布，是一种流行的企业级搜索引擎。</p>
<span id="more"></span>

<h1 id="下载安装ES"><a href="#下载安装ES" class="headerlink" title="下载安装ES"></a>下载安装ES</h1><h2 id="下载ES"><a href="#下载ES" class="headerlink" title="下载ES"></a>下载ES</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自带JDK的版本</span></span><br><span class="line">https:<span class="comment">//www.elastic.co/cn/downloads/elasticsearch</span></span><br><span class="line"><span class="comment">// 不带JDK的版本</span></span><br><span class="line">https:<span class="comment">//www.elastic.co/cn/downloads/elasticsearch-no-jdk</span></span><br></pre></td></tr></table></figure>

<p>本例中使用不带JDK的版本，JDK我们使用自己自带的防止和本地JDK和自带JDK冲突，Elasticsearch无需安装，解压即用。</p>
<p><strong>注意：</strong></p>
<p>1.安装Elasticsearch前提条件：JDK1.8及以上<br>2.ES的安装目录即解压目录不能包含空格否则在之后ES将启动不了</p>
<h2 id="ES文件目录"><a href="#ES文件目录" class="headerlink" title="ES文件目录"></a>ES文件目录</h2><p><img src="https://img-blog.csdnimg.cn/2020100521335738.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="ES文件目录"><br>这是自带JDK的ES版本目录，不带JDK的ES同理不存在jdk目录</p>
<h2 id="解决ES的跨域问题"><a href="#解决ES的跨域问题" class="headerlink" title="解决ES的跨域问题"></a>解决ES的跨域问题</h2><p>编辑ES配置文件<br><img src="https://img-blog.csdnimg.cn/20201005230228339.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="解决ES的跨域问题"><br><img src="https://img-blog.csdnimg.cn/20201005213518980.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="配置跨域"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">http.cors.enabled: <span class="keyword">true</span></span><br><span class="line">http.cors.allow-origin: <span class="string">&quot;*&quot;</span></span><br></pre></td></tr></table></figure>

<h2 id="启动ES"><a href="#启动ES" class="headerlink" title="启动ES"></a>启动ES</h2><p><img src="https://img-blog.csdnimg.cn/20201005213549750.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="启动ES"><br>这里会弹出命令行<br><img src="https://img-blog.csdnimg.cn/20201005213637460.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="依赖本地JVM"><br><img src="https://img-blog.csdnimg.cn/20201005213646233.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="常见端口"></p>
<h2 id="验证ES是否启动成功"><a href="#验证ES是否启动成功" class="headerlink" title="验证ES是否启动成功"></a>验证ES是否启动成功</h2><p>打开浏览器在地址栏输入<code>http://127.0.0.1:9200</code>当出现如下提示时则表示ES启动成功<br><img src="https://img-blog.csdnimg.cn/20201005213752215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="验证是否启动"></p>
<h1 id="可视化控制面板"><a href="#可视化控制面板" class="headerlink" title="可视化控制面板"></a>可视化控制面板</h1><h2 id="elasticsearch-head"><a href="#elasticsearch-head" class="headerlink" title="elasticsearch-head"></a>elasticsearch-head</h2><blockquote>
<p>ealsticsearch只是后端提供各种api，那么怎么直观的使用它呢？elasticsearch-head将是一款专门针对于elasticsearch的客户端工具</p>
</blockquote>
<p>ES5以上版本安装head需要安装node.js和grunt</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// elasticsearch-head项目地址</span></span><br><span class="line">https:<span class="comment">//github.com/mobz/elasticsearch-head</span></span><br><span class="line"><span class="comment">// node.js下载地址</span></span><br><span class="line">https:<span class="comment">//nodejs.org/zh-cn/</span></span><br></pre></td></tr></table></figure>

<p>解压elasticsearch-head，在当前elasticsearch-head的目录打开cmd，执行一下命令</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 安装依赖</span></span><br><span class="line">node install</span><br><span class="line"><span class="comment">// 安装grunt</span></span><br><span class="line">npm install grunt-cli</span><br><span class="line"><span class="comment">// 运行grunt</span></span><br><span class="line">grunt server</span><br></pre></td></tr></table></figure>

<p>安装完成用cmd进入安装目录<br>执行 node -v 可查看node.js版本号<br>执行grunt -version查看grunt版本号<br><img src="https://img-blog.csdnimg.cn/20201005215803307.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="启动Head"><br>在浏览器中输入<code>http://localhost:9100</code>，看到如下界面则表示elasticsearch-head启动成功<br><img src="https://img-blog.csdnimg.cn/20201005220058263.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="Head网页端"></p>
<h2 id="Kinbana"><a href="#Kinbana" class="headerlink" title="Kinbana"></a>Kinbana</h2><p>Kinbana基于Node.js，所以安装之前需要安装Node.js。</p>
<blockquote>
<p>Node.js下载地址：<a href="https://nodejs.org/zh-cn/">https://nodejs.org/zh-cn/</a><br>Kinbana下载地址：<a href="https://www.elastic.co/cn/downloads/past-releases#kibana">https://www.elastic.co/cn/downloads/past-releases#kibana</a><br>Kibana用户手册：<a href="https://www.elastic.co/guide/cn/kibana/current/index.html">https://www.elastic.co/guide/cn/kibana/current/index.html</a></p>
</blockquote>
<h3 id="下载完Kinbana之后解压"><a href="#下载完Kinbana之后解压" class="headerlink" title="下载完Kinbana之后解压"></a>下载完Kinbana之后解压</h3><p>目录结构如下：<br><img src="https://files.mdnice.com/user/10819/a2249f49-ef77-4259-90b0-8a9dfadc0321.png"></p>
<h3 id="编辑kabana-yml配置文件"><a href="#编辑kabana-yml配置文件" class="headerlink" title="编辑kabana.yml配置文件"></a>编辑kabana.yml配置文件</h3><p><img src="https://files.mdnice.com/user/10819/5081a1d8-5891-4365-b447-7dd34c74cc3e.png"><br>如果本地已经启动了一个ES，就可以直接把这行注释放开<br><img src="https://files.mdnice.com/user/10819/2e552883-b6a0-4a12-9e4c-6353006d25d8.png"></p>
<h3 id="启动Kibana"><a href="#启动Kibana" class="headerlink" title="启动Kibana"></a>启动Kibana</h3><p><img src="https://files.mdnice.com/user/10819/2c72e62c-55cc-4f5c-a215-f05678a4bec0.png"></p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img src="https://files.mdnice.com/user/10819/95d05fc8-26e2-49ee-9cef-4e7caa32f28a.png"><br>访问浏览器 <code>http://localhost:5601</code><br><img src="https://files.mdnice.com/user/10819/c7362615-3c72-40bb-b2f3-fbf1104cdbf2.png"><br>安装完成，即可对ES进行操作</p>
<h1 id="ES的使用"><a href="#ES的使用" class="headerlink" title="ES的使用"></a>ES的使用</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Elasticsearch是面向文档(document oriented)的，这意味着它可以存储整个对象或文档(document)。然而它不仅<br>仅是存储，还会索引(index)每个文档的内容使之可以被搜索。在Elasticsearch中，你可以对文档（而非成行成列的<br>数据）进行索引、搜索、排序、过滤。Elasticsearch比传统关系型数据库如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Relational DB ‐&gt; Databases ‐&gt; Tables ‐&gt; Rows ‐&gt; Columns</span><br><span class="line">Elasticsearch ‐&gt; Indices ‐&gt; Types ‐&gt; Documents ‐&gt; Fields</span><br></pre></td></tr></table></figure>

<h2 id="常见概念"><a href="#常见概念" class="headerlink" title="常见概念"></a>常见概念</h2><h3 id="索引-index"><a href="#索引-index" class="headerlink" title="索引 index"></a>索引 index</h3><p>一个索引就是一个拥有几分相似特征的文档的集合。比如说，你可以有一个客户数据的索引，另一个产品目录的索<br>引，还有一个订单数据的索引。一个索引由一个名字来标识（必须全部是小写字母的），并且当我们要对对应于这<br>个索引中的文档进行索引、搜索、更新和删除的时候，都要使用到这个名字。在一个集群中，可以定义任意多的索<br>引。</p>
<h3 id="类型-type"><a href="#类型-type" class="headerlink" title="类型 type"></a>类型 type</h3><p>在一个索引中，你可以定义一种或多种类型。一个类型是你的索引的一个逻辑上的分类/分区，其语义完全由你来<br>定。通常，会为具有一组共同字段的文档定义一个类型。比如说，我们假设你运营一个博客平台并且将你所有的数<br>据存储到一个索引中。在这个索引中，你可以为用户数据定义一个类型，为博客数据定义另一个类型，当然，也可<br>以为评论数据定义另一个类型。</p>
<h3 id="字段Field"><a href="#字段Field" class="headerlink" title="字段Field"></a>字段Field</h3><p>相当于是数据表的字段，对文档数据根据不同属性进行的分类标识</p>
<h3 id="映射-mapping"><a href="#映射-mapping" class="headerlink" title="映射 mapping"></a>映射 mapping</h3><p>mapping是处理数据的方式和规则方面做一些限制，如某个字段的数据类型、默认值、分析器、是否被索引等等，<br>这些都是映射里面可以设置的，其它就是处理es里面数据的一些使用规则设置也叫做映射，按着最优规则处理数据<br>对性能提高很大，因此才需要建立映射，并且需要思考如何建立映射才能对性能更好。</p>
<h3 id="文档-document"><a href="#文档-document" class="headerlink" title="文档 document"></a>文档 document</h3><p>一个文档是一个可被索引的基础信息单元。比如，你可以拥有某一个客户的文档，某一个产品的一个文档，当然，<br>也可以拥有某个订单的一个文档。文档以JSON（Javascript Object Notation）格式来表示，而JSON是一个到处存<br>在的互联网数据交互格式。<br>在一个index/type里面，你可以存储任意多的文档。注意，尽管一个文档，物理上存在于一个索引之中，文档必须<br>被索引/赋予一个索引的type。</p>
<h3 id="接近实时-NRT"><a href="#接近实时-NRT" class="headerlink" title="接近实时 NRT"></a>接近实时 NRT</h3><p>Elasticsearch是一个接近实时的搜索平台。这意味着，从索引一个文档直到这个文档能够被搜索到有一个轻微的延<br>迟（通常是1秒以内）</p>
<h3 id="集群-cluster"><a href="#集群-cluster" class="headerlink" title="集群 cluster"></a>集群 cluster</h3><p>一个集群就是由一个或多个节点组织在一起，它们共同持有整个的数据，并一起提供索引和搜索功能。一个集群由<br>一个唯一的名字标识，这个名字默认就是“elasticsearch”。这个名字是重要的，因为一个节点只能通过指定某个集<br>群的名字，来加入这个集群</p>
<h3 id="节点-node"><a href="#节点-node" class="headerlink" title="节点 node"></a>节点 node</h3><p>一个节点是集群中的一个服务器，作为集群的一部分，它存储数据，参与集群的索引和搜索功能。和集群类似，一<br>个节点也是由一个名字来标识的，默认情况下，这个名字是一个随机的漫威漫画角色的名字，这个名字会在启动的<br>时候赋予节点。这个名字对于管理工作来说挺重要的，因为在这个管理过程中，你会去确定网络中的哪些服务器对<br>应于Elasticsearch集群中的哪些节点。<br>一个节点可以通过配置集群名称的方式来加入一个指定的集群。默认情况下，每个节点都会被安排加入到一个叫<br>做“elasticsearch”的集群中，这意味着，如果你在你的网络中启动了若干个节点，并假定它们能够相互发现彼此，<br>它们将会自动地形成并加入到一个叫做“elasticsearch”的集群中。<br>在一个集群里，只要你想，可以拥有任意多个节点。而且，如果当前你的网络中没有运行任何Elasticsearch节点，<br>这时启动一个节点，会默认创建并加入一个叫做“elasticsearch”的集群。</p>
<h3 id="分片和复制-shards-amp-replicas"><a href="#分片和复制-shards-amp-replicas" class="headerlink" title="分片和复制 shards&amp;replicas"></a>分片和复制 shards&amp;replicas</h3><p>一个索引可以存储超出单个结点硬件限制的大量数据。比如，一个具有10亿文档的索引占据1TB的磁盘空间，而任<br>一节点都没有这样大的磁盘空间；或者单个节点处理搜索请求，响应太慢。为了解决这个问题，Elasticsearch提供<br>了将索引划分成多份的能力，这些份就叫做分片。当你创建一个索引的时候，你可以指定你想要的分片的数量。每<br>个分片本身也是一个功能完善并且独立的“索引”，这个“索引”可以被放置到集群中的任何节点上。分片很重要，主<br>要有两方面的原因： 1）允许你水平分割/扩展你的内容容量。 2）允许你在分片（潜在地，位于多个节点上）之上<br>进行分布式的、并行的操作，进而提高性能/吞吐量。<br>至于一个分片怎样分布，它的文档怎样聚合回搜索请求，是完全由Elasticsearch管理的，对于作为用户的你来说，<br>这些都是透明的。<br>在一个网络/云的环境里，失败随时都可能发生，在某个分片/节点不知怎么的就处于离线状态，或者由于任何原因<br>消失了，这种情况下，有一个故障转移机制是非常有用并且是强烈推荐的。为此目的，Elasticsearch允许你创建分<br>片的一份或多份拷贝，这些拷贝叫做复制分片，或者直接叫复制。<br>复制之所以重要，有两个主要原因： 在分片/节点失败的情况下，提供了高可用性。因为这个原因，注意到复制分<br>片从不与原/主要（original/primary）分片置于同一节点上是非常重要的。扩展你的搜索量/吞吐量，因为搜索可以<br>在所有的复制上并行运行。总之，每个索引可以被分成多个分片。一个索引也可以被复制0次（意思是没有复制）<br>或多次。一旦复制了，每个索引就有了主分片（作为复制源的原来的分片）和复制分片（主分片的拷贝）之别。分<br>片和复制的数量可以在索引创建的时候指定。在索引创建之后，你可以在任何时候动态地改变复制的数量，但是你<br>事后不能改变分片的数量。<br>默认情况下，Elasticsearch中的每个索引被分片5个主分片和1个复制，这意味着，如果你的集群中至少有两个节<br>点，你的索引将会有5个主分片和另外5个复制分片（1个完全拷贝），这样的话每个索引总共就有10个分片。</p>
<h2 id="ES中的常用操作"><a href="#ES中的常用操作" class="headerlink" title="ES中的常用操作"></a>ES中的常用操作</h2><h3 id="创建索引index"><a href="#创建索引index" class="headerlink" title="创建索引index"></a>创建索引index</h3><p><img src="https://img-blog.csdnimg.cn/20201005230419932.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="创建索引index"></p>
<h3 id="创建索引后设置Mapping"><a href="#创建索引后设置Mapping" class="headerlink" title="创建索引后设置Mapping"></a>创建索引后设置Mapping</h3><p>注意：在ES 7.X 之后 删除了映射类型</p>
<blockquote>
<p>参见ES官方说明：<a href="https://www.elastic.co/guide/en/elasticsearch/reference/7.x/removal-of-types.html">https://www.elastic.co/guide/en/elasticsearch/reference/7.x/removal-of-types.html</a></p>
</blockquote>
<p>一般碰到报错:<code>”Types cannot be provided in put mapping requests, unless the include_type_name parameter is set to true”</code>，都是因为ElasticSearch从低版本升级到高版本造成的</p>
<p>新的ElasticSearch 7.x，做了调整，要求mapping时不需要提交type，为了确保旧代码的兼容性，加入了一个<code>include_type_name</code>的参数，而这样的请求，Head插件自带的请求时无法完成的这时候我么就需要借助postman工具。<br><img src="https://img-blog.csdnimg.cn/20201005233704375.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="创建索引后设置Mapping"></p>
<h3 id="删除索引index"><a href="#删除索引index" class="headerlink" title="删除索引index"></a>删除索引index</h3><p><img src="https://img-blog.csdnimg.cn/20201005233800846.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="删除索引index"></p>
<h3 id="创建文档document"><a href="#创建文档document" class="headerlink" title="创建文档document"></a>创建文档document</h3><p>创建索引和设置Mapping一步完成<br><img src="https://img-blog.csdnimg.cn/20201005234605291.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="创建文档document"><br>创建文档<br><img src="https://img-blog.csdnimg.cn/20201005235156629.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="创建文档"><br>这一切都可以在Head的可视化界面中得到验证<br><img src="https://img-blog.csdnimg.cn/20201005235239791.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="Head的可视化界面"></p>
<h3 id="修改文档document"><a href="#修改文档document" class="headerlink" title="修改文档document"></a>修改文档document</h3><p><img src="https://img-blog.csdnimg.cn/20201005235413479.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="修改文档document"><br><img src="https://img-blog.csdnimg.cn/20201005235434807.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="修改结果"></p>
<h3 id="删除文档document"><a href="#删除文档document" class="headerlink" title="删除文档document"></a>删除文档document</h3><p><img src="https://img-blog.csdnimg.cn/20201005235502518.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="删除文档document"><br><img src="https://img-blog.csdnimg.cn/20201005235519812.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="删除结果"></p>
<h3 id="查询文档-根据id查询"><a href="#查询文档-根据id查询" class="headerlink" title="查询文档-根据id查询"></a>查询文档-根据id查询</h3><p><img src="https://img-blog.csdnimg.cn/20201005235619274.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="根据id查询"></p>
<h3 id="查询文档-querystring查询"><a href="#查询文档-querystring查询" class="headerlink" title="查询文档-querystring查询"></a>查询文档-querystring查询</h3><p><img src="https://img-blog.csdnimg.cn/20201005235816119.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="querystring查询"><br><img src="https://img-blog.csdnimg.cn/20201006000840538.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="querystring查询"><br>将搜索内容”搜索服务器”修改为”搜钢索”，同样也能搜索到文档，原因是ES对字符串进行分词，包含其中任意一个字的数据都会被查询到</p>
<h3 id="查询文档-term查询"><a href="#查询文档-term查询" class="headerlink" title="查询文档-term查询"></a>查询文档-term查询</h3><p><img src="https://img-blog.csdnimg.cn/2020100600014360.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="term查询"><br><img src="https://img-blog.csdnimg.cn/20201006000215323.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="term查询"></p>
<h1 id="IK-分词器"><a href="#IK-分词器" class="headerlink" title="IK 分词器"></a>IK 分词器</h1><h2 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 项目地址，下载的版本最好和ES版本一致</span></span><br><span class="line">https:<span class="comment">//github.com/medcl/elasticsearch-analysis-ik</span></span><br></pre></td></tr></table></figure>

<p>解压，将解压后的文件夹拷贝到ES目录\plugins下<br><img src="https://img-blog.csdnimg.cn/20201006001235998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="下载安装IK 分词器"><br>运行ES，可以看到ik分词器已被加载<br><img src="https://img-blog.csdnimg.cn/2020100600131215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="运行ES"></p>
<h2 id="IK分词器测试"><a href="#IK分词器测试" class="headerlink" title="IK分词器测试"></a>IK分词器测试</h2><h3 id="最小切分-ik-smart"><a href="#最小切分-ik-smart" class="headerlink" title="最小切分 ik_smart"></a>最小切分 ik_smart</h3><p><img src="https://img-blog.csdnimg.cn/20201006002033159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="最小切分 ik_smart"><br>返回的结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;这是&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;一个&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;对&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;分词器&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;的&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="最细切分-ik-max-word"><a href="#最细切分-ik-max-word" class="headerlink" title="最细切分 ik_max_word"></a>最细切分 ik_max_word</h3><p><img src="https://img-blog.csdnimg.cn/20201006002115313.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="最细切分 ik_max_word"><br>返回结果</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;tokens&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;这是&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;一个&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;一&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;TYPE_CNUM&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;个&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;COUNT&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">3</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;对分&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">6</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">4</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;分词器&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">5</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;分词&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">5</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">6</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;器&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">7</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">7</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;的&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_CHAR&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">8</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;token&quot;</span>: <span class="string">&quot;测试&quot;</span>,</span><br><span class="line">            <span class="string">&quot;start_offset&quot;</span>: <span class="number">9</span>,</span><br><span class="line">            <span class="string">&quot;end_offset&quot;</span>: <span class="number">11</span>,</span><br><span class="line">            <span class="string">&quot;type&quot;</span>: <span class="string">&quot;CN_WORD&quot;</span>,</span><br><span class="line">            <span class="string">&quot;position&quot;</span>: <span class="number">9</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="分析器使用ik"><a href="#分析器使用ik" class="headerlink" title="分析器使用ik"></a>分析器使用ik</h2><p>删除索引<br><img src="https://img-blog.csdnimg.cn/20201006002356833.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="删除索引"><br>新建索引和Mapping，分析器选择的时ik_max_word<br><img src="https://img-blog.csdnimg.cn/20201006002935989.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="新建索引和Mapping"><br>可在Head中查看到Mapping<br><img src="https://img-blog.csdnimg.cn/20201006003030507.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="Head中查看到Mapping"><br>当改用ik分词器（ik_max_word）再次查询关键词“搜钢索”时，<br><img src="https://img-blog.csdnimg.cn/20201006003233862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="查询关键词"><br>当改用ik分词器（ik_max_word）查询关键词“搜索”时，<br><img src="https://img-blog.csdnimg.cn/20201006003420304.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3kxNTM0NDE0NDI1,size_16,color_FFFFFF,t_70#pic_center" alt="查询关键词"></p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Java Map 详解 - 用法 遍历 排序 常用API等</title>
    <url>/2021/03/06/Java-Map-%E8%AF%A6%E8%A7%A3-%E7%94%A8%E6%B3%95-%E9%81%8D%E5%8E%86-%E6%8E%92%E5%BA%8F-%E5%B8%B8%E7%94%A8API%E7%AD%89/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>
<h1 id="Map用法"><a href="#Map用法" class="headerlink" title="Map用法"></a>Map用法</h1><h2 id="类型介绍"><a href="#类型介绍" class="headerlink" title="类型介绍"></a>类型介绍</h2><p>Java 自带了各种 Map 类，这些 Map 类可归为三种类型：</p>
<h2 id="通用Map"><a href="#通用Map" class="headerlink" title="通用Map"></a>通用Map</h2><p>用于在应用程序中管理映射，通常在 java.util 程序包中实现 HashMap、Hashtable、Properties、LinkedHashMap、IdentityHashMap、TreeMap、WeakHashMap、ConcurrentHashMap</p>
<h2 id="专用Map"><a href="#专用Map" class="headerlink" title="专用Map"></a>专用Map</h2><p>通常我们不必亲自创建此类Map，而是通过某些其他类对其进行访问 <code>java.util.jar.Attributes</code>、<code>javax.print.attribute.standard.PrinterStateReasons</code>、<code>java.security.Provider</code>、<code>java.awt.RenderingHints</code>、<code>javax.swing.UIDefaults</code></p>
<h2 id="自行实现Map"><a href="#自行实现Map" class="headerlink" title="自行实现Map"></a>自行实现Map</h2><p>一个用于帮助我们实现自己的Map类的抽象类 AbstractMap</p>
<h2 id="类型区别"><a href="#类型区别" class="headerlink" title="类型区别"></a>类型区别</h2><h3 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h3><p>最常用的Map,它根据键的HashCode 值存储数据,根据键可以直接获取它的值，具有很快的访问速度。HashMap最多只允许一条记录的键为Null(多条会覆盖);允许多条记录的值为 Null。非同步的。</p>
<h3 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h3><p>能够把它保存的记录根据键(key)排序,默认是按升序排序，也可以指定排序的比较器，当用Iterator 遍历TreeMap时，得到的记录是排过序的。TreeMap不允许key的值为null。非同步的。</p>
<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>与 HashMap类似,不同的是:key和value的值均不允许为null;它支持线程的同步，即任一时刻只有一个线程能写Hashtable,因此也导致了Hashtale在写入时会比较慢。</p>
<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>保存了记录的插入顺序，在用Iterator遍历LinkedHashMap时，先得到的记录肯定是先插入的.在遍历的时候会比HashMap慢。key和value均允许为空，非同步的。</p>
<h2 id="Map-初始化"><a href="#Map-初始化" class="headerlink" title="Map 初始化"></a>Map 初始化</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br></pre></td></tr></table></figure>

<h2 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="获取元素"><a href="#获取元素" class="headerlink" title="获取元素"></a>获取元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.get(<span class="string">&quot;key1&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="移除元素"><a href="#移除元素" class="headerlink" title="移除元素"></a>移除元素</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.remove(<span class="string">&quot;key1&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="清空map"><a href="#清空map" class="headerlink" title="清空map"></a>清空map</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">map.clear();</span><br></pre></td></tr></table></figure>

<h1 id="四种常用Map插入与读取性能比较"><a href="#四种常用Map插入与读取性能比较" class="headerlink" title="四种常用Map插入与读取性能比较"></a>四种常用Map插入与读取性能比较</h1><h2 id="插入10次平均-ms"><a href="#插入10次平均-ms" class="headerlink" title="插入10次平均(ms)"></a>插入10次平均(ms)</h2><table>
<thead>
<tr>
<th></th>
<th>1W</th>
<th>10W</th>
<th>100W</th>
</tr>
</thead>
<tbody><tr>
<td>HashMap</td>
<td>56</td>
<td>261</td>
<td>3030</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td>25</td>
<td>229</td>
<td>3069</td>
</tr>
<tr>
<td>TreeMap</td>
<td>29</td>
<td>295</td>
<td>4117</td>
</tr>
<tr>
<td>Hashtable</td>
<td>24</td>
<td>234</td>
<td>3275</td>
</tr>
</tbody></table>
<h2 id="读取10次平均-ms"><a href="#读取10次平均-ms" class="headerlink" title="读取10次平均(ms)"></a>读取10次平均(ms)</h2><table>
<thead>
<tr>
<th></th>
<th>1W</th>
<th>10W</th>
<th>100W</th>
</tr>
</thead>
<tbody><tr>
<td>HashMap</td>
<td>2</td>
<td>21</td>
<td>220</td>
</tr>
<tr>
<td>LinkedHashMap</td>
<td>2</td>
<td>20</td>
<td>216</td>
</tr>
<tr>
<td>TreeMap</td>
<td>5</td>
<td>103</td>
<td>1446</td>
</tr>
<tr>
<td>Hashtable</td>
<td>2</td>
<td>22</td>
<td>259</td>
</tr>
</tbody></table>
<h2 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xsoftlab.baike;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.TreeMap;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashMapW = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashMapR = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> linkMapW = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> linkMapR = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> treeMapW = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> treeMapR = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashTableW = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> hashTableR = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            Test test = <span class="keyword">new</span> Test();</span><br><span class="line">            test.test(<span class="number">100</span> * <span class="number">10000</span>);</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;hashMapW = &quot;</span> + hashMapW / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hashMapR = &quot;</span> + hashMapR / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;linkMapW = &quot;</span> + linkMapW / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;linkMapR = &quot;</span> + linkMapR / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;treeMapW = &quot;</span> + treeMapW / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;treeMapR = &quot;</span> + treeMapR / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hashTableW = &quot;</span> + hashTableW / <span class="number">10</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;hashTableR = &quot;</span> + hashTableR / <span class="number">10</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> size)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> index;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String[] key = <span class="keyword">new</span> String[size];</span><br><span class="line">        <span class="comment">// HashMap 插入</span></span><br><span class="line">        Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            key[i] = UUID.randomUUID().toString();</span><br><span class="line">            map.put(key[i], UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        hashMapW += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap插入耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// HashMap 读取</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            index = random.nextInt(size);</span><br><span class="line">            map.get(key[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        hashMapR += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;HashMap读取耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// LinkedHashMap 插入</span></span><br><span class="line">        map = <span class="keyword">new</span> LinkedHashMap&lt;String, String&gt;();</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            key[i] = UUID.randomUUID().toString();</span><br><span class="line">            map.put(key[i], UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        linkMapW += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedHashMap插入耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// LinkedHashMap 读取</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            index = random.nextInt(size);</span><br><span class="line">            map.get(key[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        linkMapR += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;LinkedHashMap读取耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// TreeMap 插入</span></span><br><span class="line">        key = <span class="keyword">new</span> String[size];</span><br><span class="line">        map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            key[i] = UUID.randomUUID().toString();</span><br><span class="line">            map.put(key[i], UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        treeMapW += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap插入耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// TreeMap 读取</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            index = random.nextInt(size);</span><br><span class="line">            map.get(key[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        treeMapR += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;TreeMap读取耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// Hashtable 插入</span></span><br><span class="line">        key = <span class="keyword">new</span> String[size];</span><br><span class="line">        map = <span class="keyword">new</span> Hashtable&lt;String, String&gt;();</span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            key[i] = UUID.randomUUID().toString();</span><br><span class="line">            map.put(key[i], UUID.randomUUID().toString());</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        hashTableW += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hashtable插入耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">// Hashtable 读取</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            index = random.nextInt(size);</span><br><span class="line">            map.get(key[index]);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        hashTableR += (end - start);</span><br><span class="line">        System.out.println(<span class="string">&quot;Hashtable读取耗时 = &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="Map-遍历"><a href="#Map-遍历" class="headerlink" title="Map 遍历"></a>Map 遍历</h1><h2 id="初始化数据"><a href="#初始化数据" class="headerlink" title="初始化数据"></a>初始化数据</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;key1&quot;</span>, <span class="string">&quot;value1&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;key2&quot;</span>, <span class="string">&quot;value2&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="增强for循环遍历"><a href="#增强for循环遍历" class="headerlink" title="增强for循环遍历"></a>增强for循环遍历</h2><h3 id="使用keySet-遍历"><a href="#使用keySet-遍历" class="headerlink" title="使用keySet()遍历"></a>使用keySet()遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot; ：&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用entrySet-遍历"><a href="#使用entrySet-遍历" class="headerlink" title="使用entrySet()遍历"></a>使用entrySet()遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : map.entrySet()) &#123;</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot; ：&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="迭代器遍历"><a href="#迭代器遍历" class="headerlink" title="迭代器遍历"></a>迭代器遍历</h2><h3 id="使用keySet-遍历-1"><a href="#使用keySet-遍历-1" class="headerlink" title="使用keySet()遍历"></a>使用keySet()遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;String&gt; iterator = map.keySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    String key = iterator.next();</span><br><span class="line">    System.out.println(key + <span class="string">&quot;　：&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="使用entrySet-遍历-1"><a href="#使用entrySet-遍历-1" class="headerlink" title="使用entrySet()遍历"></a>使用entrySet()遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Iterator&lt;Map.Entry&lt;String, String&gt;&gt; iterator = map.entrySet().iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">    Map.Entry&lt;String, String&gt; entry = iterator.next();</span><br><span class="line">    System.out.println(entry.getKey() + <span class="string">&quot;　：&quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="HashMap四种遍历方式性能比较"><a href="#HashMap四种遍历方式性能比较" class="headerlink" title="HashMap四种遍历方式性能比较"></a>HashMap四种遍历方式性能比较</h2><h3 id="比较方式"><a href="#比较方式" class="headerlink" title="比较方式"></a>比较方式</h3><p>分别对四种遍历方式进行10W次迭代，比较用时。</p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> net.xsoftlab.baike;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Map.Entry;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 初始化，10W次赋值</span></span><br><span class="line">        Map&lt;Integer, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;Integer, Integer&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)</span><br><span class="line">            map.put(i, i);</span><br><span class="line">        <span class="comment">/** 增强for循环，keySet迭代 **/</span></span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Integer key : map.keySet()) &#123;</span><br><span class="line">            map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;增强for循环，keySet迭代 -&gt; &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">/** 增强for循环，entrySet迭代 */</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (Entry&lt;Integer, Integer&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            entry.getKey();</span><br><span class="line">            entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;增强for循环，entrySet迭代 -&gt; &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">/** 迭代器，keySet迭代 **/</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Iterator&lt;Integer&gt; iterator = map.keySet().iterator();</span><br><span class="line">        Integer key;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            key = iterator.next();</span><br><span class="line">            map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;迭代器，keySet迭代 -&gt; &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">        <span class="comment">/** 迭代器，entrySet迭代 **/</span></span><br><span class="line">        start = System.currentTimeMillis();</span><br><span class="line">        Iterator&lt;Map.Entry&lt;Integer, Integer&gt;&gt; iterator1 = map.entrySet().iterator();</span><br><span class="line">        Map.Entry&lt;Integer, Integer&gt; entry;</span><br><span class="line">        <span class="keyword">while</span> (iterator1.hasNext()) &#123;</span><br><span class="line">            entry = iterator1.next();</span><br><span class="line">            entry.getKey();</span><br><span class="line">            entry.getValue();</span><br><span class="line">        &#125;</span><br><span class="line">        end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">&quot;迭代器，entrySet迭代 -&gt; &quot;</span> + (end - start) + <span class="string">&quot; ms&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="运行三次，比较结果"><a href="#运行三次，比较结果" class="headerlink" title="运行三次，比较结果"></a>运行三次，比较结果</h3><p>第一次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增强<span class="keyword">for</span>循环，keySet迭代 -&gt; <span class="number">37</span> ms</span><br><span class="line">增强<span class="keyword">for</span>循环，entrySet迭代 -&gt; <span class="number">19</span> ms</span><br><span class="line">迭代器，keySet迭代 -&gt; <span class="number">14</span> ms</span><br><span class="line">迭代器，entrySet迭代 -&gt; <span class="number">9</span> ms</span><br></pre></td></tr></table></figure>

<p>第二次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增强<span class="keyword">for</span>循环，keySet迭代 -&gt; <span class="number">29</span> ms</span><br><span class="line">增强<span class="keyword">for</span>循环，entrySet迭代 -&gt; <span class="number">22</span> ms</span><br><span class="line">迭代器，keySet迭代 -&gt; <span class="number">19</span> ms</span><br><span class="line">迭代器，entrySet迭代 -&gt; <span class="number">12</span> ms</span><br></pre></td></tr></table></figure>

<p>第三次</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增强<span class="keyword">for</span>循环，keySet迭代 -&gt; <span class="number">27</span> ms</span><br><span class="line">增强<span class="keyword">for</span>循环，entrySet迭代 -&gt; <span class="number">19</span> ms</span><br><span class="line">迭代器，keySet迭代 -&gt; <span class="number">18</span> ms</span><br><span class="line">迭代器，entrySet迭代 -&gt; <span class="number">10</span> ms</span><br></pre></td></tr></table></figure>

<p>平均值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">增强<span class="keyword">for</span>循环，keySet迭代 -&gt; <span class="number">31</span> ms</span><br><span class="line">增强<span class="keyword">for</span>循环，entrySet迭代 -&gt; <span class="number">20</span> ms</span><br><span class="line">迭代器，keySet迭代 -&gt; <span class="number">17</span> ms</span><br><span class="line">迭代器，entrySet迭代 -&gt; <span class="number">10.33</span> ms</span><br></pre></td></tr></table></figure>

<p>总结</p>
<ol>
<li>增强for循环使用方便，但性能较差，不适合处理超大量级的数据。</li>
<li>迭代器的遍历速度要比增强for循环快很多，是增强for循环的2倍左右。</li>
<li>使用entrySet遍历的速度要比keySet快很多，是keySet的1.5倍左右。</li>
</ol>
<h1 id="Map-排序"><a href="#Map-排序" class="headerlink" title="Map 排序"></a>Map 排序</h1><h2 id="HashMap、Hashtable、LinkedHashMap排序"><a href="#HashMap、Hashtable、LinkedHashMap排序" class="headerlink" title="HashMap、Hashtable、LinkedHashMap排序"></a>HashMap、Hashtable、LinkedHashMap排序</h2><p>注：TreeMap也可以使用此方法进行排序，但是更推荐下面的方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 通过ArrayList构造函数把map.entrySet()转换成list</span></span><br><span class="line">List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet());</span><br><span class="line"><span class="comment">// 通过比较器实现比较排序</span></span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapping1.getKey().compareTo(mapping2.getKey());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, String&gt; mapping : list) &#123;</span><br><span class="line">    System.out.println(mapping.getKey() + <span class="string">&quot; ：&quot;</span> + mapping.getValue());</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="TreeMap排序"><a href="#TreeMap排序" class="headerlink" title="TreeMap排序"></a>TreeMap排序</h2><p>TreeMap默认按key进行升序排序，如果想改变默认的顺序，可以使用比较器:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;(<span class="keyword">new</span> Comparator&lt;String&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(String o1, String o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 降序排序</span></span><br><span class="line">        <span class="keyword">return</span> o1.compareTo(o2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot; ：&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="按value排序-通用"><a href="#按value排序-通用" class="headerlink" title="按value排序(通用)"></a>按value排序(通用)</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String, String&gt; map = <span class="keyword">new</span> TreeMap&lt;String, String&gt;();</span><br><span class="line">map.put(<span class="string">&quot;b&quot;</span>, <span class="string">&quot;b&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;a&quot;</span>, <span class="string">&quot;c&quot;</span>);</span><br><span class="line">map.put(<span class="string">&quot;c&quot;</span>, <span class="string">&quot;a&quot;</span>);</span><br><span class="line"><span class="comment">// 通过ArrayList构造函数把map.entrySet()转换成list</span></span><br><span class="line">List&lt;Map.Entry&lt;String, String&gt;&gt; list = <span class="keyword">new</span> ArrayList&lt;Map.Entry&lt;String, String&gt;&gt;(map.entrySet());</span><br><span class="line"><span class="comment">// 通过比较器实现比较排序</span></span><br><span class="line">Collections.sort(list, <span class="keyword">new</span> Comparator&lt;Map.Entry&lt;String, String&gt;&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Map.Entry&lt;String, String&gt; mapping1, Map.Entry&lt;String, String&gt; mapping2)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapping1.getValue().compareTo(mapping2.getValue());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">for</span> (String key : map.keySet()) &#123;</span><br><span class="line">    System.out.println(key + <span class="string">&quot; ：&quot;</span> + map.get(key));</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h1><table>
<thead>
<tr>
<th>方法</th>
<th align="left">描述</th>
</tr>
</thead>
<tbody><tr>
<td>clear()</td>
<td align="left">从 Map 中删除所有映射</td>
</tr>
<tr>
<td>remove(Object key)</td>
<td align="left">从 Map 中删除键和关联的值</td>
</tr>
<tr>
<td>put(Object key, Object value)</td>
<td align="left">将指定值与指定键相关联</td>
</tr>
<tr>
<td>putAll(Map t)</td>
<td align="left">将指定 Map 中的所有映射复制到此 map</td>
</tr>
<tr>
<td>entrySet()</td>
<td align="left">返回 Map 中所包含映射的 Set 视图。Set 中的每个元素都是一个 Map.Entry 对象，可以使用 getKey() 和 getValue() 方法（还有一个 setValue() 方法）访问后者的键元素和值元素</td>
</tr>
<tr>
<td>keySet()</td>
<td align="left">返回 Map 中所包含键的 Set 视图。删除 Set 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
<tr>
<td>values()</td>
<td align="left">返回 map 中所包含值的 Collection 视图。删除 Collection 中的元素还将删除 Map 中相应的映射（键和值）</td>
</tr>
<tr>
<td>get(Object key)</td>
<td align="left">返回与指定键关联的值</td>
</tr>
<tr>
<td>containsKey(Object key)</td>
<td align="left">如果 Map 包含指定键的映射，则返回 true</td>
</tr>
<tr>
<td>containsValue(Object value)</td>
<td align="left">如果此 Map 将一个或多个键映射到指定值，则返回 true</td>
</tr>
<tr>
<td>size()</td>
<td align="left">返回 Map 中的键-值映射的数目</td>
</tr>
<tr>
<td>isEmpty()</td>
<td align="left">如果 Map 不包含键-值映射，则返回 true</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Java并发编程记录</title>
    <url>/2021/03/06/Java%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />


<span id="more"></span>
<h1 id="Java中创建线程池的方式一般有两种"><a href="#Java中创建线程池的方式一般有两种" class="headerlink" title="Java中创建线程池的方式一般有两种"></a>Java中创建线程池的方式一般有两种</h1><ol>
<li>通过<code>Executors</code>工厂方法创建</li>
<li>通过<code>ThreadPoolExecutor</code>自定义创建(推荐，可以指定线程池大小)</li>
</ol>
<p>线程池不允许使用Executors去创建，而是通过ThreadPoolExecutor的方式的原因：</p>
<ol>
<li>newFixedThreadPool和newSingleThreadExecutor:主要问题是堆积的请求处理队列可能会耗费非常大的内存，甚至OOM</li>
<li>newCachedThreadPool和newScheduledThreadPool:主要问题是线程数最大数是Integer.MAX_VALUE，可能会创建数量非常多的线程，甚至OOM</li>
</ol>
<h1 id="Executors工厂方法"><a href="#Executors工厂方法" class="headerlink" title="Executors工厂方法"></a>Executors工厂方法</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ScheduledExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.TimeUnit;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThreadPoolExecutor</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建使用单个线程的线程池</span></span><br><span class="line">        ExecutorService es1 = Executors.newSingleThreadExecutor();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            es1.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es1.shutdown(); <span class="comment">// 线程池不再接收新的线程，并执行完已经提交的线程，最后关闭线程池</span></span><br><span class="line">        <span class="keyword">while</span> (!es1.isTerminated()) &#123; <span class="comment">// 等待线程执行结束,你也可以使用&quot;executor.awaitTermination();&quot;来等待</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es1 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建使用固定线程数的线程池</span></span><br><span class="line">        ExecutorService es2 = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            es2.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es2.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es2.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es2 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个会根据需要创建新线程的线程池</span></span><br><span class="line">        ExecutorService es3 = Executors.newCachedThreadPool();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++) &#123;</span><br><span class="line">            es3.submit(() -&gt; System.out.println(Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>));</span><br><span class="line">        &#125;</span><br><span class="line">        es3.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es3.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es3 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建拥有固定线程数量的定时线程任务的线程池</span></span><br><span class="line">        ScheduledExecutorService es4 = Executors.newScheduledThreadPool(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            es4.schedule(() -&gt; System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;--&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>), <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        es4.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es4.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es4 Finished&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建只有一个线程的定时线程任务的线程池</span></span><br><span class="line">        ScheduledExecutorService es5 = Executors.newSingleThreadScheduledExecutor();</span><br><span class="line">        System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis());</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            es5.schedule(() -&gt; System.out.println(<span class="string">&quot;时间：&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;--&quot;</span> + Thread.currentThread().getName() + <span class="string">&quot;正在执行任务&quot;</span>), <span class="number">3</span>, TimeUnit.SECONDS);</span><br><span class="line">        &#125;</span><br><span class="line">        es5.shutdown();</span><br><span class="line">        <span class="keyword">while</span> (!es5.isTerminated()) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;es5 Finished&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="ThreadPoolExecutor自定义方式"><a href="#ThreadPoolExecutor自定义方式" class="headerlink" title="ThreadPoolExecutor自定义方式"></a>ThreadPoolExecutor自定义方式</h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ThreadPoolExecutor</span><span class="params">(<span class="keyword">int</span> corePoolSize, <span class="keyword">int</span> maximumPoolSize,<span class="keyword">long</span> keepAliveTime,TimeUnit unit,BlockingQueue workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler)</span> </span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><code>corePoolSize</code>：核心池的大小，这个参数跟后面讲述的线程池的实现原理有非常大的关系。在创建了线程池后，默认情况下，线程池中并没有任何线程，而是等待有任务到来才创建线程去执行任务，除非调用了<code>prestartAllCoreThreads()</code>或者<code>prestartCoreThread()</code>方法，从这2个方法的名字就可以看出，是预创建线程的意思，即在没有任务到来之前就创建<code>corePoolSize</code>个线程或者一个线程。默认情况下，在创建了线程池后，线程池中的线程数为0，当有任务来之后，就会创建一个线程去执行任务，当线程池中的线程数目达到<code>corePoolSize</code>后，就会把到达的任务放到缓存队列当中；</li>
<li><code>maximumPoolSize</code>：线程池最大线程数，这个参数也是一个非常重要的参数，它表示在线程池中最多能创建多少个线程；</li>
<li><code>keepAliveTime</code>：表示线程没有任务执行时最多保持多久时间会终止。默认情况下，只有当线程池中的线程数大于<code>corePoolSize</code>时，<code>keepAliveTime</code>才会起作用，直到线程池中的线程数不大于<code>corePoolSize</code>，即当线程池中的线程数大于<code>corePoolSize</code>时，如果一个线程空闲的时间达到<code>keepAliveTime</code>，则会终止，直到线程池中的线程数不超过<code>corePoolSize</code>。但是如果调用了<code>allowCoreThreadTimeOut(boolean)</code>方法，在线程池中的线程数不大于<code>corePoolSize</code>时，<code>keepAliveTime</code>参数也会起作用，直到线程池中的线程数为0；<br><code>unit</code>：参数<code>keepAliveTime</code>的时间单位，有7种取值，在<code>TimeUnit</code>类中有7种静态属性：</li>
</ul>
<ol>
<li>TimeUnit.DAYS; // 天</li>
<li>TimeUnit.HOURS; // 小时</li>
<li>TimeUnit.MINUTES; // 分钟</li>
<li>TimeUnit.SECONDS; // 秒</li>
<li>TimeUnit.MILLISECONDS; // 毫秒</li>
<li>TimeUnit.MICROSECONDS; // 微妙</li>
<li>TimeUnit.NANOSECONDS; // 纳秒</li>
</ol>
<ul>
<li><code>workQueue</code>：一个阻塞队列，用来存储等待执行的任务，这个参数的选择也很重要，会对线程池的运行过程产生重大影响，一般来说，这里的阻塞队列有以下几种选择：</li>
</ul>
<ol>
<li>ArrayBlockingQueue ：一个由数组结构组成的有界阻塞队列</li>
<li>LinkedBlockingQueue ：一个由链表结构组成的有界阻塞队列</li>
<li>PriorityBlockingQueue ：一个支持优先级排序的无界阻塞队列</li>
<li>DelayQueue： 一个使用优先级队列实现的无界阻塞队列</li>
<li>SynchronousQueue： 一个不存储元素的阻塞队列</li>
<li>LinkedTransferQueue： 一个由链表结构组成的无界阻塞队列</li>
<li>LinkedBlockingDeque： 一个由链表结构组成的双向阻塞队列。</li>
</ol>
<p><code>ArrayBlockingQueue</code>和<code>PriorityBlockingQueue</code>使用较少，一般使用<code>LinkedBlockingQueue</code>和<code>SynchronousQueue</code>。线程池的排队策略与<code>BlockingQueue</code>有关。</p>
<ul>
<li><code>threadFactory</code>：用于设置创建线程的工厂，可以通过线程工厂给每个创建出来的线程做些更有意义的事情，比如设置daemon和优先级等等</li>
<li><code>handler</code>：表示当拒绝处理任务时的策略，有以下四种取值：</li>
</ul>
<ol>
<li>AbortPolicy：直接抛出异常</li>
<li>CallerRunsPolicy：只用调用者所在线程来运行任务</li>
<li>DiscardOldestPolicy：丢弃队列里最近的一个任务，并执行当前任务</li>
<li>DiscardPolicy：不处理，丢弃掉</li>
<li>也可以根据应用场景需要来实现<code>RejectedExecutionHandler</code>接口自定义策略。如记录日志或持久化不能处理的任务</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> corePoolSize = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">int</span> maximumPoolSize = <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">long</span> keepAliveTime = <span class="number">10</span>;</span><br><span class="line">        TimeUnit unit = TimeUnit.SECONDS;</span><br><span class="line">        BlockingQueue&lt;Runnable&gt; workQueue = <span class="keyword">new</span> ArrayBlockingQueue&lt;&gt;(<span class="number">2</span>);</span><br><span class="line">        ThreadFactory threadFactory = <span class="keyword">new</span> NameTreadFactory();</span><br><span class="line">        RejectedExecutionHandler handler = <span class="keyword">new</span> MyIgnorePolicy();</span><br><span class="line">        ThreadPoolExecutor executor = <span class="keyword">new</span> ThreadPoolExecutor(corePoolSize, maximumPoolSize, keepAliveTime, unit,</span><br><span class="line">                workQueue, threadFactory, handler);</span><br><span class="line">        executor.prestartAllCoreThreads(); <span class="comment">// 预启动所有核心线程</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; i++) &#123;</span><br><span class="line">            MyTask task = <span class="keyword">new</span> MyTask(String.valueOf(i));</span><br><span class="line">            executor.execute(task);</span><br><span class="line">        &#125;</span><br><span class="line">        System.in.read(); <span class="comment">// 阻塞主线程</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">NameTreadFactory</span> <span class="keyword">implements</span> <span class="title">ThreadFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger mThreadNum = <span class="keyword">new</span> AtomicInteger(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> Thread <span class="title">newThread</span><span class="params">(Runnable r)</span> </span>&#123;</span><br><span class="line">            Thread t = <span class="keyword">new</span> Thread(r, <span class="string">&quot;my-thread-&quot;</span> + mThreadNum.getAndIncrement());</span><br><span class="line">            System.out.println(t.getName() + <span class="string">&quot; has been created&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span> t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyIgnorePolicy</span> <span class="keyword">implements</span> <span class="title">RejectedExecutionHandler</span> </span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">rejectedExecution</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            doLog(r, e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">doLog</span><span class="params">(Runnable r, ThreadPoolExecutor e)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 可做日志记录等</span></span><br><span class="line">            System.err.println(r.toString() + <span class="string">&quot; rejected&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTask</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> String name;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">MyTask</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.name = name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                System.out.println(<span class="keyword">this</span>.toString() + <span class="string">&quot; is running!&quot;</span>);</span><br><span class="line">                Thread.sleep(<span class="number">3000</span>); <span class="comment">//让任务执行慢点</span></span><br><span class="line">            &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;MyTask [name=&quot;</span> + name + <span class="string">&quot;]&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中线程线程1-4先占满了核心线程和最大线程数量，然后4、5线程进入等待队列，7-10线程被直接忽略拒绝执行，等1-4线程中有线程执行完后通知4、5线程继续执行。</p>
<h1 id="CountDownLatch"><a href="#CountDownLatch" class="headerlink" title="CountDownLatch"></a>CountDownLatch</h1><p>CountDownLatch使一个线程等待其他线程各自执行完毕后再执行，通过一个计数器来实现的，计数器的初始值是线程的数量。每当一个线程执行完毕后，计数器的值就-1，当计数器的值为0时，表示所有线程都执行完毕，然后在闭锁上等待的线程就可以恢复工作了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">10</span>;</span><br><span class="line">        ThreadPoolExecutor threadPoolExecutor = <span class="keyword">new</span> ThreadPoolExecutor(<span class="number">10</span>, <span class="number">15</span>,</span><br><span class="line">                <span class="number">0L</span>, TimeUnit.SECONDS, <span class="keyword">new</span> LinkedBlockingQueue&lt;&gt;(<span class="number">10</span>));</span><br><span class="line">        <span class="keyword">final</span> CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(size);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI1 = i;</span><br><span class="line">            <span class="comment">// 使用一个对象实现Runnable接口或者直接使用lambda表达式(JDK1.8之后)</span></span><br><span class="line">            threadPoolExecutor.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(finalI1);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            threadPoolExecutor.shutdownNow();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;Finished all threads&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Java使用线程池前后执行速度对比"><a href="#Java使用线程池前后执行速度对比" class="headerlink" title="Java使用线程池前后执行速度对比"></a>Java使用线程池前后执行速度对比</h1><p>本例中使用Java自带方法实现线程池，并比较不使用多线程和使用多线程使用冒泡排序耗时。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.concurrent.CountDownLatch;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.ExecutorService;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.Executors;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 1.不使用线程池情况</span></span><br><span class="line">        notUseThreadPool();</span><br><span class="line">        <span class="comment">// 2.使用线程池的情况</span></span><br><span class="line">        useThreadPool();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 不使用线程池情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">notUseThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;正在执行第&quot;</span> + (i + <span class="number">1</span>) + <span class="string">&quot;次循环&quot;</span>);</span><br><span class="line">            bubbleSort();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 使用线程池的情况</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">useThreadPool</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        <span class="comment">//创建使用固定线程数的线程池</span></span><br><span class="line">        ExecutorService executorService = Executors.newFixedThreadPool(<span class="number">6</span>);</span><br><span class="line">        <span class="comment">// 判断线程是否全部执行结束</span></span><br><span class="line">        CountDownLatch countDownLatch = <span class="keyword">new</span> CountDownLatch(<span class="number">10</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> finalI = i;</span><br><span class="line">            executorService.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;正在执行第&quot;</span> + (finalI + <span class="number">1</span>) + <span class="string">&quot;个线程&quot;</span>);</span><br><span class="line">                    bubbleSort();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;线程池异常A&quot;</span> + e.getMessage());</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    countDownLatch.countDown();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 等待线程全部执行结束</span></span><br><span class="line">            countDownLatch.await();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;countDownLatch.await&quot;</span> + e.getMessage());</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 关闭线程池</span></span><br><span class="line">            executorService.shutdown();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;耗时：&quot;</span> + (System.currentTimeMillis() - startTime) + <span class="string">&quot;毫秒&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 冒泡排序用来模拟一个任务</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] array = randomCommon(<span class="number">0</span>, <span class="number">10000000</span>, <span class="number">50000</span>);</span><br><span class="line">        <span class="keyword">int</span> swap;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; array.length - i - <span class="number">1</span>; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (array[j] &gt; array[j + <span class="number">1</span>]) &#123;</span><br><span class="line">                    swap = array[j];</span><br><span class="line">                    array[j] = array[j + <span class="number">1</span>];</span><br><span class="line">                    array[j + <span class="number">1</span>] = swap;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 随机指定范围内N个不重复的数</span></span><br><span class="line"><span class="comment">     * 最简单最基本的方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> min 指定范围最小值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> max 指定范围最大值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> n   随机数个数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span>[] randomCommon(<span class="keyword">int</span> min, <span class="keyword">int</span> max, <span class="keyword">int</span> n) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n &gt; (max - min + <span class="number">1</span>) || max &lt; min) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span>[] result = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (count &lt; n) &#123;</span><br><span class="line">            <span class="keyword">int</span> num = (<span class="keyword">int</span>) (Math.random() * (max - min)) + min;</span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (num == result[j]) &#123;</span><br><span class="line">                    flag = <span class="keyword">false</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                result[count] = num;</span><br><span class="line">                count++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="耗时"><a href="#耗时" class="headerlink" title="耗时"></a>耗时</h2><ol>
<li><p>10次冒泡排序有50000个元素的数组的效果对比<br>使用线程池耗时：10872毫秒<br>不使用线程池耗时：34558毫秒</p>
</li>
<li><p>10次冒泡排序有1000个元素的数组的效果对比<br>使用线程池耗时：60毫秒<br>不使用线程池耗时：19毫秒</p>
</li>
</ol>
<h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p>很显然，当计算量比较大时，线程池的方式更加高效，当计算量较小时则不适用线程池更加高效</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux下常用软件安装</title>
    <url>/2021/03/06/Linux%E4%B8%8B%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>总结一些在Linux环境下安装Nginx1.8 MySQL5.7 JDK7.8 Python3.7等常用软件的教程</p>
<span id="more"></span>

<h1 id="Linux下安装Nginx1-8"><a href="#Linux下安装Nginx1-8" class="headerlink" title="Linux下安装Nginx1.8"></a>Linux下安装Nginx1.8</h1><p>Nginx华为镜像站下载地址：<a href="https://repo.huaweicloud.com/nginx/">https://repo.huaweicloud.com/nginx/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 安装Nginx前置软件</span><br><span class="line">yum -y install gcc pcre-devel zlib-devel openssl openssl-devel</span><br><span class="line">// 下载</span><br><span class="line">wget https://repo.huaweicloud.com/nginx/nginx-1.8.0.tar.gz</span><br><span class="line">// 解压</span><br><span class="line">tar -zxvf nginx-1.8.0.tar.gz</span><br><span class="line">// 进入nginx目录</span><br><span class="line">cd nginx-1.8.0</span><br><span class="line">// 配置</span><br><span class="line">./configure --prefix=/usr/local/nginx</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">// 测试是否安装成功</span><br><span class="line">cd /usr/loca/nginx/</span><br><span class="line">./sbin/nginx -t</span><br></pre></td></tr></table></figure>

<h2 id="错误信息"><a href="#错误信息" class="headerlink" title="错误信息"></a>错误信息</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx: [alert] could not open error log file: open() &quot;/usr/local/nginx/logs/error.log&quot; failed (2: No such file or directory)</span><br><span class="line">2016/09/13 19:08:56 [emerg] 6996#0: open() &quot;/usr/local/nginx/logs/access.log&quot; failed (2: No such file or directory)</span><br></pre></td></tr></table></figure>

<p>原因分析：nginx/目录下没有logs文件夹</p>
<h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir logs</span><br><span class="line">chmod 700 logs</span><br></pre></td></tr></table></figure>

<p>正常情况的信息输出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">nginx: the configuration file /usr/local/nginx/conf/nginx.conf syntax is ok</span><br><span class="line">nginx: configuration file /usr/local/nginx/conf/nginx.conf test is successful</span><br></pre></td></tr></table></figure>

<h2 id="启动nginx"><a href="#启动nginx" class="headerlink" title="启动nginx"></a>启动nginx</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /usr/local/nginx/sbin</span><br><span class="line">./nginx</span><br></pre></td></tr></table></figure>

<h2 id="防火前设置"><a href="#防火前设置" class="headerlink" title="防火前设置"></a>防火前设置</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看80端口是否开放</span></span><br><span class="line">firewall-cmd --query-port=80/tcp</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将80端口永久开放</span></span><br><span class="line">firewall-cmd --add-port=80/tcp --permanent</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">systemctl restart firewalld</span><br></pre></td></tr></table></figure>

<h2 id="Nginx命令"><a href="#Nginx命令" class="headerlink" title="Nginx命令"></a>Nginx命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 重启</span><br><span class="line">nginx -s reload</span><br><span class="line">// 停止</span><br><span class="line">nginx -s stop</span><br><span class="line">// 启动</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装Node-js"><a href="#Linux下安装Node-js" class="headerlink" title="Linux下安装Node.js"></a>Linux下安装Node.js</h1><p>Node.js官网：<a href="https://nodejs.org/en/">https://nodejs.org/en/</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 解压</span><br><span class="line">tar xf node-v14.15.4-linux-x64.tar.xz</span><br><span class="line">// 进入解压目录</span><br><span class="line">cd node-v14.15.4-linux-x64/</span><br><span class="line">// 执行node命令 查看版本</span><br><span class="line">./bin/node -v                               </span><br><span class="line">// 解压文件的 bin 目录底下包含了 node、npm 等命令，我们可以使用 ln 命令来设置软连接</span><br><span class="line">mv /data/tmp/node-v14.15.4-linux-x64 /data/service/</span><br><span class="line">ln -s /data/service/node-v14.15.4-linux-x64/bin/npm /usr/local/bin/ </span><br><span class="line">ln -s /data/service/node-v14.15.4-linux-x64/bin/node /usr/local/bin/</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装JDK1-8"><a href="#Linux下安装JDK1-8" class="headerlink" title="Linux下安装JDK1.8"></a>Linux下安装JDK1.8</h1><p>Shell一键脚本，用的华为镜像，CentOS7上测试通过</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Color</span></span><br><span class="line">red=&#x27;\033[31m&#x27;</span><br><span class="line">green=&#x27;\033[32m&#x27;</span><br><span class="line">yellow=&#x27;\033[33m&#x27;</span><br><span class="line">plain=&#x27;\033[0m&#x27;</span><br><span class="line"></span><br><span class="line">get_char() &#123;</span><br><span class="line">  SAVEDSTTY=$(stty -g)</span><br><span class="line">  stty -echo</span><br><span class="line">  stty cbreak</span><br><span class="line">  dd if=/dev/tty bs=1 count=1 2&gt;/dev/null</span><br><span class="line">  stty -raw</span><br><span class="line">  stty echo</span><br><span class="line">  stty $SAVEDSTTY</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一些说明</span></span><br><span class="line">clear</span><br><span class="line">echo</span><br><span class="line">echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">echo &#x27;	System Required: CentOS 7&#x27;</span><br><span class="line">echo &#x27;	Description: Install JDK1.8&#x27;</span><br><span class="line">echo &#x27;	Version: 1.0.0&#x27;</span><br><span class="line">echo &#x27;	Author: Jonsson &lt;yz808@outlook.com&gt;&#x27;</span><br><span class="line">echo &#x27;	Blog: https://blog.csdn.net/y1534414425&#x27;</span><br><span class="line">echo &#x27;	GitHub: https://github.com/jonssonyan&#x27;</span><br><span class="line">echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">echo</span><br><span class="line">echo &quot;Press any key to start...or Press Ctrl+C to cancel&quot;</span><br><span class="line">char=$(get_char)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否为root用户</span></span><br><span class="line">[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[$&#123;red&#125;Error$&#123;plain&#125;] This script must be run as root!&quot; &amp;&amp; exit 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断JDK源文件是否下载过</span></span><br><span class="line">if [ ! -f &quot;./jdk-8u202-linux-x64.tar.gz&quot; ]; then</span><br><span class="line">  wget https://repo.huaweicloud.com/java/jdk/8u202-b08/jdk-8u202-linux-x64.tar.gz</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压JDK到指定文件夹</span></span><br><span class="line">mkdir -p /usr/local/java &amp;&amp; tar -zxvf jdk-8u202-linux-x64.tar.gz -C /usr/local/java</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加JDK到环境变量</span></span><br><span class="line">chmod 700 /etc/profile</span><br><span class="line">echo &#x27;#Java Env&#x27; &gt;&gt;/etc/profile</span><br><span class="line">echo &#x27;export JAVA_HOME=/usr/local/java/jdk1.8.0_202&#x27; &gt;&gt;/etc/profile</span><br><span class="line">echo &#x27;export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar&#x27; &gt;&gt;/etc/profile</span><br><span class="line">echo &#x27;export PATH=$PATH:$JAVA_HOME/bin&#x27; &gt;&gt;/etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否为32位系统</span></span><br><span class="line">bit=$(getconf LONG_BIT)</span><br><span class="line">if [ $&#123;bit&#125; -eq 32 ]; then</span><br><span class="line">  sudo yum install glibc.i686</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 检测Java是否安装</span></span><br><span class="line">java -version</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;green&#125;JDK1.8安装成功$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;red&#125;JDK1.8安装失败,请检查你的配置$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装MySQL5-7-29"><a href="#Linux下安装MySQL5-7-29" class="headerlink" title="Linux下安装MySQL5.7.29"></a>Linux下安装MySQL5.7.29</h1><p>Shell一键脚本，用的华为镜像，CentOS上测试通过</p>
<p>初始化密码是随机生成的12位，如果想自定义数据库密码请在登录mysql后执行以下命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SET PASSWORD = PASSWORD(&#x27;你的密码&#x27;);</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; PASSWORD EXPIRE NEVER;</span><br><span class="line">FLUSH PRIVILEGES;  </span><br></pre></td></tr></table></figure>

<p>设置远程主机登录，注意下面的<code>your username</code> 和 <code>your password</code>改成你需要设置的用户和密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">GRANT ALL PRIVILEGES ON *.* TO &#x27;your username&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;your password&#x27; WITH GRANT OPTION;</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line">PATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin</span><br><span class="line">export PATH</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Color</span></span><br><span class="line">red=&#x27;\033[31m&#x27;</span><br><span class="line">green=&#x27;\033[32m&#x27;</span><br><span class="line">yellow=&#x27;\033[33m&#x27;</span><br><span class="line">plain=&#x27;\033[0m&#x27;</span><br><span class="line"></span><br><span class="line">get_char() &#123;</span><br><span class="line">  SAVEDSTTY=$(stty -g)</span><br><span class="line">  stty -echo</span><br><span class="line">  stty cbreak</span><br><span class="line">  dd if=/dev/tty bs=1 count=1 2&gt;/dev/null</span><br><span class="line">  stty -raw</span><br><span class="line">  stty echo</span><br><span class="line">  stty $SAVEDSTTY</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 一些说明</span></span><br><span class="line">clear</span><br><span class="line">echo</span><br><span class="line">echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">echo &#x27;	System Required: CentOS 7 64位&#x27;</span><br><span class="line">echo &#x27;	Description: Install MySQL5.7.29&#x27;</span><br><span class="line">echo &#x27;	Version: 1.0.0&#x27;</span><br><span class="line">echo &#x27;	Author: Jonsson &lt;yz808@outlook.com&gt;&#x27;</span><br><span class="line">echo &#x27;	Blog: https://blog.csdn.net/y1534414425&#x27;</span><br><span class="line">echo &#x27;	GitHub: https://github.com/jonssonyan&#x27;</span><br><span class="line">echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">echo</span><br><span class="line">echo &quot;Press any key to start...or Press Ctrl+C to cancel&quot;</span><br><span class="line">char=$(get_char)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断是否为root用户</span></span><br><span class="line">[[ $EUID -ne 0 ]] &amp;&amp; echo -e &quot;[$&#123;red&#125;Error$&#123;plain&#125;] This script must be run as root!&quot; &amp;&amp; exit 1</span><br><span class="line">filename=$(rpm -qa|grep mariadb | wc -l)</span><br><span class="line">if [ $&#123;filename -ne 0&#125; ]; then</span><br><span class="line">    rpm -e --nodeps $&#123;filename&#125; &amp;&amp; rm /etc/my.cnf</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 判断MySQL源文件是否下载过</span></span><br><span class="line">if [ ! -f &quot;./mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz&quot; ]; then</span><br><span class="line">  wget https://repo.huaweicloud.com/mysql/Downloads/MySQL-5.7/mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压MySQL到指定文件夹</span></span><br><span class="line">mkdir -p /usr/local/mysql &amp;&amp; tar -zxvf mysql-5.7.31-linux-glibc2.12-x86_64.tar.gz -C /usr/local/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建mysql用户组和用户并修改权限</span></span><br><span class="line">groupadd mysql</span><br><span class="line">useradd -r -g mysql mysql</span><br><span class="line"><span class="meta">#</span><span class="bash">创建目录赋予权限</span></span><br><span class="line">mkdir -p /data/mysql &amp;&amp; chown mysql:mysql -R /data/mysql</span><br><span class="line">if [ ! -f &quot;/etc/my.cnf&quot; ]; then</span><br><span class="line">  touch /etc/my.cnf</span><br><span class="line">fi</span><br><span class="line">echo &quot;[mysqld]&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;bind-address=0.0.0.0&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;port=3306&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;user=mysql&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;basedir=/usr/local/mysql/mysql-5.7.31-linux-glibc2.12-x86_64&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;datadir=/data/mysql&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;socket=/tmp/mysql.sock&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;log-error=/data/mysql/mysql.err&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;pid-file=/data/mysql/mysql.pid&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;# character config&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;character_set_server=utf8mb4&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;symbolic-links=0&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">echo &quot;explicit_defaults_for_timestamp=true&quot; &gt;&gt;/etc/my.cnf</span><br><span class="line">line=$(rpm -qa | grep libaio | wc -l)</span><br><span class="line">if [ $&#123;line&#125; -eq 0 ]; then</span><br><span class="line">  yum install libaio-devel.x86_64</span><br><span class="line">fi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化数据库</span></span><br><span class="line">cd /usr/local/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/bin/ &amp;&amp; chown -R mysql:mysql ./ &amp;&amp; ./mysqld --defaults-file=/etc/my.cnf --basedir=/usr/local/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/ --datadir=/data/mysql/ --user=mysql --initialize</span><br><span class="line">str=$(cat /data/mysql/mysql.err | awk &#x27;END &#123;print&#125;&#x27;)</span><br><span class="line">pwd=$&#123;str:0-12&#125;</span><br><span class="line">cp /usr/local/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/support-files/mysql.server /etc/init.d/mysql</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加MySQL到环境变量</span></span><br><span class="line">chmod 700 /etc/profile</span><br><span class="line">echo &#x27;#MySQL Env&#x27; &gt;&gt;/etc/profile</span><br><span class="line">echo &#x27;export PATH=$PATH:/usr/local/mysql/mysql-5.7.31-linux-glibc2.12-x86_64/bin&#x27; &gt;&gt;/etc/profile</span><br><span class="line">source /etc/profile</span><br><span class="line">mkdir /var/log/mariadb &amp;&amp; touch /var/log/mariadb/mariadb.log &amp;&amp; chown -R mysql:mysql /var/log/mariadb/</span><br><span class="line">service mysql start</span><br><span class="line">if [ $? -eq 0 ]; then</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;green&#125;MySQL5.7.29安装成功$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;green&#125;数据库初始密码为：$&#123;plain&#125;$&#123;red&#125;$&#123;pwd&#125;$&#123;plain&#125;$&#123;green&#125;(请妥善保存密码或者及时修改)$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">else</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;red&#125;MySQL5.7.29安装失败,请检查你的配置$&#123;plain&#125;&quot;</span><br><span class="line">  echo -e &quot;$&#123;yellow&#125;============================================================$&#123;plain&#125;&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装lrzsz"><a href="#Linux下安装lrzsz" class="headerlink" title="Linux下安装lrzsz"></a>Linux下安装lrzsz</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y lrzsz</span><br></pre></td></tr></table></figure>

<h2 id="sz命令发送文件从服务器到本地"><a href="#sz命令发送文件从服务器到本地" class="headerlink" title="sz命令发送文件从服务器到本地"></a>sz命令发送文件从服务器到本地</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sz filename</span><br></pre></td></tr></table></figure>

<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-2 2020-11-02]# sz --help</span><br><span class="line">sz version 0.12.20</span><br><span class="line">Usage: sz [options] file ...</span><br><span class="line">   or: sz [options] -&#123;c|i&#125; COMMAND</span><br><span class="line">Send file(s) with ZMODEM/YMODEM/XMODEM protocol</span><br><span class="line">    (X) = option applies to XMODEM only</span><br><span class="line">    (Y) = option applies to YMODEM only</span><br><span class="line">    (Z) = option applies to ZMODEM only</span><br><span class="line">  -+, --append                append to existing destination file (Z)</span><br><span class="line">  -2, --twostop               use 2 stop bits</span><br><span class="line">  -4, --try-4k                go up to 4K blocksize</span><br><span class="line">      --start-4k              start with 4K blocksize (doesn&#x27;t try 8)</span><br><span class="line">  -8, --try-8k                go up to 8K blocksize</span><br><span class="line">      --start-8k              start with 8K blocksize</span><br><span class="line">  -a, --ascii                 ASCII transfer (change CR/LF to LF)</span><br><span class="line">  -b, --binary                binary transfer</span><br><span class="line">  -B, --bufsize N             buffer N bytes (N==auto: buffer whole file)</span><br><span class="line">  -c, --command COMMAND       execute remote command COMMAND (Z)</span><br><span class="line">  -C, --command-tries N       try N times to execute a command (Z)</span><br><span class="line">  -d, --dot-to-slash          change &#x27;.&#x27; to &#x27;/&#x27; in pathnames (Y/Z)</span><br><span class="line">      --delay-startup N       sleep N seconds before doing anything</span><br><span class="line">  -e, --escape                escape all control characters (Z)</span><br><span class="line">  -E, --rename                force receiver to rename files it already has</span><br><span class="line">  -f, --full-path             send full pathname (Y/Z)</span><br><span class="line">  -i, --immediate-command CMD send remote CMD, return immediately (Z)</span><br><span class="line">  -h, --help                  print this usage message</span><br><span class="line">  -k, --1k                    send 1024 byte packets (X)</span><br><span class="line">  -L, --packetlen N           limit subpacket length to N bytes (Z)</span><br><span class="line">  -l, --framelen N            limit frame length to N bytes (l&gt;=L) (Z)</span><br><span class="line">  -m, --min-bps N             stop transmission if BPS below N</span><br><span class="line">  -M, --min-bps-time N          for at least N seconds (default: 120)</span><br><span class="line">  -n, --newer                 send file if source newer (Z)</span><br><span class="line">  -N, --newer-or-longer       send file if source newer or longer (Z)</span><br><span class="line">  -o, --16-bit-crc            use 16 bit CRC instead of 32 bit CRC (Z)</span><br><span class="line">  -O, --disable-timeouts      disable timeout code, wait forever</span><br><span class="line">  -p, --protect               protect existing destination file (Z)</span><br><span class="line">  -r, --resume                resume interrupted file transfer (Z)</span><br><span class="line">  -R, --restricted            restricted, more secure mode</span><br><span class="line">  -q, --quiet                 quiet (no progress reports)</span><br><span class="line">  -s, --stop-at &#123;HH:MM|+N&#125;    stop transmission at HH:MM or in N seconds</span><br><span class="line">      --tcp                   build a TCP connection to transmit files</span><br><span class="line">      --tcp-server            open socket, wait for connection</span><br><span class="line">  -u, --unlink                unlink file after transmission</span><br><span class="line">  -U, --unrestrict            turn off restricted mode (if allowed to)</span><br><span class="line">  -v, --verbose               be verbose, provide debugging information</span><br><span class="line">  -w, --windowsize N          Window is N bytes (Z)</span><br><span class="line">  -X, --xmodem                use XMODEM protocol</span><br><span class="line">  -y, --overwrite             overwrite existing files</span><br><span class="line">  -Y, --overwrite-or-skip     overwrite existing files, else skip</span><br><span class="line">      --ymodem                use YMODEM protocol</span><br><span class="line">  -Z, --zmodem                use ZMODEM protocol</span><br></pre></td></tr></table></figure>

<p>如果能够确定所传输的文件是文本格式的，使用 <code>sz -a files</code><br>如果是二进制文件，使用 <code>sz -be files</code></p>
<h2 id="rz命令发送文件从本地到服务器"><a href="#rz命令发送文件从本地到服务器" class="headerlink" title="rz命令发送文件从本地到服务器"></a>rz命令发送文件从本地到服务器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rz filename</span><br></pre></td></tr></table></figure>

<h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@node-2 2020-11-02]# rz --help</span><br><span class="line">rz version 0.12.20</span><br><span class="line">Usage: rz [options] [filename.if.xmodem]</span><br><span class="line">Receive files with ZMODEM/YMODEM/XMODEM protocol</span><br><span class="line">    (X) = option applies to XMODEM only</span><br><span class="line">    (Y) = option applies to YMODEM only</span><br><span class="line">    (Z) = option applies to ZMODEM only</span><br><span class="line">  -+, --append                追加到现有文件</span><br><span class="line">  -a, --ascii                 ascii传输（将CR/LF更改为LF）</span><br><span class="line">  -b, --binary                二进制二进制传输</span><br><span class="line">  -B, --bufsize N             buffer N字节（N==auto：缓冲整个文件）</span><br><span class="line">  -c, --with-crc              使用16位crc（X）</span><br><span class="line">  -C, --allow-remote-commands 允许远程命令允许执行远程命令（Z）</span><br><span class="line">  -D, --null                  将所有接收到的数据写入/dev/null</span><br><span class="line">      --delay-startup N       睡眠N秒再做任何事情</span><br><span class="line">  -e, --escape                转义转义控制字符（Z）</span><br><span class="line">  -E, --rename                重命名重命名已存在的所有文件</span><br><span class="line">      --errors N              每N字节生成一个CRC错误（调试）</span><br><span class="line">  -h, --help                  帮助，打印此用法消息</span><br><span class="line">  -m, --min-bps N             N如果bps低于N，停止传输</span><br><span class="line">  -M, --min-bps-time N        至少持续N秒（默认值：120）</span><br><span class="line">  -O, --disable-timeouts      禁用超时代码，永远等待数据</span><br><span class="line">      --o-sync                同步写入输出</span><br><span class="line">  -p, --protect               保护保护现有文件</span><br><span class="line">  -q, --quiet                 安静，没有进度报告</span><br><span class="line">  -r, --resume                尝试恢复中断的文件传输（Z）</span><br><span class="line">  -R, --restricted            限制，更安全的模式</span><br><span class="line">  -s, --stop-at &#123;HH:MM|+N&#125;    在HH:MM|+N秒内停止传输</span><br><span class="line">  -S, --timesync              请求远程时间（两次：设置本地时间）</span><br><span class="line">      --syslog[=off]          如果可能，请打开或关闭syslog</span><br><span class="line">  -t, --timeout N             将timeout设置为十分之N秒</span><br><span class="line">  -u, --keep-uppercase        保持大写文件名</span><br><span class="line">  -U, --unrestrict            禁用限制模式（如允许）</span><br><span class="line">  -v, --verbose               be verbose，提供调试信息</span><br><span class="line">  -w, --windowsize N          Window为N字节（Z）</span><br><span class="line">  -X  --xmodem                使用xmodem协议</span><br><span class="line">  -y, --overwrite             是，删除现有文件（如果有）</span><br><span class="line">      --ymodem                使用ymodem协议</span><br><span class="line">  -Z, --zmodem                使用zmodem协议</span><br></pre></td></tr></table></figure>

<h1 id="Linux下安装Python3-7-9和pip3"><a href="#Linux下安装Python3-7-9和pip3" class="headerlink" title="Linux下安装Python3.7.9和pip3"></a>Linux下安装Python3.7.9和pip3</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">// 安装依赖包，如果不安装将导致编译失败，或者功能缺失</span><br><span class="line">yum -y install openssl-devel zlib-devel gcc</span><br><span class="line">// 在local目录下创建python3目录，供放置最终的可执行文件</span><br><span class="line">mkdir /usr/local/python3</span><br><span class="line">// 先去python官网下载python3源码安装包</span><br><span class="line">wget https://www.python.org/ftp/python/3.7.9/Python-3.7.9.tgz</span><br><span class="line">// 解压</span><br><span class="line">tar -xvf Python-3.7.9.tgz</span><br><span class="line">// 转到解压文件夹下</span><br><span class="line">cd Python-3.7.9</span><br><span class="line">// 配置安装目录 在python安装配置中一定要加上`--enable-shared`参数就可以生成对应动态链接库</span><br><span class="line">./configure --enable-shared --prefix=/usr/local/python3</span><br><span class="line">// 编译源码执行源码安装</span><br><span class="line">make &amp;&amp; make install</span><br><span class="line">// 在 /usr/bin 文件夹下创建python3软链接，方便直接使用命令名启动</span><br><span class="line">ln -s /usr/local/python3/bin/python3  /usr/bin/python3</span><br><span class="line">// 任意切换到某一个文件夹，验证是否能启动 python3</span><br><span class="line">python3 -V # 查看python版本</span><br><span class="line">python3  # 看到进入Python交互环境表示安装成功</span><br><span class="line">// 配置 pip3 软链接</span><br><span class="line">ln -s /usr/local/python3/bin/pip3 /usr/bin/pip3</span><br><span class="line">// 验证 pip3 是否可用</span><br><span class="line">pip3 -V  # 查看pip版本</span><br><span class="line">pip3 install numpy  # 任意测试安装一个包，我这里是 numpy，可用更换为自己需要的包名</span><br></pre></td></tr></table></figure>
<p>如果安装过程里还有缺失的依赖库提示，那么根据提示安装即可</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>环境搭建</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>层次数据结构的数据表设计</title>
    <url>/2021/03/06/%E5%B1%82%E6%AC%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E7%9A%84%E6%95%B0%E6%8D%AE%E8%A1%A8%E8%AE%BE%E8%AE%A1/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>存储树形结构数据是一个常见的问题，同时也有多种解决方案。</p>
<span id="more"></span>

<p>这里介绍三种树形结构的表设计方案：</p>
<ul>
<li>邻接表模型</li>
<li>基于路径和层级的表设计</li>
<li>基于左右值编码的表设计（MPT）</li>
</ul>
<h1 id="邻接表模型"><a href="#邻接表模型" class="headerlink" title="邻接表模型"></a>邻接表模型</h1><p>最简单的方法就是使用邻接表模型或者叫做递归模型。通过显示地描述某一节点的父节点，从而能够建立二维的关系表，你只需要一个简单的函数去迭代查询即可获取你的数据。</p>
<p>示例如下：</p>
<p><img src="https://files.mdnice.com/user/10819/560cc157-c613-440f-9dac-00e7dc65a678.png"></p>
<p>优点：</p>
<ul>
<li>设计简单</li>
<li>实现容易</li>
<li>直观</li>
</ul>
<p>缺点：</p>
<ul>
<li>由于是递归模型CRUD操作低效</li>
</ul>
<h1 id="基于路径和层级的表设计"><a href="#基于路径和层级的表设计" class="headerlink" title="基于路径和层级的表设计"></a>基于路径和层级的表设计</h1><p>在一的基础上加上一个 level 字段来表示当前节点到根节点的距离和一个 key 字段来表示搜索路径。</p>
<ol>
<li>Node_id 主键</li>
<li>Name 名字</li>
<li>Parent_id 父节点的id</li>
<li>key 搜索路径</li>
<li>level 表示当前节点到根节点的距离或者层级</li>
</ol>
<p>示例如下：</p>
<p><img src="https://files.mdnice.com/user/10819/fc6ddc22-8efb-4403-ac40-e79c8d430a66.png"></p>
<p>两种需求查询解决方案如下：</p>
<ol>
<li>查找d的所有子孙节点：<code>select * from table_name where key like &quot;$&#123;d.key&#125;-$&#123;d.id&#125;-%&quot;</code></li>
<li>查找某个节点的所有子节点：<code>select * from table_name where key like &quot;$&#123;d.key&#125;-$&#123;d.id&#125;-%&quot; and level=$&#123;d.level&#125;+1</code></li>
</ol>
<p>此设计结构简单，利用key和level两个辅助字段可以完成查询操作比一更加高效，而且维护这两个字段成本很低。</p>
<h1 id="基于左右值编码的表设计-MPT"><a href="#基于左右值编码的表设计-MPT" class="headerlink" title="基于左右值编码的表设计(MPT)"></a>基于左右值编码的表设计(MPT)</h1><p>为了避免对于树形结构查询时的“递归”过程，基于Tree的前序遍历设计一种全新的无递归查询、无限分组的左右值编码方案，来保存该树的数据。</p>
<p><img src="https://files.mdnice.com/user/10819/9a447673-eda1-444d-97ef-80aec19cc127.png"></p>
<p>如下图所示, 从根节点Food左侧开始，标记为1，并沿前序遍历的方向，依次在遍历的路径上标注数字，最后我们回到了根节点Food，并在右边写上了18。</p>
<p><strong>注：lft 和 rgt 分别对应 DFS 的发现时间 d 和完成时间相同 f</strong></p>
<p><img src="https://files.mdnice.com/user/10819/eb02a6c8-6b47-450e-aff7-5915f7db4f3d.png"></p>
<p>如果我们需要查询Fruit的后续节点，只需找出所有左值大于2，并且右值小于11的节点即可。</p>
<h2 id="获取某节点的子孙节点"><a href="#获取某节点的子孙节点" class="headerlink" title="获取某节点的子孙节点"></a>获取某节点的子孙节点</h2><p>返回某节点子孙节点的前序遍历列表，以Fruit为例：</p>
<p>SQL: <code>SELECT* FROM Tree WHERE Lft BETWEEN 2 AND 11 ORDER BY Lft ASC</code></p>
<p>查询结果如下：</p>
<p><img src="https://files.mdnice.com/user/10819/40e9345f-22b3-4954-9b0d-545fc355ee0b.png"></p>
<p>那么某个节点到底有多少的子孙节点呢？</p>
<p>通过该节点的左、右值我们可以将其子孙节点圈进来，则子孙总数 = (右值 – 左值– 1) / 2，以Fruit为例，其子孙总数为：(11 –2 – 1) / 2 = 4。</p>
<p>同时，为了更为直观地展现树形结构，我们需要知道节点在树中所处的层次，通过左、右值的SQL查询即可实现。以Fruit为例：<code>SELECT COUNT(*) FROM Tree WHERE Lft &lt;= 2 AND Rgt &gt;=11</code>。为了方便描述，我们可以为Tree建立一个视图，添加一个层次数列，该列数值可以写一个自定义函数来计算，函数定义如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">FUNCTION</span> dbo.CountLayer</span><br><span class="line">(</span><br><span class="line">    @node_id <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">RETURNS</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">  <span class="keyword">declare</span> @<span class="keyword">result</span> <span class="built_in">int</span></span><br><span class="line">  <span class="keyword">set</span> @<span class="keyword">result</span> = <span class="number">0</span></span><br><span class="line">  <span class="keyword">declare</span> @lft <span class="built_in">int</span></span><br><span class="line">  <span class="keyword">declare</span> @rgt <span class="built_in">int</span></span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> Node_id <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> @lft = Lft, @rgt = Rgt <span class="keyword">from</span> Tree <span class="keyword">where</span> node_id = @node_id</span><br><span class="line">    <span class="keyword">select</span> @<span class="keyword">result</span> = <span class="keyword">count</span>(*) <span class="keyword">from</span> Tree <span class="keyword">where</span> Lft &lt;= @lft <span class="keyword">and</span> Rgt &gt;= @rgt</span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> @<span class="keyword">result</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<p>基于层次计算函数，我们创建一个视图，添加了新的记录节点层次的数列：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">VIEW</span> dbo.TreeView</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">SELECT</span> Node_id, <span class="keyword">Name</span>, Lft, Rgt, dbo.CountLayer(Node_id) <span class="keyword">AS</span> Layer <span class="keyword">FROM</span> dbo.Tree <span class="keyword">ORDER</span> <span class="keyword">BY</span> Lft</span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<p>创建存储过程，用于计算给定节点的所有子孙节点及相应的层次：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[GetChildrenNodeList]</span><br><span class="line">(</span><br><span class="line">  @node_id <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">declare</span> @lft <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @rgt <span class="built_in">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> Node_id <span class="keyword">from</span> Tree <span class="keyword">where</span> node_id = @node_id)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> @lft = Lft, @rgt = Rgt <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> TreeView <span class="keyword">where</span> Lft <span class="keyword">between</span> @lft <span class="keyword">and</span> @rgt <span class="keyword">order</span> <span class="keyword">by</span> Lft <span class="keyword">ASC</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<p>现在，我们使用上面的存储过程来计算节点Fruit所有子孙节点及对应层次，查询结果如下：</p>
<p><img src="https://files.mdnice.com/user/10819/43a756b8-b007-45e7-b8e6-ad4ecd46595f.png"></p>
<p>在进行树的查询遍历时，只需要进行2次数据库查询，消除了递归，再加上查询条件都是数字的比较，查询的效率是极高的，随着树规模的不断扩大，基于左右值编码的设计方案将比传统的递归方案查询效率提高更多。</p>
<h2 id="获取某节点的族谱路径"><a href="#获取某节点的族谱路径" class="headerlink" title="获取某节点的族谱路径"></a>获取某节点的族谱路径</h2><p>假定我们要获得某节点的族谱路径，则根据左、右值分析只需要一条SQL语句即可完成。</p>
<p>以Fruit为例：<code>SELECT* FROM Tree WHERE Lft &lt; 2 AND Rgt &gt; 11 ORDER BY Lft ASC</code></p>
<p>相对完整的存储过程如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[GetParentNodePath]</span><br><span class="line">(</span><br><span class="line">  @node_id <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">declare</span> @lft <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @rgt <span class="built_in">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> Node_id <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> @lft = Lft, @rgt = Rgt <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id</span><br><span class="line">    <span class="keyword">select</span> * <span class="keyword">from</span> TreeView <span class="keyword">where</span> Lft &lt; @lft <span class="keyword">and</span> Rgt &gt; @rgt <span class="keyword">order</span> <span class="keyword">by</span> Lft <span class="keyword">ASC</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<h2 id="为某节点添加子孙节点"><a href="#为某节点添加子孙节点" class="headerlink" title="为某节点添加子孙节点"></a>为某节点添加子孙节点</h2><p>假定我们要在节点“Red”下添加一个新的子节点“Apple”，该树将变成如下图所示，其中红色节点为新增节点。</p>
<p><img src="https://files.mdnice.com/user/10819/d7d78f36-b82d-41df-877c-2203c576f915.png"></p>
<p>相对完整的插入子节点的存储过程：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[AddSubNode]</span><br><span class="line">(</span><br><span class="line">  @node_id <span class="built_in">int</span>,</span><br><span class="line">  @node_name <span class="built_in">varchar</span>(<span class="number">50</span>)</span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">declare</span> @rgt <span class="built_in">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> Node_id <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">SET</span> XACT_ABORT <span class="keyword">ON</span></span><br><span class="line">    <span class="keyword">BEGIN</span> TRANSCTION</span><br><span class="line">    <span class="keyword">select</span> @rgt = Rgt <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id</span><br><span class="line">    <span class="keyword">update</span> Tree <span class="keyword">set</span> Rgt = Rgt + <span class="number">2</span> <span class="keyword">where</span> Rgt &gt;= @rgt</span><br><span class="line">    <span class="keyword">update</span> Tree <span class="keyword">set</span> Lft = Lft + <span class="number">2</span> <span class="keyword">where</span> Lft &gt;= @rgt</span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> Tree(<span class="keyword">Name</span>, Lft, Rgt) <span class="keyword">values</span>(@node_name, @rgt, @rgt + <span class="number">1</span>)</span><br><span class="line">    <span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">    <span class="keyword">SET</span> XACT_ABORT <span class="keyword">OFF</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<h2 id="删除某节点"><a href="#删除某节点" class="headerlink" title="删除某节点"></a>删除某节点</h2><p>如果我们想要删除某个节点，会同时删除该节点的所有子孙节点，而这些被删除的节点的个数为：(被删除节点的右值 – 被删除节点的左值+ 1) / 2，而剩下的节点左、右值在大于被删除节点左、右值的情况下会进行调整。来看看树会发生什么变化，以Beef为例，删除效果如下图所示。</p>
<p><img src="https://files.mdnice.com/user/10819/d55581c5-d285-42d0-96df-7aed22ff45cf.png"></p>
<p>则我们可以构造出相应的存储过程：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">PROCEDURE</span> [dbo].[DelNode]</span><br><span class="line">(</span><br><span class="line">  @node_id <span class="built_in">int</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">AS</span></span><br><span class="line"><span class="keyword">declare</span> @lft <span class="built_in">int</span></span><br><span class="line"><span class="keyword">declare</span> @rgt <span class="built_in">int</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">exists</span>(<span class="keyword">select</span> Node_id <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id)</span><br><span class="line">  <span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">SET</span> XACT_ABORT <span class="keyword">ON</span></span><br><span class="line">    <span class="keyword">BEGIN</span> TRANSCTION</span><br><span class="line">      <span class="keyword">select</span> @lft = Lft, @rgt = Rgt <span class="keyword">from</span> Tree <span class="keyword">where</span> Node_id = @node_id</span><br><span class="line">      <span class="keyword">delete</span> <span class="keyword">from</span> Tree <span class="keyword">where</span> Lft &gt;= @lft <span class="keyword">and</span> Rgt &lt;= @rgt</span><br><span class="line">      <span class="keyword">update</span> Tree <span class="keyword">set</span> Lft = Lft – (@rgt - @lft + <span class="number">1</span>) <span class="keyword">where</span> Lft &gt; @lft</span><br><span class="line">      <span class="keyword">update</span> Tree <span class="keyword">set</span> Rgt = Rgt – (@rgt - @lft + <span class="number">1</span>) <span class="keyword">where</span> Rgt &gt; @rgt</span><br><span class="line">      <span class="keyword">COMMIT</span> <span class="keyword">TRANSACTION</span></span><br><span class="line">    <span class="keyword">SET</span> XACT_ABORT <span class="keyword">OFF</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line"><span class="keyword">GO</span></span><br></pre></td></tr></table></figure>

<h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>优点：</p>
<ul>
<li>消除了递归查询，实现了无限嵌套</li>
<li>查询是基于整数的比较，效率很高</li>
</ul>
<p>缺点：</p>
<ul>
<li>节点的添加、删除及修改代价较大</li>
</ul>
<p>在基于数据库的一般应用中，查询的需求总要大于删除和修改，同时我们可以扩展MPT来实现更多的优化，例如：如果对层级需求较高，可以结合MPT和二中的方法来实现。</p>
]]></content>
      <categories>
        <category>设计</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>分布式ID解决方案</title>
    <url>/2021/03/06/%E5%88%86%E5%B8%83%E5%BC%8FID%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>ID是数据的唯一标识，传统的做法是利用UUID和数据库的自增ID，在互联网企业中，大部分公司使用的都是MySQL，并且因为需要事务支持，所以通常会使用Innodb存储引擎，UUID太长以及无序，所以并不适合在Innodb中来作为主键，自增ID比较合适，但是随着公司的业务发展，数据量将越来越大，需要对数据进行分表，而分表后，每个表中的数据都会按自己的节奏进行自增，很有可能出现ID冲突。这时就需要一个单独的机制来负责生成唯一ID，生成出来的ID也可以叫做分布式ID，或全局ID。</p>
<span id="more"></span>
<h1 id="数据库主键为什么要用递增的序列？"><a href="#数据库主键为什么要用递增的序列？" class="headerlink" title="数据库主键为什么要用递增的序列？"></a>数据库主键为什么要用递增的序列？</h1><p>顺序的ID占用的空间比随机ID占用的空间小。<br>原因是数据库主键和索引索引使用B+树的数据结构进行存储，顺序ID数据存储在最后一个节点的最后的位置，前面的节点数据都是满的。随机ID存储时可能会出现节点分裂，导致节点多了，但是每个节点的数据量少了，存储到文件系统中时，无论节点中数据是不是满的都会占用一页的空间。所以所导致空间占用较大。</p>
<h1 id="UUID为什么不适合做主键？"><a href="#UUID为什么不适合做主键？" class="headerlink" title="UUID为什么不适合做主键？"></a>UUID为什么不适合做主键？</h1><p>UUID值由本机Mac地址和时间戳等因素决定，UUID出现重复概率极几乎可以忽略不计。</p>
<p>如果需求是只保证唯一性，那么UUID也是可以使用的，但是按照上面的分布式id的要求， UUID其实是不能做成分布式id的，原因如下：</p>
<ol>
<li>首先分布式id一般都会作为主键，但是mysql官方推荐主键要尽量越短越好，UUID每一个都很长，所以不是很推荐</li>
<li>既然分布式id是主键，然后主键是包含索引的，然后mysql的索引是通过b+树来实现的，每一次新的UUID数据的插入，为了查询的优化，都会对索引底层的b+树进行修改，因为UUID数据是无序的，所以每一次UUID数据的插入都会对主键地城的b+树进行很大的修改，这一点很不好</li>
<li>信息不安全：基于MAC地址生成UUID的算法可能会造成MAC地址泄露，这个漏洞曾被用于寻找梅丽莎病毒的制作者位置。</li>
</ol>
<h2 id="Java实现UUID"><a href="#Java实现UUID" class="headerlink" title="Java实现UUID"></a>Java实现UUID</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.one.util;</span><br><span class="line"><span class="keyword">import</span> java.util.UUID;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String uuid= UUID.randomUUID().toString().replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>).toLowerCase();</span><br><span class="line">        System.out.println(<span class="string">&quot;UUID的值是:&quot;</span>+uuid);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="作为主键的要求"><a href="#作为主键的要求" class="headerlink" title="作为主键的要求"></a>作为主键的要求</h1><ol>
<li>顺序</li>
<li>唯一</li>
<li>能短则短，减少空间占用</li>
</ol>
<p>自增的ID可以满足大部分业务场景，但是在一些特殊场景中并不合适，只举部分例子</p>
<ol>
<li>分布式系统中</li>
<li>分库分表的数据库设计</li>
<li>存在一些安全问题，对于一些敏感信息比如数据量容易被推测。</li>
</ol>
<h1 id="常见ID解决方案的对比"><a href="#常见ID解决方案的对比" class="headerlink" title="常见ID解决方案的对比"></a>常见ID解决方案的对比</h1><table>
<thead>
<tr>
<th>描述</th>
<th>优点</th>
<th>缺点</th>
<th align="center">缺点</th>
</tr>
</thead>
<tbody><tr>
<td>UUID</td>
<td>UUID是通用唯一标识码的缩写，其目的是上分布式系统中的所有元素都有唯一的辨识信息，而不需要通过中央控制器来指定唯一标识。</td>
<td>1. 降低全局节点的压力，使得主键生成速度更快；2. 生成的主键全局唯一；3. 跨服务器合并数据方便</td>
<td align="center">1. UUID占用16个字符，空间占用较多；2. 不是递增有序的数字，数据写入IO随机性很大，且索引效率下降</td>
</tr>
<tr>
<td>数据库主键自增</td>
<td>MySQL数据库设置主键且主键自动增长</td>
<td>1. INT和BIGINT类型占用空间较小；2. 主键自动增长，IO写入连续性好；3. 数字类型查询速度优于字符串</td>
<td align="center">1. 并发性能不高，受限于数据库性能；2. 分库分表，需要改造，复杂；3. 自增：数据量泄露</td>
</tr>
<tr>
<td>Redis自增</td>
<td>Redis计数器，原子性自增</td>
<td>使用内存，并发性能好</td>
<td align="center">1. 数据丢失；2. 自增：数据量泄露</td>
</tr>
<tr>
<td>雪花算法（snowflake）</td>
<td>大名鼎鼎的雪花算法，分布式ID的经典解决方案</td>
<td>1. 不依赖外部组件；2. 性能好</td>
<td align="center">1. 时钟回拨；2. 趋势递增不是绝对递增；3. 不能在一台服务器上部署多个分布式ID服务；</td>
</tr>
</tbody></table>
<h1 id="流行的分布式ID解决方案"><a href="#流行的分布式ID解决方案" class="headerlink" title="流行的分布式ID解决方案"></a>流行的分布式ID解决方案</h1><h2 id="雪花算法（snowflake）"><a href="#雪花算法（snowflake）" class="headerlink" title="雪花算法（snowflake）"></a>雪花算法（snowflake）</h2><p>雪花算法是由符号位+时间戳+工作机器id+序列号组成</p>
<p><img src="https://files.mdnice.com/user/10819/4621c1ed-ea4b-443b-8adc-b192851c467e.png"></p>
<p>解释</p>
<ol>
<li><p>符号位为0，0表示正数，ID为正数。</p>
</li>
<li><p>时间戳位不用多说，用来存放时间戳，单位是ms。</p>
</li>
<li><p>工作机器id位用来存放机器的id，通常分为5个区域位+5个服务器标识位。</p>
</li>
</ol>
<h3 id="Twitter-的-Snowflake算法-Java实现"><a href="#Twitter-的-Snowflake算法-Java实现" class="headerlink" title="Twitter 的 Snowflake算法 Java实现"></a>Twitter 的 Snowflake算法 Java实现</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowflakeIdWorker</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SnowflakeIdWorker instance = <span class="keyword">new</span> SnowflakeIdWorker(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始时间截 (2015-01-01)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> twepoch = <span class="number">1420041600000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id所占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdBits = <span class="number">5L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大机器id，结果是31 (这个移位算法可以很快的计算出几位二进制数所能表示的最大十进制数)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxWorkerId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; workerIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 支持的最大数据标识id，结果是31</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> maxDatacenterId = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; datacenterIdBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列在id中占的位数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceBits = <span class="number">12L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器ID向左移12位</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> workerIdShift = sequenceBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据标识id向左移17位(12+5)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> datacenterIdShift = sequenceBits + workerIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间截向左移22位(5+5+12)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> timestampLeftShift = sequenceBits + workerIdBits + datacenterIdBits;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成序列的掩码，这里为4095 (0b111111111111=0xfff=4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">long</span> sequenceMask = -<span class="number">1L</span> ^ (-<span class="number">1L</span> &lt;&lt; sequenceBits);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 工作机器ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> workerId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心ID(0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 毫秒内序列(0~4095)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> lastTimestamp = -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 构造函数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> workerId     工作ID (0~31)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> datacenterId 数据中心ID (0~31)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowflakeIdWorker</span><span class="params">(<span class="keyword">long</span> workerId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (workerId &gt; maxWorkerId || workerId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;worker Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxWorkerId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; maxDatacenterId || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">&quot;datacenter Id can&#x27;t be greater than %d or less than 0&quot;</span>, maxDatacenterId));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.workerId = workerId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获得下一个ID (该方法是线程安全的)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> SnowflakeId</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="comment">// 如果当前时间小于上一次ID生成的时间戳，说明系统时钟回退过这个时候应当抛出异常</span></span><br><span class="line">        <span class="keyword">if</span> (timestamp &lt; lastTimestamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(</span><br><span class="line">                    String.format(<span class="string">&quot;Clock moved backwards.  Refusing to generate id for %d milliseconds&quot;</span>, lastTimestamp - timestamp));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 如果是同一时间生成的，则进行毫秒内序列</span></span><br><span class="line">        <span class="keyword">if</span> (lastTimestamp == timestamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; sequenceMask;</span><br><span class="line">            <span class="comment">// 毫秒内序列溢出</span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">//阻塞到下一个毫秒,获得新的时间戳</span></span><br><span class="line">                timestamp = tilNextMillis(lastTimestamp);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 时间戳改变，毫秒内序列重置</span></span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 上次生成ID的时间截</span></span><br><span class="line">        lastTimestamp = timestamp;</span><br><span class="line">        <span class="comment">// 移位并通过或运算拼到一起组成64位的ID</span></span><br><span class="line">        <span class="keyword">return</span> ((timestamp - twepoch) &lt;&lt; timestampLeftShift) <span class="comment">//</span></span><br><span class="line">                | (datacenterId &lt;&lt; datacenterIdShift) <span class="comment">//</span></span><br><span class="line">                | (workerId &lt;&lt; workerIdShift) <span class="comment">//</span></span><br><span class="line">                | sequence;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 阻塞到下一个毫秒，直到获得新的时间戳</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> lastTimestamp 上次生成ID的时间截</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间戳</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">tilNextMillis</span><span class="params">(<span class="keyword">long</span> lastTimestamp)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> timestamp = timeGen();</span><br><span class="line">        <span class="keyword">while</span> (timestamp &lt;= lastTimestamp) &#123;</span><br><span class="line">            timestamp = timeGen();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> timestamp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回以毫秒为单位的当前时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 当前时间(毫秒)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">long</span> <span class="title">timeGen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SnowflakeIdWorker <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException </span>&#123;</span><br><span class="line">        SnowflakeIdWorker idWorker = SnowflakeIdWorker.getInstance();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">long</span> id = idWorker.nextId();</span><br><span class="line">            Thread.sleep(<span class="number">1</span>);</span><br><span class="line">            System.out.println(id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="号段模式"><a href="#号段模式" class="headerlink" title="号段模式"></a>号段模式</h2><p>号段模式可以理解为从数据库批量的获取自增ID，每次从数据库取出一个号段范围，例如 (1,1000] 代表1000个ID，具体的业务服务将本号段，生成1~1000的自增ID并加载到内存。表结构如下：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> id_generator (</span><br><span class="line">  <span class="keyword">id</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  max_id <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;当前最大id&#x27;</span>,</span><br><span class="line">  step <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;号段的布长&#x27;</span>,</span><br><span class="line">  biz_type	<span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;业务类型&#x27;</span>,</span><br><span class="line">  <span class="keyword">version</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;版本号&#x27;</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) </span><br></pre></td></tr></table></figure>

<ul>
<li><p>biz_type ：代表不同业务类型</p>
</li>
<li><p>max_id ：当前最大的可用id</p>
</li>
<li><p>step ：代表号段的长度</p>
</li>
<li><p>version ：是一个乐观锁，每次都更新version，保证并发时数据的正确性</p>
</li>
</ul>
<p><img src="https://files.mdnice.com/user/10819/e2cb3948-1871-4009-89a1-76ff3eb08bf2.png"></p>
<p>等这批号段ID用完，再次向数据库申请新号段，对<code>max_id</code>字段做一次<code>update</code>操作，<code>update max_id= max_id + step</code>，update成功则说明新号段获取成功，新的号段范围是<code>(max_id ,max_id +step]</code>。</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> id_generator <span class="keyword">set</span> max_id = <span class="comment">#&#123;max_id+step&#125;, version = version + 1 where version = # &#123;version&#125; and biz_type = XXX</span></span><br></pre></td></tr></table></figure>

<p>由于多业务端可能同时操作，所以采用版本号<code>version</code>乐观锁方式更新，这种<code>分布式ID</code>生成方式不强依赖于数据库，不会频繁的访问数据库，对数据库的压力小很多。</p>
<h1 id="其他解决方案"><a href="#其他解决方案" class="headerlink" title="其他解决方案"></a>其他解决方案</h1><p>[1] 滴滴出品（TinyID）Github地址：<a href="https://github.com/didi/tinyid">https://github.com/didi/tinyid</a><br>[2] 百度 （Uidgenerator）GitHub地址：<a href="https://github.com/baidu/uid-generator">https://github.com/baidu/uid-generator</a><br>[3] 美团（Leaf）GitHub地址：<a href="https://github.com/Meituan-Dianping/Leaf">https://github.com/Meituan-Dianping/Leaf</a></p>
]]></content>
      <categories>
        <category>解决方案</category>
      </categories>
      <tags>
        <tag>分布式ID</tag>
      </tags>
  </entry>
  <entry>
    <title>Git使用SSH方式连接GitHub Gitee，并设置代理</title>
    <url>/2021/03/06/Git%E4%BD%BF%E7%94%A8SSH%E6%96%B9%E5%BC%8F%E8%BF%9E%E6%8E%A5GitHub-Gitee%EF%BC%8C%E5%B9%B6%E8%AE%BE%E7%BD%AE%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>本文介绍Git通过ssh的方式连接GitHub和Gitee，众所周知GitHub需要如果没有特殊代理，当我们拉去或者提交代码，甚至浏览网页都是龟速，本文同时介绍如何设置Git代理</p>
<span id="more"></span>

<p>我们在使用git的时候，连接到GitHub常用的有三种方式。</p>
<ol>
<li>直接用户名密码登录</li>
<li>使用token登录</li>
<li>使用ssh本地证书的方式获得仓库的读取写入的权限</li>
</ol>
<p>显然第一种方式很不安全，第二种方式又会很繁琐，token生成的太多了有的时候我会忘记token是那个更那个。</p>
<p>所以这篇文章主要讲的是如何使用ssh本地证书连接到GitHub或者Gitee</p>
<h1 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h1><blockquote>
<p><a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></p>
</blockquote>
<h1 id="Git使用SSH方式连接GitHub-Gitee"><a href="#Git使用SSH方式连接GitHub-Gitee" class="headerlink" title="Git使用SSH方式连接GitHub Gitee"></a>Git使用SSH方式连接GitHub Gitee</h1><h2 id="在本地生成ssh证书"><a href="#在本地生成ssh证书" class="headerlink" title="在本地生成ssh证书"></a>在本地生成ssh证书</h2><h3 id="鼠标右键点击-Git-Bash-Here"><a href="#鼠标右键点击-Git-Bash-Here" class="headerlink" title="鼠标右键点击 Git Bash Here"></a>鼠标右键点击 <code>Git Bash Here</code></h3><p><img src="https://files.mdnice.com/user/10819/5f5ae2e2-a5fc-4f02-8605-60d35da43698.png"></p>
<h3 id="在Git的命令行内输入命令"><a href="#在Git的命令行内输入命令" class="headerlink" title="在Git的命令行内输入命令"></a>在Git的命令行内输入命令</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;youremail@example.com&quot;</span></span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/5a75c54a-e093-4068-aed3-840b7b6e8e3d.png"><br>回车之后会让你选择证书存放的路径，你可以自己选择路径也可以直接回车使用默认的文件路径，即<code>C:\Users\用户文件夹\.ssh\</code>下。<code>自定义文件路径的好处是可以自定义文件名并生成多个本地密钥供自己使用。</code>然后会让你输入密码，可不填直接回车两次<br><img src="https://files.mdnice.com/user/10819/6742d9ff-1f0e-4431-b11a-82f7f8dd4296.png"><br><img src="https://files.mdnice.com/user/10819/88bbb12d-acf1-436a-b570-290f962e006b.png"></p>
<h2 id="在GitHub中设置公钥"><a href="#在GitHub中设置公钥" class="headerlink" title="在GitHub中设置公钥"></a>在GitHub中设置公钥</h2><p>在<code>C:\Users\用户文件夹\.ssh\</code>文件夹下会生成两个密钥文件，我们只需要复制<code>.pub</code>结尾的文件内容添加到GitHub中即可。此时生成本地密钥的这台电脑就有访问当前GitHub账户下所有仓库pull和push的权限的权限，包括私有仓库（需要谨慎操作）<br><img src="https://files.mdnice.com/user/10819/be0b464e-56bd-4c3d-8cc2-18def9c27025.png"><br>你也可以单独为一个项目添加，这样拥有该密钥的电脑只有对该项目有pull和push的权限<br><img src="https://files.mdnice.com/user/10819/32da10b4-20c1-43ea-b499-f12d68377547.png"><br>需要注意的是拉起代码的时候需要使用ssh的方式，包括设置<code>remote</code>的时候<br><img src="https://files.mdnice.com/user/10819/879d6afc-9cc2-414e-8d81-bd426a60cb4f.png"><br>在gitee中的设置也同理。</p>
<h2 id="测试连通性"><a href="#测试连通性" class="headerlink" title="测试连通性"></a>测试连通性</h2><ol>
<li>GitHub</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gssh -T git<span class="meta">@github</span>.com</span><br></pre></td></tr></table></figure>

<p>回车后输入yes，看到succcessfully即代表成功</p>
<ol start="2">
<li>Gitee</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">gssh -T git<span class="meta">@gitee</span>.com</span><br></pre></td></tr></table></figure>

<p>回车后输入yes，看到succcessfully即代表成功</p>
<h1 id="设置Git的HTTP和SSH代理配置"><a href="#设置Git的HTTP和SSH代理配置" class="headerlink" title="设置Git的HTTP和SSH代理配置"></a>设置Git的HTTP和SSH代理配置</h1><p>国内得gitee网速还好，pull push 一般都很快，但是GitHub连接就非常不稳定。网上有很多教程，很少有靠谱的，自己尝试了一番总结出来的。</p>
<h2 id="两种方式"><a href="#两种方式" class="headerlink" title="两种方式"></a>两种方式</h2><ol>
<li>http/https</li>
<li>ssh</li>
</ol>
<h2 id="两种方式得区别"><a href="#两种方式得区别" class="headerlink" title="两种方式得区别"></a>两种方式得区别</h2><ol>
<li>clone: 使用ssh方式时，需要配置个人的ssh key，并将生成的ssh公钥配置到git服务器中。对于使用https方式来讲，就没有这些要求。</li>
<li>push: 在使用ssh方式时，是不需要验证用户名和密码，如果你在配置ssh key时设置了密码，则需要验证密码。而对于使用https方式来讲，每次push都需要验证用户名和密码。</li>
</ol>
<p>个人推荐使用ssh方式连接到GitHub感觉安全系数会高一些，而且还可以管理多个GitHub账户，可以参考一下方式进行配置。</p>
<h2 id="设置代理"><a href="#设置代理" class="headerlink" title="设置代理"></a>设置代理</h2><ol>
<li>http/https</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> HTTP 代理</span></span><br><span class="line">git config --global http.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy http://127.0.0.1:1080</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Socks5 代理</span></span><br><span class="line">git config --global http.proxy socks5://127.0.0.1:1080</span><br><span class="line">git config --global https.proxy socks5://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<p>注意这里的 <code>socks5</code> 仅仅是代理使用的协议，它依然是针对 http 设置的，所以仅对 http 协议的仓库有效。使用 <code>git@xxx</code> 这种 ssh 连接的不会使用代理。</p>
<p>也可以分域名设置代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git config --global http.https://github.com.proxy http://127.0.0.1:1080</span><br><span class="line">git config --global https.https://github.com.proxy https://127.0.0.1:1080</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>SSH </li>
</ol>
<p>SSH 代理需要在密钥目录 (<code>~/.ssh</code>) (Windows 下是 <code>C:\Users\&#123;UserName&#125;\.ssh</code>) 新建一个 <code>config</code> 文件，没有后缀名。</p>
<p>Windows环境下的设置</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> -S 为 socks, -H 为 HTTP</span><br><span class="line">ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>

<p>如果找不到 connect 命令那么指定其绝对路径，一般在 git 安装目录下 <code>\mingw64\bin\connect.exe</code></p>
<p>也可以分域名代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">    ProxyCommand connect -S 127.0.0.1:1080 %h %p</span><br></pre></td></tr></table></figure>

<p>所有的前提是你要有一个代理，且看个人手段，这里手动滑稽！</p>
]]></content>
      <categories>
        <category>环境搭建</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>环境搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker基础</title>
    <url>/2021/03/06/Docker%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>Docker 是一个开源的应用容器引擎，基于 Go 语言。Docker可以让开发者打包他们的应用以及依赖包到一个轻量级、可移植的容器中，然后发布到任何流行的 Linux 机器上，也可以实现虚拟化。容器是完全使用沙箱机制，相互之间不会有任何接口（类似 iPhone 的 app）,更重要的是容器性能开销极低。</p>
<span id="more"></span>

<h1 id="Linux下安装Docker"><a href="#Linux下安装Docker" class="headerlink" title="Linux下安装Docker"></a>Linux下安装Docker</h1><h2 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker \</span><br><span class="line">                  docker-client \</span><br><span class="line">                  docker-client-latest \</span><br><span class="line">                  docker-common \</span><br><span class="line">                  docker-latest \</span><br><span class="line">                  docker-latest-logrotate \</span><br><span class="line">                  docker-logrotate \</span><br><span class="line">                  docker-engine</span><br></pre></td></tr></table></figure>

<h2 id="安装yum-utils软件包（提供yum-config-manager-实用程序）"><a href="#安装yum-utils软件包（提供yum-config-manager-实用程序）" class="headerlink" title="安装yum-utils软件包（提供yum-config-manager 实用程序）"></a>安装yum-utils软件包（提供yum-config-manager 实用程序）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y yum-utils</span><br></pre></td></tr></table></figure>

<h2 id="设置稳定的存储库（使用阿里云镜像）"><a href="#设置稳定的存储库（使用阿里云镜像）" class="headerlink" title="设置稳定的存储库（使用阿里云镜像）"></a>设置稳定的存储库（使用阿里云镜像）</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum-config-manager \</span><br><span class="line">    --add-repo \</span><br><span class="line">    http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>

<h2 id="更新缓存"><a href="#更新缓存" class="headerlink" title="更新缓存"></a>更新缓存</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum makecache fast</span><br></pre></td></tr></table></figure>

<h2 id="安装最新版本的Docker-Engine和容器，或转到下一步以安装特定版本"><a href="#安装最新版本的Docker-Engine和容器，或转到下一步以安装特定版本" class="headerlink" title="安装最新版本的Docker Engine和容器，或转到下一步以安装特定版本"></a>安装最新版本的Docker Engine和容器，或转到下一步以安装特定版本</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h2 id="启动Docker"><a href="#启动Docker" class="headerlink" title="启动Docker"></a>启动Docker</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start docker</span><br></pre></td></tr></table></figure>

<h2 id="配置Docker"><a href="#配置Docker" class="headerlink" title="配置Docker"></a>配置Docker</h2><p>Docker默认的镜像源于国内而言是有些慢，所以可以配置一下国内的镜像源，提高一下pull速度</p>
<blockquote>
<p>阿里云镜像服务参考：<a href="https://cr.console.aliyun.com/cn-shanghai/instances/mirrors">https://cr.console.aliyun.com/cn-shanghai/instances/mirrors</a></p>
</blockquote>
<h3 id="创建目录"><a href="#创建目录" class="headerlink" title="创建目录"></a>创建目录</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir -p /etc/docker</span><br></pre></td></tr></table></figure>

<h3 id="创建一个镜像配置文件"><a href="#创建一个镜像配置文件" class="headerlink" title="创建一个镜像配置文件"></a>创建一个镜像配置文件</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vi /etc/docker/daemon.json</span><br></pre></td></tr></table></figure>

<h3 id="配置文件中添加镜像"><a href="#配置文件中添加镜像" class="headerlink" title="配置文件中添加镜像"></a>配置文件中添加镜像</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line"> &quot;registry-mirrors&quot;:[&quot;http://hub-mirror.c.163.com&quot;] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重新加载文件并重启docker"><a href="#重新加载文件并重启docker" class="headerlink" title="重新加载文件并重启docker"></a>重新加载文件并重启docker</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl daemon-reload // 重新加载文件</span><br><span class="line">systemctl restart docker // 重启docker</span><br><span class="line">systemctl enable docker // 开机自启</span><br></pre></td></tr></table></figure>

<h3 id="一些其他的加速站点"><a href="#一些其他的加速站点" class="headerlink" title="一些其他的加速站点"></a>一些其他的加速站点</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">https://registry.docker-cn.com</span><br><span class="line">http://hub-mirror.c.163.com</span><br><span class="line">https://mirror.ccs.tencentyun.com</span><br></pre></td></tr></table></figure>

<h2 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h2><h3 id="卸载Docker-Engine，CLI和Containerd软件包"><a href="#卸载Docker-Engine，CLI和Containerd软件包" class="headerlink" title="卸载Docker Engine，CLI和Containerd软件包"></a>卸载Docker Engine，CLI和Containerd软件包</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum remove docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure>

<h3 id="主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷"><a href="#主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷" class="headerlink" title="主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷"></a>主机上的映像，容器，卷或自定义配置文件不会自动删除。要删除所有图像，容器和卷</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">rm -rf /var/lib/docker</span><br></pre></td></tr></table></figure>

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><h3 id="镜像指令"><a href="#镜像指令" class="headerlink" title="镜像指令"></a>镜像指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker images // 查看 Docker 中当前拥有哪些镜像</span><br><span class="line">docker image MySQL // 查询指定镜像名</span><br><span class="line">docker pull MySQL:5.7 // 下载镜像</span><br><span class="line">docker search MySQL // 搜索一下镜像有哪些版本</span><br><span class="line">docker image rm MySQL:5.5 // 删除镜像</span><br><span class="line">docker image rm bf756fb1ae65 // 通过指定镜像 id 进行删除  </span><br><span class="line">docker image rm -f bf756fb1ae65 // 如果删除的镜像正在运行中，此时需要强制执行删除</span><br><span class="line">docker rmi -f $(docker images MySQL -q) // 借助rmi和-p进行一些联合操作，比如现在想删除所有的 MySQL 镜像</span><br></pre></td></tr></table></figure>

<h3 id="容器指令"><a href="#容器指令" class="headerlink" title="容器指令"></a>容器指令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run tomcat:8.0-jre8 // 通过镜像运行一个容器</span><br><span class="line">docker ps // 查看当前运行的容器</span><br><span class="line">docker run -p 8080:8080 tomcat:8.0-jre8 // 对宿主机端口与容器内的端口进行映射</span><br><span class="line">docker run -d -p 8080:8080 --name tomcat01 tomcat:8.0-jre8 // 后台的方式运行，并设置容器名称</span><br><span class="line">docker ps -a // 列举运行和非运行的容器</span><br><span class="line">docker start c2f5d78c5d1a // 启动容器</span><br><span class="line">docker restart c2f5d78c5d1a // 重启容器</span><br><span class="line">docker stop c2f5d78c5d1a // 停止容器</span><br><span class="line">docker kill c2f5d78c5d1a // 直接杀死指定的容器</span><br><span class="line">docker rm d5b6c177c151 // 删除容器</span><br><span class="line">docker rm -f d5b6c177c151 // 强制删除容器</span><br><span class="line">docker rm -f $(docker ps -qa) // 强制删除所有容器</span><br><span class="line">docker logs 289cc00dc5ed // 查看容器的运行日志 使用-f参数显示实时日志 -t参数还能够显示日志的时间戳</span><br><span class="line">docker top 289cc00dc5ed // 查看容器内运行了哪些进程</span><br><span class="line">docker exec -it 289cc00dc5ed bash // 与容器进行交互 使用exit 从容器内退出到宿主机</span><br><span class="line">docker cp ./test.html 289cc00dc5ed:/usr/local/tomcat/webapps // 将文件从宿主机复制到容器中</span><br><span class="line">docker inspect 923c969b0d91 // 查看容器内部具体的细节</span><br></pre></td></tr></table></figure>

<h3 id="数据卷指令"><a href="#数据卷指令" class="headerlink" title="数据卷指令"></a>数据卷指令</h3><p>能够实现宿主机与容器之间的文件共享，它的好处在于我们对宿主机的文件进行修改将直接影响容器，而无需再将宿主机的文件再复制到容器中。</p>
<p>若是想将宿主机中/opt/apps目录与容器中webapps目录做一个数据卷，则应该这样编写指令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat01 -v /opt/apps:/usr/local/tomcat/webapps tomcat:8.0-jre8</span><br></pre></td></tr></table></figure>

<p>这就说明我们的数据卷设置成功了，Docker 会将容器内的webapps目录与/opt/apps目录进行同步，而此时/opt/apps目录是空的，导致webapps目录也会变成空目录，所以就访问不到了。</p>
<p>此时我们只需向/opt/apps目录下添加文件，就会使得webapps目录也会拥有相同的文件，达到文件共享</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8080:8080 --name tomcat01 -v aa:/usr/local/tomcat/webapps tomcat:8.0-jre8</span><br></pre></td></tr></table></figure>

<p>此时的aa并不是数据卷的目录，而是数据卷的别名，Docker 会为我们自动创建一个名为aa的数据卷，并且会将容器内webapps目录下的所有内容复制到数据卷中，该数据卷的位置在/var/lib/docker/volumes目录下</p>
<p>此时我们只需修改该目录的内容就能能够影响到容器。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker commit -m &quot;描述信息&quot; -a &quot;镜像作者&quot; tomcat01 my_tomcat:1.0 // 将容器打包成一个镜像</span><br><span class="line">docker save my_tomcat:1.0 -o my-tomcat-1.0.tar // 将镜像备份出来</span><br><span class="line">docker load -i my-tomcat-1.0.tar // 将.tar格式的镜像，加载到Docker中</span><br></pre></td></tr></table></figure>

<h1 id="Docker下安装MySQL5-7-31"><a href="#Docker下安装MySQL5-7-31" class="headerlink" title="Docker下安装MySQL5.7.31"></a>Docker下安装MySQL5.7.31</h1><h2 id="拉取Mysql-5-7-31镜像"><a href="#拉取Mysql-5-7-31镜像" class="headerlink" title="拉取Mysql 5.7.31镜像"></a>拉取Mysql 5.7.31镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull mysql:5.7.31</span><br></pre></td></tr></table></figure>

<h2 id="运行Mysql-5-7-31"><a href="#运行Mysql-5-7-31" class="headerlink" title="运行Mysql 5.7.31"></a>运行Mysql 5.7.31</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d --name myMysql -p 9506:3306 -v /data/mysql:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 mysql:5.7.31</span><br></pre></td></tr></table></figure>

<p>参数解析：<br><code>-d</code>: 后台运行容器，并返回容器ID<br><code>--name myMysql</code>: 为容器指定一个名称<br><code>-p</code>: 指定端口映射，格式为：主机(宿主)端口:容器端口<br><code>-v</code>: 绑定一个卷，容器的 /var/lib/mysql 映射到 主机的目录 /data/mysql<br><code>-e MYSQL_ROOT_PASSWORD=123456</code>: 设置环境变量，密码设置为123456<br><code>mysql:5.7.31</code>：使用镜像mysql:5.7.31</p>
<h2 id="修改数据库密码"><a href="#修改数据库密码" class="headerlink" title="修改数据库密码"></a>修改数据库密码</h2><ol>
<li>此时运行 <code>docker ps</code> 可以看到容器正在运行</li>
</ol>
<p><img src="https://files.mdnice.com/user/10819/b9a1a510-bb58-4d71-9e09-f51e6263678a.png"></p>
<ol start="2">
<li>进入到容器命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it [容器ID] /bin/bash</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>输入数据库账号密码命令</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>进入界面后更改root密码（123456为我的新密码 ，此处密码由您决定）</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">update mysql.user set authentication_string=password(&#x27;123456&#x27;) where user=&#x27;root&#x27; and Host = &#x27;localhost&#x27;;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>刷新缓存</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">flush privileges;</span><br></pre></td></tr></table></figure>

<ol start="6">
<li>退出mysql</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure>

<ol start="7">
<li>然后重进mysql，用修改后的密码登录</li>
</ol>
<h1 id="Dcoker下安装Redis"><a href="#Dcoker下安装Redis" class="headerlink" title="Dcoker下安装Redis"></a>Dcoker下安装Redis</h1><p>Redis Windows版本：<a href="https://github.com/tporadowski/redis/releases">https://github.com/tporadowski/redis/releases</a></p>
<p>Redis官网：<a href="https://redis.io/">https://redis.io/</a></p>
<p>AnotherRedisDesktopManager：<a href="https://github.com/qishibo/AnotherRedisDesktopManager/releases">https://github.com/qishibo/AnotherRedisDesktopManager/releases</a></p>
<h2 id="安装命令"><a href="#安装命令" class="headerlink" title="安装命令"></a>安装命令</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker pull redis:latest</span><br><span class="line">docker run -itd --name myRedis -p 6379:6379 redis --requirepass &quot;123456&quot;</span><br></pre></td></tr></table></figure>

<p>如果在启动时忘记设置密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker exec -it myRedis redis-cli // 进入容器</span><br><span class="line">config set requirepass 123456</span><br></pre></td></tr></table></figure>

<h1 id="将jar包做成Docker镜像，并运行"><a href="#将jar包做成Docker镜像，并运行" class="headerlink" title="将jar包做成Docker镜像，并运行"></a>将jar包做成Docker镜像，并运行</h1><h2 id="上传jar包文件和Dockerfile文件至服务器"><a href="#上传jar包文件和Dockerfile文件至服务器" class="headerlink" title="上传jar包文件和Dockerfile文件至服务器"></a>上传jar包文件和Dockerfile文件至服务器</h2><p>Dockerfile文件如下</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> java:<span class="number">8</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /tmp</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> jonsson-0.0.1-SNAPSHOT.jar jonsson.jar</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">8888</span></span><br><span class="line"><span class="keyword">ENTRYPOINT</span><span class="bash"> [<span class="string">&quot;java&quot;</span>,<span class="string">&quot;-jar&quot;</span>,<span class="string">&quot;/jonsson.jar&quot;</span>]</span></span><br></pre></td></tr></table></figure>

<p>解释：</p>
<ol>
<li>from java:8  拉取一个jdk为1.8的docker image</li>
<li>jonsson-0.0.1-SNAPSHOT.jar 就是你上传的jar包，替换为jar包的名称</li>
<li>jonsson.jar  是你将该jar包重新命名为什么名称，在容器中运行</li>
<li>expose  该容器暴露的端口是多少，就是jar在容器中以多少端口运行</li>
<li>entrypoint 容器启动之后执行的命令，java -jar /jonsson.jar  即启动jar</li>
</ol>
<h2 id="打包镜像"><a href="#打包镜像" class="headerlink" title="打包镜像"></a>打包镜像</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker build -t jonsson .</span><br></pre></td></tr></table></figure>

<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker run -d -p 8888:8888 --name jonsson-8888 jonsson</span><br></pre></td></tr></table></figure>

<h2 id="查看启动日志"><a href="#查看启动日志" class="headerlink" title="查看启动日志"></a>查看启动日志</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">docker logs -n 300 -f jonsson-8888</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] 《Docker 从入门到实践》: <a href="https://yeasy.gitbook.io/docker_practice/introduction/why">https://yeasy.gitbook.io/docker_practice/introduction/why</a><br>[2] Docker Hub: <a href="https://hub.docker.com/">https://hub.docker.com/</a></p>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>Spring Boot整合Elasticsearch</title>
    <url>/2021/03/05/Spring-Boot%E6%95%B4%E5%90%88Elasticsearch/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>Spring Data Elasticsearch项目提供了与Elasticsearch搜索引擎的集成。Spring Data Elasticsearch的关键功能区域是一个以POJO为中心的模型，该模型用于与Elastichsearch文档进行交互并轻松编写存储库样式的数据访问层。</p>
<span id="more"></span>
<h1 id="Maven依赖"><a href="#Maven依赖" class="headerlink" title="Maven依赖"></a>Maven依赖</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--https:<span class="comment">//mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-elasticsearch--&gt;</span></span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-data-elasticsearch&lt;/artifactId&gt;</span><br><span class="line">            &lt;version&gt;2.3.0.RELEASE&lt;/version&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br></pre></td></tr></table></figure>
<h1 id="配置application-properties"><a href="#配置application-properties" class="headerlink" title="配置application.properties"></a>配置application.properties</h1><figure class="highlight"><table><tr><td class="code"><pre><span class="line">spring.elasticsearch.rest.uris=http:<span class="comment">//localhost:9200</span></span><br><span class="line"># spring.elasticsearch.rest.username= // 用户名</span><br><span class="line"># spring.elasticsearch.rest.password=// 密码</span><br><span class="line"># spring.elasticsearch.rest.connection-timeout= // 连接超时时间</span><br><span class="line"># spring.elasticsearch.rest.read-timeout= // 读取超时时间</span><br></pre></td></tr></table></figure>
<h1 id="CRUD操作"><a href="#CRUD操作" class="headerlink" title="CRUD操作"></a>CRUD操作</h1><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.annotation.Id;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Field;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.FieldType;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document(indexName = &quot;account&quot;, type = &quot;_doc&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Message</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">5710293639676035958L</span>;</span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Text, analyzer = &quot;ik_max_word&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Long)</span></span><br><span class="line">    <span class="keyword">private</span> String age;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Field(type = FieldType.Long)</span> <span class="comment">// 意思自定义属性格式 时间格式，我们在java程序中可以传入这些格式的时间</span></span><br><span class="line">    <span class="keyword">private</span> Long createTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Dao"><a href="#Dao" class="headerlink" title="Dao"></a>Dao</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Message</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function">Page&lt;Message&gt; <span class="title">findAll</span><span class="params">(Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Iterable&lt;Message&gt; <span class="title">findAll</span><span class="params">(Sort sort)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Message&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">List&lt;Message&gt; <span class="title">findByAgeBetween</span><span class="params">(Long mix, Long max)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">Long <span class="title">countByAgeBetween</span><span class="params">(Long mix, Long max)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="Test"><a href="#Test" class="headerlink" title="Test"></a>Test</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.dao.MessageDao;</span><br><span class="line"><span class="keyword">import</span> com.example.entity.Message;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.PageRequest;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataElasticsearchFindTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageDao messageDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Message&gt; all = messageDao.findAll();</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllPageRequest</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Message&gt; all = messageDao.findAll(PageRequest.of(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findAllSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Iterable&lt;Message&gt; all = messageDao.findAll(Sort.by(<span class="string">&quot;age&quot;</span>).descending());</span><br><span class="line">        all.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Message&gt; messages = messageDao.findByUsername(<span class="string">&quot;JonssonYan&quot;</span>);</span><br><span class="line">        messages.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByAgeBetween</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Message&gt; messages = messageDao.findByAgeBetween(<span class="number">10L</span>, <span class="number">20L</span>);</span><br><span class="line">        messages.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">countByAgeBetween</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Long count = messageDao.countByAgeBetween(<span class="number">10L</span>, <span class="number">20L</span>);</span><br><span class="line">        System.out.println(count);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.dao.MessageDao;</span><br><span class="line"><span class="keyword">import</span> com.example.entity.Message;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataElasticsearchInsertTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageDao messageDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">insert</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Message message = <span class="keyword">new</span> Message();</span><br><span class="line">        message.setId(<span class="string">&quot;3&quot;</span>);</span><br><span class="line">        message.setAge(<span class="string">&quot;18&quot;</span>);</span><br><span class="line">        message.setEmail(<span class="string">&quot;yz808@qq.com&quot;</span>);</span><br><span class="line">        message.setCreateTime(<span class="keyword">new</span> Date().getTime());</span><br><span class="line">        message.setUsername(<span class="string">&quot;JonssonYan&quot;</span>);</span><br><span class="line">        messageDao.save(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.dao.MessageDao;</span><br><span class="line"><span class="keyword">import</span> org.junit.jupiter.api.Test;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.test.context.SpringBootTest;</span><br><span class="line"></span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpringDataElasticsearchDeleteTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MessageDao messageDao;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteById</span><span class="params">()</span></span>&#123;</span><br><span class="line">        messageDao.deleteById(<span class="string">&quot;2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="自定义JSON查询"><a href="#自定义JSON查询" class="headerlink" title="自定义JSON查询"></a>自定义JSON查询</h2><h3 id="Dao-1"><a href="#Dao-1" class="headerlink" title="Dao"></a>Dao</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.dao;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.example.entity.Message;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Page;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Sort;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Query;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.repository.ElasticsearchRepository;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Repository;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span></span><br><span class="line"><span class="meta">@Repository</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MessageDao</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Message</span>, <span class="title">String</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Query(&quot;&#123;\&quot;match\&quot;: &#123;\&quot;username\&quot;: &#123;\&quot;query\&quot;: \&quot;?0\&quot;&#125;&#125;&#125;&quot;)</span></span><br><span class="line">    <span class="function">List&lt;Message&gt; <span class="title">findByUsername</span><span class="params">(String username)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Test-1"><a href="#Test-1" class="headerlink" title="Test"></a>Test</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUsername</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        List&lt;Message&gt; messages = messageDao.findByUsername(<span class="string">&quot;JonssonYan&quot;</span>);</span><br><span class="line">        messages.forEach(System.out::println);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h1 id="References"><a href="#References" class="headerlink" title="References"></a>References</h1><p>[1] Spring Data Elasticsearch: <a href="https://spring.io/projects/spring-data-elasticsearch">https://spring.io/projects/spring-data-elasticsearch</a></p>
]]></content>
      <categories>
        <category>Spring Boot</category>
      </categories>
      <tags>
        <tag>Elasticsearch</tag>
        <tag>Spring Boot</tag>
      </tags>
  </entry>
  <entry>
    <title>自建DDNS教程[阿里云 AliDDNS 2.0]</title>
    <url>/2021/03/05/%E8%87%AA%E5%BB%BADDNS%E6%95%99%E7%A8%8B-%E9%98%BF%E9%87%8C%E4%BA%91-AliDDNS-2-0/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>DDNS（DynamicDomain Name Server）是动态域名服务的缩写。DDNS可以把一个动态IP地址映射到一个固定的域名解析服务上，然后把这个动态的IP解析成一个域名。</p>
<span id="more"></span>

<p>首先，登录你的服务器，安装必需组件：<br>For CentOS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install -y wget curl cronie</span><br></pre></td></tr></table></figure>

<p>For Debian 8+：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install -y wget curl cron</span><br></pre></td></tr></table></figure>

<p>For Ubuntu/Debian 7：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt-get install -y wget curl cron</span><br></pre></td></tr></table></figure>

<p>然后下载AliDDNS脚本到你的服务器上：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -O /usr/sbin/AliDDNS-v2.0.sh [版本对应的下载地址]</span><br></pre></td></tr></table></figure>
<p>下载地址：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">测试版本：https://bitbucket.org/ilemonrain/aliddns/downloads/AliDDNS-v2.0-Beta20180705.sh</span><br><span class="line">最新版本：https://bitbucket.org/ilemonrain/aliddns/downloads/AliDDNS-v2.0.sh</span><br><span class="line">稳定版本：https://bitbucket.org/ilemonrain/aliddns/downloads/AliDDNS-v2.0.sh</span><br></pre></td></tr></table></figure>
<p>为脚本文件加上可执行属性：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chmod +x /usr/sbin/AliDDNS-v2.0.sh</span><br></pre></td></tr></table></figure>

<p>执行脚本，开始配置：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/usr/sbin/AliDDNS-v2.0.sh</span><br></pre></td></tr></table></figure>

<p>弹出启动菜单：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">AliDDNS 工具 (阿里云云解析修改工具)</span><br><span class="line">使用方法 (Usage)：</span><br><span class="line">AliDDNS.sh run 配置并运行工具 (如果已有配置将会直接运行)</span><br><span class="line">AliDDNS.sh config 仅配置工具</span><br><span class="line">AliDDNS.sh clean 清理配置文件及运行环境</span><br><span class="line">AliDDNS.sh version 显示版本信息</span><br><span class="line">[Info] 选择你要使用的功能:</span><br><span class="line">配置并运行 AliDDNS</span><br><span class="line">仅配置 AliDDNS</span><br><span class="line">清理环境</span><br><span class="line">退出</span><br><span class="line">输入数字以选择: _</span><br></pre></td></tr></table></figure>

<p>在这里，我们输入 1 (数字1) ，后按下回车，开始进入AliDDNS配置向导：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入一级域名 (比如 example.com)</span><br><span class="line">(此项必须填写，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>假如你需要设置AliDDNS的域名为ddns.example.com，那么请在这里输入 example.com 分解开就是 [ddns] . [example.com]<br>同时，登录阿里云云解析 <a href="https://dns.console.aliyun.com/">https://dns.console.aliyun.com/</a> 在需要DDNS的域名上，添加一个记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">记录类型：A</span><br><span class="line">主机记录：[请填写你的二级域名]</span><br><span class="line">解析线路：默认</span><br><span class="line">记录值：127.0.0.1 (或者随便填写一个IP地址)</span><br><span class="line">TTL： [请根据实际需要选择合适的TTL]</span><br><span class="line">同步默认线路：是 (勾选)</span><br></pre></td></tr></table></figure>

<p>简单粗暴的，看都不看的复制粘贴，作者也有权拒绝回答任何问题！<br>完成后按下回车键，继续填写二级域名：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入二级域名 (比如 ddns)</span><br><span class="line">(此项必须填写，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>同上面的范例，我们输入 ddns ，之后按下回车键继续：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入记录的TTL(Time-To-Live)值：</span><br><span class="line">(默认为600，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>如果你使用的是免费版的阿里云云解析，此处可以填写的数值范围为：600<del>86400；<br>如果你使用的是收费版(企业版)的阿里云云解析，此处可以填写的数值范围为：1</del>86400 (根据你购买的产品类型决定)。<br>填写完成后，按下回车键继续：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入阿里云AccessKey ID</span><br><span class="line">(此项必须填写，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>AccessKey ID 和 AccessKey Secret 推荐使用 子用户AccessKey(访问控制台RAM) 分配的权限！这样最安全！</p>
<p>使用子用户AccessKey，请分配 AliyunDNSReadOnlyAccess(只读访问云解析(DNS)的权限) 和 AliyunDNSFullAccess(管理云解析(DNS)的权限) 这两个权限！推荐有动手能力的用户使用子用户AccessKey！</p>
<p>如果不会操作或者图省事，请使用 全局AccessKey ！但此时一定要注意！千万不要泄露你的全局AccessKey或者将你的全局AccessKey发布到公网上！这样等同于把你的号白送人，还可以名正言顺的白嫖你的阿里云账号！如果发生泄露，请立刻删除泄露的AccessKey！<br>填写完成后，按下回车键继续：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入阿里云Access Key Secret</span><br><span class="line">(此项必须填写，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>同上，填写你的AccessKey ID对应的AccessKey Secret。获取你的AccessKey Secret属于账号高风险操作，请准备好用来接收阿里云验证码的手机！</p>
<p>填写完成后，新版的AliDDNS 2.0如果没有激活专家模式，会直接进入执行流程；如果启动了专家模式，以下参数请在你理解的基础上填写！否则请一律留空！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入获取本机IP使用的命令</span><br><span class="line">(查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>输入获取本机IP地址使用的命令。如果你不懂或者不需要配置，请留空，直接回车！</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 请输入解析使用的DNS服务器</span><br><span class="line">(此项必须填写，查看帮助请输入“h”):</span><br></pre></td></tr></table></figure>

<p>输入nslookup命令解析使用的DNS服务器。如果你不懂或者不需要配置，请留空，直接回车！</p>
<p>之后，会自动开始DDNS(测试)运行过程：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[Info] 检测到存在的配置，自动读取现有配置</span><br><span class="line">如果你不需要，请通过菜单中的清理环境选项进行清除</span><br><span class="line"></span><br><span class="line">[Info] 正在写入配置文件……</span><br><span class="line">[Info] 正在获取本机IP……</span><br><span class="line">[Info] 本机IP：...</span><br><span class="line">[Info] 正在获取 ddns.example.com 的IP……</span><br><span class="line">[Info] 解析结果：ddns.example.com -&gt; 127.0.0.1</span><br><span class="line">[Info] 正在生成时间戳……</span><br><span class="line">[Info] 获取到RecordID：*</span><br><span class="line">[Info] 正在更新解析记录……</span><br><span class="line">&#123;&quot;RecordId&quot;:&quot;&quot;,&quot;RequestId&quot;:&quot;----&quot;&#125;</span><br><span class="line">[Info] 已经更新RecordID：*</span><br><span class="line">[Success] DDNS记录更新成功，新的IP为：...</span><br></pre></td></tr></table></figure>

<p>出现最后的 DDNS记录更新成功 提示，即为DDNS记录同步成功，稍后等待DNS解析生效，即可完成DDNS域名更换！</p>
<p>Crontab (定时任务) 部署教程</p>
<p>首先，在命令行执行命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">crontab -e</span><br></pre></td></tr></table></figure>

<p>会弹出一个提示，问选择哪个编辑器，请按照自己的喜好选择一个文本编辑器：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Select an editor. To change later, run &#x27;select-editor&#x27;.</span><br><span class="line"></span><br><span class="line">/bin/nano &lt;---- easiest</span><br><span class="line">/usr/bin/vim.basic</span><br><span class="line">/usr/bin/vim.tiny</span><br><span class="line">Choose 1-3 [1]:</span><br></pre></td></tr></table></figure>

<p>选择完成后，会打开一个文本编辑器，请在文件的最后添加如下一行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">*/5 * * * * /usr/sbin/AliDDNS-v2.0.sh run &gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>

<p>添加完成后，保存退出。<br>当提示 crontab: installing new crontab 时，表示crontab写入成功，执行命令重启cron进程：<br>For CentOS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service crond restart</span><br></pre></td></tr></table></figure>

<p>For Ubuntu/Debian：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service cron restart</span><br></pre></td></tr></table></figure>

<p>并将Cron加入开机启动项：</p>
<p>For CentOS：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chkconfig crond on</span><br></pre></td></tr></table></figure>

<p>For Ubuntu/Debian：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable cron</span><br></pre></td></tr></table></figure>

<p>即可完成定时任务的部署。</p>
]]></content>
      <categories>
        <category>DDNS</category>
      </categories>
      <tags>
        <tag>DDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>Git常用命令</title>
    <url>/2021/03/05/Git%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer"/>

<p>整理的常用 Git 命令清单</p>
<span id="more"></span>
<h1 id="一些术语"><a href="#一些术语" class="headerlink" title="一些术语"></a>一些术语</h1><ul>
<li><p>Workspace：工作区</p>
</li>
<li><p>Index / Stage：暂存区</p>
</li>
<li><p>Repository：仓库区（或本地仓库）</p>
</li>
<li><p>Remote：远程仓库</p>
</li>
</ul>
<h1 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在当前目录新建一个Git代码库</span></span><br><span class="line">$ git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个目录，将其初始化为Git代码库</span></span><br><span class="line">$ git init [project-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载一个项目和它的整个代码历史</span></span><br><span class="line">$ git <span class="built_in">clone</span> [url]</span><br></pre></td></tr></table></figure>

<h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><p>Git的设置文件为<code>.gitconfig</code>，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示当前的Git配置</span></span><br><span class="line">$ git config --list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 编辑Git配置文件</span></span><br><span class="line">$ git config -e [--global]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置提交代码时的用户信息</span></span><br><span class="line">$ git config [--global] user.name <span class="string">&quot;[name]&quot;</span></span><br><span class="line">$ git config [--global] user.email <span class="string">&quot;[email address]&quot;</span></span><br></pre></td></tr></table></figure>

<h1 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 添加指定文件到暂存区</span></span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区，包括子目录</span></span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加当前目录的所有文件到暂存区</span></span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加每个变化前，都会要求确认</span></span><br><span class="line"><span class="comment"># 对于同一个文件的多处变化，可以实现分次提交</span></span><br><span class="line">$ git add -p</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除工作区文件，并且将这次删除放入暂存区</span></span><br><span class="line">$ git rm [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止追踪指定文件，但该文件会保留在工作区</span></span><br><span class="line">$ git rm --cached [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改名文件，并且将这个改名放入暂存区</span></span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure>

<h1 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件到仓库区</span></span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交工作区自上次commit之后的变化，直接到仓库区</span></span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交时显示所有diff信息</span></span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用一次新的commit，替代上一次提交</span></span><br><span class="line"><span class="comment"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span></span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重做上一次commit，并包括指定文件的新变化</span></span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure>

<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有本地分支</span></span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有远程分支</span></span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有本地分支和远程分支</span></span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，但依然停留在当前分支</span></span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，并切换到该分支</span></span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向指定commit</span></span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line">$ git branch --track [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到指定分支，并更新工作区</span></span><br><span class="line">$ git checkout [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换到上一个分支</span></span><br><span class="line">$ git checkout -</span><br><span class="line"></span><br><span class="line"><span class="comment"># 建立追踪关系，在现有分支与指定的远程分支之间</span></span><br><span class="line">$ git branch --set-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并指定分支到当前分支</span></span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择一个commit，合并进当前分支</span></span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程分支</span></span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure>

<h1 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 列出所有tag</span></span><br><span class="line">$ git tag</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在当前commit</span></span><br><span class="line">$ git tag [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个tag在指定commit</span></span><br><span class="line">$ git tag [tag] [commit]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除本地tag</span></span><br><span class="line">$ git tag -d [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除远程tag</span></span><br><span class="line">$ git push origin :refs/tags/[tagName]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看tag信息</span></span><br><span class="line">$ git show [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交指定tag</span></span><br><span class="line">$ git push [remote] [tag]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交所有tag</span></span><br><span class="line">$ git push [remote] --tags</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个分支，指向某个tag</span></span><br><span class="line">$ git checkout -b [branch] [tag]</span><br></pre></td></tr></table></figure>

<h1 id="查看信息"><a href="#查看信息" class="headerlink" title="查看信息"></a>查看信息</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 显示有变更的文件</span></span><br><span class="line">$ git status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示当前分支的版本历史</span></span><br><span class="line">$ git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示commit历史，以及每次commit发生变更的文件</span></span><br><span class="line">$ git <span class="built_in">log</span> --<span class="built_in">stat</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 搜索提交历史，根据关键词</span></span><br><span class="line">$ git <span class="built_in">log</span> -S [keyword]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，每个commit占据一行</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --pretty=format:%s</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个commit之后的所有变动，其&quot;提交说明&quot;必须符合搜索条件</span></span><br><span class="line">$ git <span class="built_in">log</span> [tag] HEAD --grep feature</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示某个文件的版本历史，包括文件改名</span></span><br><span class="line">$ git <span class="built_in">log</span> --follow [file]</span><br><span class="line">$ git whatchanged [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件相关的每一次diff</span></span><br><span class="line">$ git <span class="built_in">log</span> -p [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示过去5次提交</span></span><br><span class="line">$ git <span class="built_in">log</span> -5 --pretty --oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示所有提交过的用户，按提交次数排序</span></span><br><span class="line">$ git shortlog -sn</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示指定文件是什么人在什么时间修改过</span></span><br><span class="line">$ git blame [file]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和工作区的差异</span></span><br><span class="line">$ git diff</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示暂存区和上一个commit的差异</span></span><br><span class="line">$ git diff --cached [file]</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>Git</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL优化</title>
    <url>/2021/03/04/MySQL%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<meta name="referrer" content="no-referrer" />

<p>Mysql 性能优化就算通过合理安排资源，调整系统参数使 MYSQL 运行更快，更节省资源。MYSQL 性能优化包括查询速度优化，更新速度优化，mysql 服务器优化等等。此处，介绍以下几个优化。包含，服务器硬件优化，系统配置优化，数据库结构优化，SQL 和索引优化。</p>
<span id="more"></span>

<h1 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h1><ol>
<li>阻塞</li>
<li>慢查询</li>
</ol>
<h1 id="可以从以下几个方面入手"><a href="#可以从以下几个方面入手" class="headerlink" title="可以从以下几个方面入手"></a>可以从以下几个方面入手</h1><ol>
<li>服务器硬件优化</li>
<li>系统配置优化</li>
<li>数据库结构优化</li>
<li>SQL 和索引优化</li>
</ol>
<p>通常优化 3 和 4</p>
<h1 id="慢查询日志"><a href="#慢查询日志" class="headerlink" title="慢查询日志"></a>慢查询日志</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;slow_query_log&#x27;</span>;</span><br><span class="line"><span class="comment"># 开启慢查询日志</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log=<span class="keyword">on</span>;</span><br><span class="line"><span class="comment"># 查询慢查询日志文件存放的位置</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">variables</span> <span class="keyword">like</span> <span class="string">&#x27;slow_query_log_file&#x27;</span>;</span><br><span class="line"><span class="comment"># 设置慢查询日志文件存放的位置</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> slow_query_log_file= <span class="string">&#x27;/home/mysql/sql_log/mysql-slow.log&#x27;</span></span><br><span class="line"><span class="comment"># 设置是否将没有使用索引的SQL记录到慢查询日志中</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> log_queries_not_using_indexes=<span class="keyword">on</span>;</span><br><span class="line"><span class="comment"># 设置是否将查询事件超过0秒的SQL记录到慢查询日志中，通产设置0.01秒</span></span><br><span class="line"><span class="keyword">set</span> <span class="keyword">global</span> long_query_time=<span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<h1 id="实操"><a href="#实操" class="headerlink" title="实操"></a>实操</h1><h2 id="默认不开启慢查询日志"><a href="#默认不开启慢查询日志" class="headerlink" title="默认不开启慢查询日志"></a>默认不开启慢查询日志</h2><p><img src="https://files.mdnice.com/user/10819/04c400ff-9df2-4ed9-949e-c49ea3a9c93a.png"></p>
<h2 id="慢查询日志存储的位置"><a href="#慢查询日志存储的位置" class="headerlink" title="慢查询日志存储的位置"></a>慢查询日志存储的位置</h2><p><img src="https://files.mdnice.com/user/10819/e5719e8c-edb2-4ae5-b005-f6a55fa0d3a9.png"></p>
<p>查询日志，这里我是 Docker 容器部署 MySQL，映射在服务器上<code>/data/mysql</code>目录下</p>
<p><img src="https://files.mdnice.com/user/10819/249fca6f-49a5-4e97-b61b-1c1b31cb3cc4.png"></p>
<h2 id="日志格式"><a href="#日志格式" class="headerlink" title="日志格式"></a>日志格式</h2><p><img src="https://files.mdnice.com/user/10819/08ac2b7b-4b14-459a-b026-4e60296a19a5.png"></p>
<p>第一行：执行 SQL 的主机信息</p>
<p>第二行：SQL 的执行信息</p>
<p>第三行：SQL 的执行事件</p>
<p>第四行：SQL 的内容</p>
<h1 id="慢查询日志分析工具"><a href="#慢查询日志分析工具" class="headerlink" title="慢查询日志分析工具"></a>慢查询日志分析工具</h1><h2 id="mysqldumpslow（官方工具）"><a href="#mysqldumpslow（官方工具）" class="headerlink" title="mysqldumpslow（官方工具）"></a>mysqldumpslow（官方工具）</h2><h3 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-s 是order的顺序</span><br><span class="line">al 平均锁定时间</span><br><span class="line">ar 平均返回记录时间</span><br><span class="line">at 平均查询时间（默认）</span><br><span class="line">c 计数</span><br><span class="line">l 锁定时间</span><br><span class="line">r 返回记录</span><br><span class="line">t 查询时间</span><br><span class="line">-t 是top n的意思，即为返回前面多少条的数据</span><br><span class="line">-g 后边可以写一个正则匹配模式，大小写不敏感的</span><br></pre></td></tr></table></figure>

<h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 得到返回记录集最多的10个SQL。</span></span><br><span class="line">mysqldumpslow -s r -t 10 /database/mysql/mysql06_slow.log</span><br><span class="line"><span class="comment"># 得到访问次数最多的10个SQL</span></span><br><span class="line">mysqldumpslow -s c -t 10 /database/mysql/mysql06_slow.log</span><br><span class="line"><span class="comment"># 得到按照时间排序的前10条里面含有左连接的查询语句。</span></span><br><span class="line">mysqldumpslow -s t -t 10 -g “left join” /database/mysql/mysql06_slow.log</span><br><span class="line"><span class="comment"># 另外建议在使用这些命令时结合 | 和more 使用 ，否则有可能出现刷屏的情况。</span></span><br><span class="line">mysqldumpslow -s r -t 20 /mysqldata/mysql/mysql06-slow.log | more</span><br></pre></td></tr></table></figure>

<h2 id="pt-query-digest"><a href="#pt-query-digest" class="headerlink" title="pt-query-digest"></a>pt-query-digest</h2><h3 id="快速安装"><a href="#快速安装" class="headerlink" title="快速安装"></a>快速安装</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://www.percona.com/downloads/percona-toolkit/2.2.16/RPM/percona-toolkit-2.2.16-1.noarch.rpm &amp;&amp; yum localinstall -y  percona-toolkit-2.2.16-1.noarch.rpm</span><br></pre></td></tr></table></figure>

<h3 id="参数解释-1"><a href="#参数解释-1" class="headerlink" title="参数解释"></a>参数解释</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pt-query-digest [OPTIONS] [FILES] [DSN]</span><br><span class="line">--create-review-table  当使用--review参数把分析结果输出到表中时，如果没有表就自动创建。</span><br><span class="line">--create-history-table  当使用--history参数把分析结果输出到表中时，如果没有表就自动创建。</span><br><span class="line">--filter  对输入的慢查询按指定的字符串进行匹配过滤后再进行分析</span><br><span class="line">--limit    限制输出结果百分比或数量，默认值是20,即将最慢的20条语句输出，如果是50%则按总响应时间占比从大到小排序，输出到总和达到50%位置截止。</span><br><span class="line">--host  mysql服务器地址</span><br><span class="line">--user  mysql用户名</span><br><span class="line">--password  mysql用户密码</span><br><span class="line">--history 将分析结果保存到表中，分析结果比较详细，下次再使用--history时，如果存在相同的语句，且查询所在的时间区间和历史表中的不同，则会记录到数据表中，可以通过查询同一CHECKSUM来比较某类型查询的历史变化。</span><br><span class="line">--review 将分析结果保存到表中，这个分析只是对查询条件进行参数化，一个类型的查询一条记录，比较简单。当下次使用--review时，如果存在相同的语句分析，就不会记录到数据表中。</span><br><span class="line">--output 分析结果输出类型，值可以是report(标准分析报告)、slowlog(Mysql slow log)、json、json-anon，一般使用report，以便于阅读。</span><br><span class="line">--since 从什么时间开始分析，值为字符串，可以是指定的某个”yyyy-mm-dd [hh:mm:ss]”格式的时间点，也可以是简单的一个时间值：s(秒)、h(小时)、m(分钟)、d(天)，如12h就表示从12小时前开始统计。</span><br><span class="line">--until 截止时间，配合—since可以分析一段时间内的慢查询。</span><br></pre></td></tr></table></figure>

<h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出到文件</span></span><br><span class="line">pt-query-digest slow-log &gt; slow_log.report</span><br><span class="line"><span class="comment"># 输出到数据库 --create-reviewtable 意思是慢查询日志输出到某一张表中</span></span><br><span class="line">pt-query-digest slow.log -review h=127.0.0.1,D=test,p=root,P=3306,u=root.t=query_review <span class="comment">--create-reviewtable --review-history t= hostname_slow</span></span><br></pre></td></tr></table></figure>

<h1 id="SQL-优化"><a href="#SQL-优化" class="headerlink" title="SQL 优化"></a>SQL 优化</h1><h2 id="需要优化的-SQL-特征"><a href="#需要优化的-SQL-特征" class="headerlink" title="需要优化的 SQL 特征"></a>需要优化的 SQL 特征</h2><ol>
<li>查询次数多且每次查询占用时间长的 SQL</li>
<li>IO 大的 SQL（SQL 中扫描行数越多，IO 越大）</li>
<li>未命中索引的 SQL</li>
</ol>
<h2 id="使用explain查询-SQL-的执行计划"><a href="#使用explain查询-SQL-的执行计划" class="headerlink" title="使用explain查询 SQL 的执行计划"></a>使用<code>explain</code>查询 SQL 的执行计划</h2><p><img src="https://files.mdnice.com/user/10819/22458fc1-b1a7-416d-a47a-2c1124ea0621.png"></p>
<h3 id="解释说明"><a href="#解释说明" class="headerlink" title="解释说明"></a>解释说明</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">table 显示这一行数据时关于哪张表的</span><br><span class="line">type 这是重要的列，显示连接使用了那种类型。从最好到最差的连接类型为const,eq_reg,ref,range,index,ALL。const常见于主键/唯一索引查找，eq_reg常见于主键的范围查找，ref常见于连接查询,range常见于索引的范围查找，index常见于索引的扫描，ALL常见于表扫描</span><br><span class="line">possible_keys 显示可能应用在这张表中的索引。如果为空，没有可能的索引。</span><br><span class="line">key 实际使用的索引。如果为NULL,则没有使用索引。</span><br><span class="line">key_len 使用的索引长度。在不损失精确性的情况下，长度越短越好</span><br><span class="line">ref 显示索引的那一列被使用了，如果可的话，是一个常数</span><br><span class="line">rows MySQL认为必须检查的用来返回请求数据的行数</span><br></pre></td></tr></table></figure>

<h2 id="SQL-优化-1"><a href="#SQL-优化-1" class="headerlink" title="SQL 优化"></a>SQL 优化</h2><ol>
<li>在经常查询的字段上适当加索引</li>
<li>避免子查询，可优化为连接查询，注意是否存在一对多关系，可能会出现数据重复</li>
</ol>
<h2 id="如何选择合理的列建立索引"><a href="#如何选择合理的列建立索引" class="headerlink" title="如何选择合理的列建立索引"></a>如何选择合理的列建立索引</h2><ol>
<li>在 where 从句，group by 从句，order by 从句，on 从句中出现的列</li>
<li>索引字段越小越好</li>
<li>离散度大的列放在联合索引的前面</li>
</ol>
<p>例如：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> payment <span class="keyword">where</span> staff_id = <span class="number">2</span> <span class="keyword">and</span> customer_id = <span class="number">584</span>;</span><br></pre></td></tr></table></figure>

<p>由于 customer_id 的离散度更大，所以应该使用 index(customer_id,staff_id)</p>
<h3 id="如何判断列的离散程度"><a href="#如何判断列的离散程度" class="headerlink" title="如何判断列的离散程度"></a>如何判断列的离散程度</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">count</span>(<span class="keyword">distinct</span> customer_id),<span class="keyword">count</span>(<span class="keyword">distinct</span> staff_id) <span class="keyword">from</span> payment</span><br></pre></td></tr></table></figure>

<p><img src="https://files.mdnice.com/user/10819/b4985bea-19c8-46fa-8405-8341c43b6c96.png"></p>
<p>列的唯一值越高，离散程度越大，可选择性越高。</p>
<h3 id="索引的维护和优化"><a href="#索引的维护和优化" class="headerlink" title="索引的维护和优化"></a>索引的维护和优化</h3><p>重复及冗余索引，重复索引是指相同的列以相同的顺序建立的同类型的索引，如下面<code>parmary key</code> 和<code>ID</code>列上的索引就是重复索引</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">test</span>(<span class="keyword">id</span> <span class="built_in">int</span> <span class="keyword">not</span> <span class="literal">null</span> primart <span class="keyword">key</span>),<span class="keyword">name</span> vachar(<span class="number">10</span>) <span class="keyword">not</span> <span class="literal">null</span>,title <span class="built_in">varchar</span>(<span class="number">50</span>) <span class="keyword">not</span> <span class="literal">null</span>,<span class="keyword">unique</span>(<span class="keyword">id</span>) ) <span class="keyword">engine</span>=<span class="keyword">innodb</span></span><br></pre></td></tr></table></figure>

<p>使用<code>pt-duplicate-key-checker</code>工具检查重复及冗余索引</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">pt-duplicate-key-checker -uroot -p<span class="string">&#x27;&#x27;</span> -h 127.0.0.1</span><br></pre></td></tr></table></figure>

<h1 id="数据库及表结构优化"><a href="#数据库及表结构优化" class="headerlink" title="数据库及表结构优化"></a>数据库及表结构优化</h1><h2 id="选择合适的数据类型"><a href="#选择合适的数据类型" class="headerlink" title="选择合适的数据类型"></a>选择合适的数据类型</h2><ol>
<li>使用可以存下你的数据的最小的数据类型</li>
<li>使用简单数据类型，int 要比 varchar 类型在 MySQL 处理上简单</li>
<li>尽可的使用 not null 定义字段</li>
<li>尽量少用 text 类型，非用不可时最好考虑分表</li>
</ol>
<p>例如</p>
<p>使用<code>bigint</code>来存储 IP 地址，利用<code>INET_ATON()</code>,<code>INET__NTOA()</code>两个函数进行转换</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> sessions(ipaddress) <span class="keyword">values</span> (<span class="keyword">INET_ATON</span>(<span class="string">&#x27;127.0.0.1&#x27;</span>));</span><br><span class="line"><span class="keyword">select</span> INET__NTOA(<span class="string">&#x27;127.0.0.1&#x27;</span>) <span class="keyword">from</span> sessions;</span><br></pre></td></tr></table></figure>

<h2 id="范式化和反范式化"><a href="#范式化和反范式化" class="headerlink" title="范式化和反范式化"></a>范式化和反范式化</h2><h3 id="范式化"><a href="#范式化" class="headerlink" title="范式化"></a>范式化</h3><ol>
<li><p>第一范式，强调原子性，要求属性具有原子性，不可再分解</p>
</li>
<li><p>第二范式，强调主键，要求记录有唯一标识，即实体的唯一性，级不存在部分依赖</p>
</li>
<li><p>第三范式，强调外键，要求任何字段不能由其他字段派生出来，要求字段没有冗余，即不存在依赖传递</p>
</li>
</ol>
<h3 id="反范式化"><a href="#反范式化" class="headerlink" title="反范式化"></a>反范式化</h3><p>为了查询效率的考虑，把原本符合第三范式的表适当的增加冗余，以达到优化查询效率的目的，反范式化是一种以控件来换时间的操作。</p>
<h2 id="数据库结构的优化"><a href="#数据库结构的优化" class="headerlink" title="数据库结构的优化"></a>数据库结构的优化</h2><h3 id="表的垂直拆分"><a href="#表的垂直拆分" class="headerlink" title="表的垂直拆分"></a>表的垂直拆分</h3><p>把原来一个有很多列的表拆分成多个表，这解决了表的宽度问题，通常垂直拆分可以按以下原则进行：</p>
<ol>
<li>把不常用的字段单独存放在一个表中</li>
<li>把大字段独立存在在一个表中</li>
<li>把经常一起使用的字段放在一起</li>
</ol>
<h3 id="表的水平拆分"><a href="#表的水平拆分" class="headerlink" title="表的水平拆分"></a>表的水平拆分</h3><p>为了解决单表的数据量大的问题，水平拆分的表每一个表的结构都是完全一致的</p>
<h1 id="系统配置优化"><a href="#系统配置优化" class="headerlink" title="系统配置优化"></a>系统配置优化</h1><p>数据库是基于操作系统的，目前大多数 MySQL 都是安装在 Linux 上，所以对于操作系统的一些参数配置也会影响 MySQL 的性能，下面列出常用的系统配置</p>
<h2 id="网络配置方面"><a href="#网络配置方面" class="headerlink" title="网络配置方面"></a>网络配置方面</h2><p>修改<code>/etc/sysctl.coonf</code>文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 增加tcp支持的队列数</span></span><br><span class="line">net.ip4.tcp_max_syn_backlog=65535</span><br><span class="line"><span class="meta">#</span><span class="bash"> 减少断开连接时，资源回收</span></span><br><span class="line">net.ipv4.tcp_max_tw_buckets=8000</span><br><span class="line">net.ipv4.tcp_tw_reuse=1</span><br><span class="line">net.ipv4.tcp_tw_recycle=1</span><br><span class="line">net.ipv4.tcp_fin_timeout=10</span><br></pre></td></tr></table></figure>

<p>打开文件数的限制，可以使用 ulimit -a 查看目录的各位限制，可以修改<code>/etc/security/limits.conf</code>文件，增加以下内容以修改打开文件数量的限制</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">soft nofile 65335</span><br><span class="line">hard nofile 65535</span><br></pre></td></tr></table></figure>

<p>除此之外最好在<code>MySQL</code>服务器上关闭<code>iptables</code>,<code>selinux</code>等防火墙软件</p>
<h2 id="MySQL-配置文件"><a href="#MySQL-配置文件" class="headerlink" title="MySQL 配置文件"></a>MySQL 配置文件</h2><h3 id="配置文件路径"><a href="#配置文件路径" class="headerlink" title="配置文件路径"></a>配置文件路径</h3><p>Linux：<code>/etc/my.cnf</code></p>
<h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p><code>innodb_buffer_pool_size</code>：非常重要的参数，用于配置 innodb 的缓冲池如果数据库中只有 innodb 表，则推荐配置量为总内存的 75%</p>
<p><code>innodb_buffer_pool_instances</code>：MySQL5.5 中新增的参数，可以控制缓存池的个数，默认情况下只有一个缓存池</p>
<p><code>innodb_log_buffer_size</code>：innodb log 缓存的大小，由于日志最长每秒钟就会刷新所以一般不用太大</p>
<p><code>innodb_flush_log_at_trx_commit</code>：关键参数，对 innodb 的 IO 效率影响最大，默认值为 1，可以取 0，1，2 三个值，一般建议设置为 2，但如果数据安全性要求比较高则使用默认值 1</p>
<p><code>innodb_read_io_threads</code>/<code>innodb_write_io_threads</code>：决定 innodb 读写 IO 的进程数，默认为 4</p>
<p><code>innodb_file_per_table</code>：关键参数，控制 innodb 没一个表使用独立的表空间，默认为 OFF，也就是所有表都会建立在共享表空间中</p>
<p><code>innodb_stats_on_metadata</code>：决定 MySQL 在什么情况下会刷新 innodb 表的统计信息</p>
<h3 id="第三方配置工具"><a href="#第三方配置工具" class="headerlink" title="第三方配置工具"></a>第三方配置工具</h3><p>Percon Configuration Wizard</p>
<h1 id="服务器硬件的优化"><a href="#服务器硬件的优化" class="headerlink" title="服务器硬件的优化"></a>服务器硬件的优化</h1><h2 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h2><p>选择合适的 CPU，单个频率更快的 CPU</p>
<ol>
<li>MySQL 一些工作只能使用到单核</li>
<li>MySQL 对 CPU 的核数支持并不是越快越好，MySQL5.5 使用的服务器不要超过 32 核</li>
</ol>
<h2 id="disk-IO-优化"><a href="#disk-IO-优化" class="headerlink" title="disk IO 优化"></a>disk IO 优化</h2><p>常用 RAID 级别简介</p>
<p>RAID0：也成为条带，就是把多个磁盘连接成一个硬盘使用，这个级别 IO 最好</p>
<p>RAID1：也称为镜像，要求至少有两个磁盘，每组磁盘存储的数据相同</p>
<p>RAID5：也是把多个（最少 3 个）硬盘合并成一个逻辑盘使用，数据读写时会建立奇偶校验信息，并且奇偶校验信息和相对应的数据分别存储于不同的硬盘上。当 RAID5 的一个磁盘数据发生损坏后，就剩下的数据和相应的奇偶校验信息去恢复被损坏的数据。</p>
<p>RAID1+0：就是 RAID1 和 RAID0 的结合，同时具备两个级别的优缺点。一般建议数据库使用这个级别。</p>
<p>SNA 和 NAT 是否适合数据库</p>
<ol>
<li>常用于高可用的解决方案</li>
<li>顺序读写效率很高，但是随机读写不如人意</li>
<li>数据库随机读写效率很高</li>
</ol>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>SQL 优化是常见的面试题，可以说 80%面试中都会或多或少被问到，同时 SQL 优化也是在实际生产实践中经常用到的技术，学好优化可以让我们写出更高性能的程序。</p>
]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
</search>
